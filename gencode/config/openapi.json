{
  "swagger": "2.0",
  "info": {
    "description": "\n# API overview\nSigfox API is used to integrate with the Sigfox platform.\n\nThe API uses the HTTP protocol, following the REST principles (POST, GET, DELETE, PUT requests).\nThe API endpoints accept and return data in the JSON format, with the corresponding \"application/json\" content type header.\n\nThe Sigfox API access differs for every API User based on their profile.\nIf you already have a Sigfox account, you can retrieve the API Documentation customized for your API User directly in json or yaml format.\nThe “how to” procedure is detailed in the [API Documentation](https://support.sigfox.com/docs/api-documentation) article.\n\nThe PUT request is the only request used to edit an existing entity. You don't need to specify each value. If a property is not present in the request, it won't be processed and updated. To remove an optional property, it must be filled in the request with the explicit value NULL.\nIf a property has no value, it won't appear in the result of a GET request.\n\n# Authentication and security\nSigfox API is only accessible using HTTPS, and all API endpoints require authentication credentials (API user login and password).\nAn API User is associated to a group with given profiles. You can view and manage your API User in the [Sigfox Portal](https://backend.sigfox.com/auth/login).\n\nIf you need an API User, follow the [API credential creation](https://support.sigfox.com/docs/api-credential-creation) procedure.\n\nYour API User must remain private. Should the API credentials be compromised, new ones can be generated at any moment, invalidating the previous ones.\nCORS and JSONP are intentionally unsupported. CORS and JSONP JavaScript techniques tends to expose your credentials to your users. If you really need to call Sigfox API from JavaScript in the browser, you must set a reverse proxy on your website.\nBe careful not to use proxy for all requests to Sigfox OSS but to only select the relevant ones.\n\n<!-- ReDoc-Inject: <security-definitions> -->\n\n# Usage limits\nAll Sigfox API endpoints are using the same underlying technology that powers the core Sigfox Platform.\nFor Cloud efficiency and security reasons, Sigfox is moving a step forward on API rate limiting, by setting upper bounds for some API endpoints.\nPlease note that a new HTTP response will be returned in case of rate exceeded : “HTTP 429: too many requests”.\n\nFor more information check [API Rate limiting](https://support.sigfox.com/docs/api-rate-limiting) policy. Sigfox reserves the right to modify these limits without notice.\n\n# Versioning\n Sigfox API supports versioning of its endpoints through a version suffix in the endpoint URL. This suffix has the following format: \"vX\", where X is the version number. For example: v2/device.\n All requests must include the version suffix in the endpoint URL.\n Any new backwards-incompatible change will be released in a new version.\n\n Read the [API versioning management](https://support.sigfox.com/docs/api-versioning) to learn more about it.\n\n# Paging\n Some API requests will return a list of data. If the list is longer than the set limit, the items will be retrieved via multiple requests. The paging section in the response will specify a URL for the next request.\n Keep in mind rate limiting policy to manage your requests.\n You can use the limit parameter to limit the number of items to be returned, between 1 and 100 (default). The offset parameter is used to specify a number of items to skip.\n\n# Errors\n Sigfox API uses conventional HTTP response codes to indicate the success or failure of an API request.\n Codes in the 2xx range indicate success.\n Codes in the 4xx range indicate an error that failed given the information provided (e.g. a required parameter missing, a resource was not found, etc.). Often the response will also include a message explaining the error.\n Codes in the 5xx range indicate an error with servers.\n\n For more information please refer to the [Response code article](https://support.sigfox.com/docs/api-response-code-references).\n",
    "version": "2.0",
    "title": "Sigfox API",
    "termsOfService": "https://storage.sbg.cloud.ovh.net/v1/AUTH_669d7dfced0b44518cb186841d7cbd75/prod_docs/55745493-Sigfox_API-Portal_CTU.pdf",
    "contact": { "name": "Sigfox Support", "url": "https://support.sigfox.com" }
  },
  "host": "api.sigfox.com",
  "basePath": "/v2",
  "schemes": ["https"],
  "consumes": ["application/json"],
  "produces": ["application/json"],
  "security": [{ "basicAuth": [] }],
  "paths": {
    "/api-users/": {
      "get": {
        "tags": ["ApiUsers"],
        "summary": "Retrieve a list of API users",
        "description": "Retrieve a list of API users according to visibility permissions and request filters.\n",
        "operationId": "listApiUsers",
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "Defines the other available fields to be returned in the response.\n",
            "required": false,
            "type": "string",
            "enum": [
              "group(name,type,level,bssId,customerBssId)",
              "profiles(name,roles(name,perms(name)))"
            ]
          },
          {
            "name": "profileId",
            "in": "query",
            "description": "Searches for API users with the given profile",
            "required": false,
            "type": "string"
          },
          {
            "name": "groupIds",
            "in": "query",
            "description": "Searches for API users who are attached to the given groups",
            "required": false,
            "type": "array",
            "items": { "type": "string" },
            "collectionFormat": "csv"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Defines the maximum number of items to return",
            "required": false,
            "type": "integer",
            "default": 100,
            "format": "int32"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Defines the number of items to skip",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int32"
          },
          {
            "name": "authorizations",
            "in": "query",
            "description": "if true, return the list of actions and resources the user has access",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "title": "ApiUsers",
                  "items": { "$ref": "#/definitions/apiUser" }
                },
                "paging": { "$ref": "#/definitions/paging" }
              },
              "title": "Response"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": { "$ref": "#/definitions/ErrorContent" }
          },
          "401": {
            "description": "Unauthorized. Authentication (ID/password) error."
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "You are not allowed to access the resource."
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "The requested resource was not found."
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "schema": {
              "type": "object",
              "properties": {
                "message": { "type": "string" },
                "allowedMethods": {
                  "type": "array",
                  "items": { "type": "string" }
                }
              },
              "example": {
                "message": "Method PATCH not allowed.",
                "allowedMethods": ["GET", "POST", "PUT", "DELETE"]
              }
            }
          },
          "500": { "description": "Internal Server Error" }
        }
      },
      "post": {
        "tags": ["ApiUsers"],
        "summary": "Create an API user",
        "description": "Create a new API user.\n",
        "operationId": "createApiUser",
        "parameters": [
          {
            "in": "body",
            "name": "apiUser",
            "required": true,
            "schema": { "$ref": "#/definitions/apiUserCreation" }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "Location": {
                "type": "string",
                "description": "The newly created API user location"
              }
            },
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "The newly created API user identifier"
                }
              },
              "title": "Response"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": { "$ref": "#/definitions/ErrorContent" }
          },
          "401": {
            "description": "Unauthorized. Authentication (ID/password) error."
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "You are not allowed to access the resource."
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "The requested resource was not found."
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "schema": {
              "type": "object",
              "properties": {
                "message": { "type": "string" },
                "allowedMethods": {
                  "type": "array",
                  "items": { "type": "string" }
                }
              },
              "example": {
                "message": "Method PATCH not allowed.",
                "allowedMethods": ["GET", "POST", "PUT", "DELETE"]
              }
            }
          },
          "500": { "description": "Internal Server Error" }
        }
      },
      "parameters": []
    },
    "/api-users/{id}": {
      "get": {
        "tags": ["ApiUsers"],
        "summary": "Retrieve information about an API user",
        "description": "Retrieve information about a given API user.\n",
        "operationId": "getApiUser",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The API user identifier",
            "required": true,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Defines the other available fields to be returned in the response.\n",
            "required": false,
            "type": "string",
            "enum": [
              "group(name,type,level,bssId,customerBssId)",
              "profiles(name,roles(name,perms(name)))"
            ]
          },
          {
            "name": "authorizations",
            "in": "query",
            "description": "if true, return the list of actions and resources the user has access",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": { "$ref": "#/definitions/apiUser" }
          },
          "400": {
            "description": "Bad Request",
            "schema": { "$ref": "#/definitions/ErrorContent" }
          },
          "401": {
            "description": "Unauthorized. Authentication (ID/password) error."
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "You are not allowed to access the resource."
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "The requested resource was not found."
                }
              }
            }
          },
          "500": { "description": "Internal Server Error" }
        }
      },
      "put": {
        "tags": ["ApiUsers"],
        "summary": "Update an API user",
        "description": "Update information about a given API user.\n",
        "operationId": "updateApiUser",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The API user identifier",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "apiUser",
            "description": "The information to update",
            "required": true,
            "schema": { "$ref": "#/definitions/apiUserEdition" }
          }
        ],
        "responses": {
          "204": { "description": "No Content. Successful response - Updated" },
          "400": {
            "description": "Bad Request",
            "schema": { "$ref": "#/definitions/ErrorContent" }
          },
          "401": {
            "description": "Unauthorized. Authentication (ID/password) error."
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "You are not allowed to access the resource."
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "The requested resource was not found."
                }
              }
            }
          },
          "500": { "description": "Internal Server Error" }
        }
      },
      "delete": {
        "tags": ["ApiUsers"],
        "summary": "Delete an API user",
        "description": "Delete a given API user.\n",
        "operationId": "deleteApiUser",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The API user identifier",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": { "description": "No Content. Successful response - Deleted" },
          "400": {
            "description": "Bad Request",
            "schema": { "$ref": "#/definitions/ErrorContent" }
          },
          "401": {
            "description": "Unauthorized. Authentication (ID/password) error."
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "You are not allowed to access the resource."
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "The requested resource was not found."
                }
              }
            }
          },
          "500": { "description": "Internal Server Error" }
        }
      },
      "parameters": []
    },
    "/api-users/{id}/profiles": {
      "put": {
        "tags": ["ApiUsers"],
        "summary": "Associate profiles to an API user.",
        "description": "Associate new profiles to a given API user.",
        "operationId": "addProfileToApiUser",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The API user identifier",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "profileIds",
            "description": "The API profile to update",
            "required": true,
            "schema": { "$ref": "#/definitions/profileIds" }
          }
        ],
        "responses": {
          "204": { "description": "No Content. Successful response - Updated" },
          "400": {
            "description": "Bad Request",
            "schema": { "$ref": "#/definitions/ErrorContent" }
          },
          "401": {
            "description": "Unauthorized. Authentication (ID/password) error."
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "You are not allowed to access the resource."
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "The requested resource was not found."
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "schema": {
              "type": "object",
              "properties": {
                "message": { "type": "string" },
                "allowedMethods": {
                  "type": "array",
                  "items": { "type": "string" }
                }
              },
              "example": {
                "message": "Method PATCH not allowed.",
                "allowedMethods": ["GET", "POST", "PUT", "DELETE"]
              }
            }
          },
          "500": { "description": "Internal Server Error" }
        }
      },
      "parameters": []
    },
    "/api-users/{id}/profiles/{profileId}": {
      "delete": {
        "tags": ["ApiUsers"],
        "summary": "Delete a profile to a given API user.",
        "description": "Delete a profile to a given API user.\n",
        "operationId": "deleteProfileOfApiUser",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The API user identifier",
            "required": true,
            "type": "string"
          },
          {
            "name": "profileId",
            "in": "path",
            "description": "The profile identifier",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": { "description": "No Content. Successful response - Deleted" },
          "400": {
            "description": "Bad Request",
            "schema": { "$ref": "#/definitions/ErrorContent" }
          },
          "401": {
            "description": "Unauthorized. Authentication (ID/password) error."
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "You are not allowed to access the resource."
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "The requested resource was not found."
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "schema": {
              "type": "object",
              "properties": {
                "message": { "type": "string" },
                "allowedMethods": {
                  "type": "array",
                  "items": { "type": "string" }
                }
              },
              "example": {
                "message": "Method PATCH not allowed.",
                "allowedMethods": ["GET", "POST", "PUT", "DELETE"]
              }
            }
          },
          "500": { "description": "Internal Server Error" }
        }
      },
      "parameters": []
    },
    "/api-users/{id}/renew-credential": {
      "put": {
        "tags": ["ApiUsers"],
        "summary": "Generate a new password for an API user",
        "description": "Generate a new password for a given API user.\n",
        "operationId": "renewCredential",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The API user identifier",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": {
              "type": "object",
              "properties": {
                "accessToken": {
                  "type": "string",
                  "description": "The new API user's acces token (password)"
                }
              },
              "title": "Response"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": { "$ref": "#/definitions/ErrorContent" }
          },
          "401": {
            "description": "Unauthorized. Authentication (ID/password) error."
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "You are not allowed to access the resource."
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "The requested resource was not found."
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "schema": {
              "type": "object",
              "properties": {
                "message": { "type": "string" },
                "allowedMethods": {
                  "type": "array",
                  "items": { "type": "string" }
                }
              },
              "example": {
                "message": "Method PATCH not allowed.",
                "allowedMethods": ["GET", "POST", "PUT", "DELETE"]
              }
            }
          },
          "500": { "description": "Internal Server Error" }
        }
      },
      "parameters": []
    },
    "/contract-infos/": {
      "get": {
        "tags": ["ContractInfos"],
        "summary": "Retrieve a list of contracts",
        "description": "Retrieve a list of contracts according to visibility permissions and request filters.\n",
        "operationId": "listContractInfos",
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "description": "Searches for contracts containing the given text in their name",
            "required": false,
            "type": "string"
          },
          {
            "name": "groupId",
            "in": "query",
            "description": "Searches for contracts who are attached to the given group",
            "required": false,
            "type": "string"
          },
          {
            "name": "groupType",
            "in": "query",
            "description": "Searches for contracts that are attached to a specific group type.\n- 2 -> BASIC\n- 9 -> CHANNEL\n",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "deep",
            "in": "query",
            "description": "Searches for contracts that are attached to the given group and its descendants",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "up",
            "in": "query",
            "description": "Searches for contracts that are attached to the given group and its ancestors",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "orderIds",
            "in": "query",
            "description": "Searches for contracts with the listed orderIds. The elements of the list are separated by comma.",
            "required": false,
            "type": "string"
          },
          {
            "name": "contractIds",
            "in": "query",
            "description": "Searches for contracts IDs that have the listed external (BSS) contractId. The elements of the list are separated by comma.",
            "required": false,
            "type": "string"
          },
          {
            "name": "fromTime",
            "in": "query",
            "description": "Searches for contracts with communication end time superior or equal to given time (in milliseconds since Unix Epoch).",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "toTime",
            "in": "query",
            "description": "Searches for contracts with start time inferior to given time (in milliseconds since Unix Epoch).",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "tokenDuration",
            "in": "query",
            "description": "Searches for contracts with the given token duration in months.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pricingModel",
            "in": "query",
            "description": "Searches for contracts with a given pricing model \n1 -> Pricing model v1\n2 -> Pricing model v2\n3 -> Pricing model v3\n",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "subscriptionPlan",
            "in": "query",
            "description": "Searches for contracts with the given subscription plan:\n0 -> Free order\n1 -> Pay As You Grow (PAYG)\n2 -> Committed Volume Plan (CVP)\n3 -> Flexible Committed Volume Plan (CVP Flex)\n4 -> PACK\n5 -> DevKit\n6 -> Activate\n",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "geolocationMode",
            "in": "query",
            "description": "Searches for contracts with the given geolocation mode (level)\n1 (ATLAS)\n2 (ATLAS_WIFI)\n3 (N/A)\n4 (ATLAS_POV)\n5 (ATLAS_BUBBLE)\n6 (ATLAS_WIFI_PRIVATEDB)\n",
            "required": false,
            "type": "integer",
            "default": 1,
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Defines the other available fields to be returned in the response.\n",
            "required": false,
            "type": "string",
            "enum": [
              "group(name,type,level)",
              "order(name)",
              "blacklistedTerritories(group(name,type,level))"
            ]
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of items to return",
            "required": false,
            "type": "integer",
            "default": 100,
            "format": "int32"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "The number of items to skip",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int32"
          },
          {
            "name": "pageId",
            "in": "query",
            "description": "Token representing the page to retrieve",
            "required": false,
            "type": "string"
          },
          {
            "name": "authorizations",
            "in": "query",
            "description": "if true, we return the list of actions and resources the user has access",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": { "$ref": "#/definitions/contractInfo" }
                },
                "paging": { "$ref": "#/definitions/paging" }
              },
              "title": "Response"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": { "$ref": "#/definitions/ErrorContent" }
          },
          "401": {
            "description": "Unauthorized. Authentication (ID/password) error."
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "You are not allowed to access the resource."
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "The requested resource was not found."
                }
              }
            }
          },
          "500": { "description": "Internal Server Error" }
        }
      },
      "parameters": []
    },
    "/contract-infos/{id}": {
      "get": {
        "tags": ["ContractInfos"],
        "summary": "Retrieve information about a contract",
        "description": "Retrieve information about a given contract.\n",
        "operationId": "getContractInfo",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The Contract identifier",
            "required": true,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Defines the other available fields to be returned in the response.\n",
            "required": false,
            "type": "string",
            "enum": [
              "group(name,type,level)",
              "order(name)",
              "blacklistedTerritories(group(name,type,level))"
            ]
          },
          {
            "name": "authorizations",
            "in": "query",
            "description": "if true, we return the list of actions and resources the user has access",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": { "$ref": "#/definitions/contractInfo" }
          },
          "400": {
            "description": "Bad Request",
            "schema": { "$ref": "#/definitions/ErrorContent" }
          },
          "401": {
            "description": "Unauthorized. Authentication (ID/password) error."
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "You are not allowed to access the resource."
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "The requested resource was not found."
                }
              }
            }
          },
          "500": { "description": "Internal Server Error" }
        }
      },
      "parameters": []
    },
    "/contract-infos/{id}/bulk/restart": {
      "post": {
        "tags": ["ContractInfos"],
        "summary": "Create a job to restart the devices associated to a contract",
        "description": "Create an async job to restart the devices associated to a contract.\n",
        "operationId": "contractBulkRestart",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The Contract identifier",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Job started",
            "schema": {
              "type": "object",
              "properties": {
                "jobId": {
                  "type": "string",
                  "description": "jobId so that the customer is able to request job status"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": { "$ref": "#/definitions/ErrorContent" }
          },
          "401": {
            "description": "Unauthorized. Authentication (ID/password) error."
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "You are not allowed to access the resource."
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "The requested resource was not found."
                }
              }
            }
          },
          "500": { "description": "Internal Server Error" }
        }
      },
      "parameters": []
    },
    "/contract-infos/bulk/restart/{jobId}": {
      "get": {
        "tags": ["ContractInfos"],
        "summary": "Retrieve a contract async job status for restart action",
        "description": "Retrieve a contract async job status for restart action.\n",
        "operationId": "getContractBulkRestartJob",
        "parameters": [
          {
            "name": "jobId",
            "in": "path",
            "description": "The job identidier (hexademical format)",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": { "$ref": "#/definitions/actionJob" }
          },
          "400": {
            "description": "Bad Request",
            "schema": { "$ref": "#/definitions/ErrorContent" }
          },
          "401": {
            "description": "Unauthorized. Authentication (ID/password) error."
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "You are not allowed to access the resource."
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "The requested resource was not found."
                }
              }
            }
          },
          "500": { "description": "Internal Server Error" }
        }
      },
      "parameters": []
    },
    "/contract-infos/{id}/devices": {
      "get": {
        "tags": ["ContractInfos"],
        "summary": "Retrieve the list of devices having a token on the specified contract",
        "description": "Retrieve a list of devices according to visibility permissions and request filters.\n",
        "operationId": "deviceList",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The contract info ID",
            "required": true,
            "type": "string"
          },
          {
            "name": "deviceTypeId",
            "in": "query",
            "description": "Returns only devices of the given device type",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Defines the other available fields to be returned in the response.\n",
            "required": false,
            "type": "string",
            "enum": [
              "deviceType(name)",
              "group(name,type,level,bssId,customerBssId)",
              "contract(name)",
              "productCertificate(key)",
              "modemCertificate(name)"
            ]
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of items to return",
            "required": false,
            "type": "integer",
            "default": 100,
            "format": "int32"
          },
          {
            "name": "pageId",
            "in": "query",
            "description": "Token representing the page to retrieve",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "title": "Devices",
                  "items": { "$ref": "#/definitions/device" }
                },
                "paging": { "$ref": "#/definitions/paging" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": { "$ref": "#/definitions/ErrorContent" }
          },
          "401": {
            "description": "Unauthorized. Authentication (ID/password) error."
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "You are not allowed to access the resource."
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "The requested resource was not found."
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "schema": {
              "type": "object",
              "properties": {
                "message": { "type": "string" },
                "allowedMethods": {
                  "type": "array",
                  "items": { "type": "string" }
                }
              },
              "example": {
                "message": "Method PATCH not allowed.",
                "allowedMethods": ["GET", "POST", "PUT", "DELETE"]
              }
            }
          },
          "500": { "description": "Internal Server Error" }
        }
      },
      "parameters": []
    },
    "/coverages/global/predictions": {
      "get": {
        "tags": ["Coverages"],
        "summary": "Retrieve coverage predictions for any location.",
        "description": "Get coverage margins for a selected latitude and longitude, for each\nredundancy level.\nFor more information please refer to the [Global Coverage API article](https://support.sigfox.com/docs/global-coverage-api).\n",
        "parameters": [
          {
            "name": "lat",
            "in": "query",
            "description": "the latitude",
            "required": true,
            "type": "number",
            "format": "double"
          },
          {
            "name": "lng",
            "in": "query",
            "description": "the longitude",
            "required": true,
            "type": "number",
            "format": "double"
          },
          {
            "name": "radius",
            "in": "query",
            "description": "The radius of the area in which the coverage results are averaged and returned for a selected location, in meters.\n",
            "required": false,
            "type": "number",
            "default": 300,
            "format": "int"
          },
          {
            "name": "groupId",
            "in": "query",
            "description": "the id of a group to include its operator in the global coverage",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The margins values (dB) for redundancy level 1, 2 and 3",
            "schema": {
              "type": "object",
              "properties": {
                "locationCovered": {
                  "type": "boolean",
                  "description": "True, if the requested location is considered covered."
                },
                "margins": {
                  "type": "array",
                  "description": "Margins",
                  "items": { "type": "number", "format": "int" }
                }
              },
              "title": "Margins",
              "example": { "locationCovered": true, "margins": [47, 32, 17] }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": { "$ref": "#/definitions/ErrorContent" }
          },
          "401": {
            "description": "Unauthorized. Authentication (ID/password) error."
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "You are not allowed to access the resource."
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "The requested resource was not found."
                }
              }
            }
          },
          "500": { "description": "Internal Server Error" }
        }
      },
      "post": {
        "tags": ["Coverages"],
        "summary": "Retrieve coverage predictions for any batch of locations",
        "description": "Get the coverage margins for multiple points, for each redundancy level.\nSigfox recommends to:\n  -use the bulk endpoint instead when requesting a large number of locations\n  -not request more than 200 locations at a time\n  -wait for the result to be returned before requesting again (avoid multithreading)\nFor more information please refer to the [Global Coverage API article](https://support.sigfox.com/docs/global-coverage-api).\n",
        "parameters": [
          {
            "in": "body",
            "name": "payload",
            "required": true,
            "schema": { "$ref": "#/definitions/globalCoverageRequest" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": { "$ref": "#/definitions/globalCoverageResponse" }
          },
          "400": {
            "description": "Bad Request",
            "schema": { "$ref": "#/definitions/ErrorContent" }
          },
          "401": {
            "description": "Unauthorized. Authentication (ID/password) error."
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "You are not allowed to access the resource."
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "The requested resource was not found."
                }
              }
            }
          },
          "500": { "description": "Internal Server Error" }
        }
      },
      "parameters": []
    },
    "/coverages/global/predictions/bulk": {
      "post": {
        "tags": ["Coverages"],
        "summary": "Retrieve coverage predictions for any batch of locations with asynchronous job",
        "description": "Starting the computation of the coverage margins for multiple points, for each redundancy level.\nFor more information please refer to the [Global Coverage API article](https://support.sigfox.com/docs/global-coverage-api).\n",
        "operationId": "globalPredictionBulkPost",
        "parameters": [
          {
            "in": "body",
            "name": "payload",
            "required": true,
            "schema": { "$ref": "#/definitions/globalCoverageRequest" }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "type": "object",
              "properties": {
                "jobId": {
                  "type": "string",
                  "description": "jobId provided to the customer to request the job status and results"
                }
              },
              "example": { "jobId": "59a0e7e23c8789070995cc4b" }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": { "$ref": "#/definitions/ErrorContent" }
          },
          "401": {
            "description": "Unauthorized. Authentication (ID/password) error."
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "You are not allowed to access the resource."
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "The requested resource was not found."
                }
              }
            }
          },
          "500": { "description": "Internal Server Error" }
        }
      },
      "parameters": []
    },
    "/coverages/global/predictions/bulk/{jobId}": {
      "get": {
        "tags": ["Coverages"],
        "summary": "Retrieve coverage predictions computed with async job results",
        "description": "Retrieve coverage predictions computation from asynchronous job status and results.\nFor more information please refer to the [Global Coverage API article](https://support.sigfox.com/docs/global-coverage-api).\n",
        "operationId": "globalPredictionBulkGet",
        "parameters": [
          {
            "name": "jobId",
            "in": "path",
            "description": "The job's identifier (hexademical format)",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": { "$ref": "#/definitions/globalCoverageBulkResponse" }
          },
          "400": {
            "description": "Bad Request",
            "schema": { "$ref": "#/definitions/ErrorContent" }
          },
          "401": {
            "description": "Unauthorized. Authentication (ID/password) error."
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "You are not allowed to access the resource."
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "The requested resource was not found."
                }
              }
            }
          },
          "500": { "description": "Internal Server Error" }
        }
      },
      "parameters": []
    },
    "/coverages/operators/redundancy": {
      "get": {
        "tags": ["Coverages"],
        "summary": "Retrieve coverage redundancy for an operator.",
        "description": "Get operator coverage redundancy for a selected latitude and longitude,\nfor specific device situation.\nFor more information please refer to the [Global Coverage API article](https://support.sigfox.com/docs/global-coverage-api).\n",
        "parameters": [
          {
            "name": "lat",
            "in": "query",
            "description": "the latitude",
            "required": true,
            "type": "number",
            "format": "double"
          },
          {
            "name": "lng",
            "in": "query",
            "description": "the longitude",
            "required": true,
            "type": "number",
            "format": "double"
          },
          {
            "name": "operatorId",
            "in": "query",
            "description": "The group id related to the operator to get its coverage result. Is required for root sigfox users.\n",
            "required": false,
            "type": "string"
          },
          {
            "name": "deviceSituation",
            "in": "query",
            "description": "The coverage mode.\n- OUTDOOR, max link budget\n- INDOOR, link budget with 20dB margin\n- UNDERGROUND, link budget with 30dB margin\n",
            "required": false,
            "type": "string",
            "default": "INDOOR"
          },
          {
            "name": "deviceClassId",
            "in": "query",
            "description": "The product uplink class from 0 to 3 (0U to 3U).",
            "required": false,
            "type": "number",
            "default": 0,
            "format": "int"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": { "$ref": "#/definitions/redundancyResponse" }
          },
          "400": {
            "description": "Bad Request",
            "schema": { "$ref": "#/definitions/ErrorContent" }
          },
          "401": {
            "description": "Unauthorized. Authentication (ID/password) error."
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "You are not allowed to access the resource."
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "The requested resource was not found."
                }
              }
            }
          },
          "500": { "description": "Internal Server Error" }
        }
      },
      "parameters": []
    },
    "/devices/": {
      "get": {
        "tags": ["Devices"],
        "summary": "Retrieve a list of devices",
        "description": "Retrieve a list of devices according to visibility permissions and request filters.\n",
        "operationId": "listDevices",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The device's identifier (hexadecimal format)",
            "required": false,
            "type": "string"
          },
          {
            "name": "groupIds",
            "in": "query",
            "description": "Returns all devices under the given groups (included sub-groups if the parameter deep is equals to true)",
            "required": false,
            "type": "array",
            "items": { "type": "string" },
            "collectionFormat": "csv"
          },
          {
            "name": "deep",
            "in": "query",
            "description": "if true, we search by groups and subgroups through the parameter 'groupIds'",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "authorizations",
            "in": "query",
            "description": "if true, we return the list of actions and resources the user has access",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "deviceTypeId",
            "in": "query",
            "description": "Returns all devices of the given device type",
            "required": false,
            "type": "string"
          },
          {
            "name": "operatorId",
            "in": "query",
            "description": "Returns all devices under the given operator",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "The field on which the list will be sorted. (field to sort ascending or -field to sort descending)",
            "required": false,
            "type": "string",
            "default": "name",
            "enum": ["id", "-id", "name", "-name", "lastCom", "-lastCom"]
          },
          {
            "name": "minId",
            "in": "query",
            "description": "The minimal id of the filtered range, only availble when sort parameter is set to \"id\" or \"-id\"",
            "required": false,
            "type": "string"
          },
          {
            "name": "maxId",
            "in": "query",
            "description": "The maximal id of the filtered range, only availble when sort parameter is set to \"id\" or \"-id\"",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Defines the other available fields to be returned in the response.\n",
            "required": false,
            "type": "string",
            "enum": [
              "deviceType(name)",
              "group(name,type,level,bssId,customerBssId)",
              "contract(name)",
              "productCertificate(key)",
              "modemCertificate(key)"
            ]
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of items to return",
            "required": false,
            "type": "integer",
            "default": 100,
            "format": "int32"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "The number of items to skip",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int32"
          },
          {
            "name": "pageId",
            "in": "query",
            "description": "Token representing the page to retrieve",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": { "$ref": "#/definitions/device" }
                },
                "actions": { "$ref": "#/definitions/actions" },
                "paging": { "$ref": "#/definitions/paging" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": { "$ref": "#/definitions/ErrorContent" }
          },
          "401": {
            "description": "Unauthorized. Authentication (ID/password) error."
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "You are not allowed to access the resource."
                }
              }
            }
          },
          "500": { "description": "Internal Server Error" }
        }
      },
      "post": {
        "tags": ["Devices"],
        "summary": "Create a device",
        "description": "Create a new device.\n",
        "operationId": "createDevice",
        "parameters": [
          {
            "in": "body",
            "name": "device",
            "description": "The device to create",
            "required": true,
            "schema": { "$ref": "#/definitions/deviceCreationJob" }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "Location": {
                "type": "string",
                "description": "The URI of the new created device"
              }
            },
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "The device's identifier (hexadecimal format)"
                }
              },
              "example": { "id": "56E3AD" }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": { "$ref": "#/definitions/ErrorContent" }
          },
          "401": {
            "description": "Unauthorized. Authentication (ID/password) error."
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "You are not allowed to access the resource."
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "A conflict happened with the current state of the resource."
                }
              }
            }
          },
          "500": { "description": "Internal Server Error" }
        }
      },
      "parameters": []
    },
    "/devices/{id}": {
      "get": {
        "tags": ["Devices"],
        "summary": "Retrieve information about a device",
        "description": "Retrieve information about a given device.\n",
        "operationId": "getDevice",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The Device identifier (hexadecimal format)",
            "required": true,
            "type": "string"
          },
          {
            "name": "authorizations",
            "in": "query",
            "description": "if true, we return the list of actions and resources the user has access",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Defines the other available fields to be returned in the response.\n",
            "required": false,
            "type": "string",
            "enum": [
              "deviceType(name)",
              "group(name,type,level,bssId,customerBssId)",
              "contract(name)",
              "productCertificate(key)",
              "modemCertificate(key)"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": { "$ref": "#/definitions/device" }
          },
          "400": {
            "description": "Bad Request",
            "schema": { "$ref": "#/definitions/ErrorContent" }
          },
          "401": {
            "description": "Unauthorized. Authentication (ID/password) error."
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "You are not allowed to access the resource."
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "The requested resource was not found."
                }
              }
            }
          },
          "500": { "description": "Internal Server Error" }
        }
      },
      "put": {
        "tags": ["Devices"],
        "summary": "Update a device",
        "description": "Update a given device.\n",
        "operationId": "updateDevice",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The Device identifier (hexadecimal format)",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "device",
            "description": "The device to update",
            "required": true,
            "schema": { "$ref": "#/definitions/deviceUpdateJob" }
          }
        ],
        "responses": {
          "204": { "description": "No content" },
          "400": {
            "description": "Bad Request",
            "schema": { "$ref": "#/definitions/ErrorContent" }
          },
          "401": {
            "description": "Unauthorized. Authentication (ID/password) error."
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "You are not allowed to access the resource."
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "The requested resource was not found."
                }
              }
            }
          },
          "500": { "description": "Internal Server Error" }
        }
      },
      "delete": {
        "tags": ["Devices"],
        "summary": "Delete a device",
        "description": "Delete a given device.\n",
        "operationId": "deleteDevice",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The Device identifier (hexadecimal format)",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": { "description": "No content" },
          "400": {
            "description": "Bad Request",
            "schema": { "$ref": "#/definitions/ErrorContent" }
          },
          "401": {
            "description": "Unauthorized. Authentication (ID/password) error."
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "You are not allowed to access the resource."
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "The requested resource was not found."
                }
              }
            }
          },
          "500": { "description": "Internal Server Error" }
        }
      },
      "parameters": []
    },
    "/devices/{id}/callbacks-not-delivered": {
      "get": {
        "tags": ["Devices"],
        "summary": "Retrieve a list of undelivered callbacks",
        "description": "Retrieve a list of undelivered callbacks and errors for a given device, in reverse chronological order (most recent message first). SNR will be deprecated (see [Newsletter](https://backend.sigfox.com/welcome/news) for details). To monitor radio link quality, please use the [Link Quality Indicator (LQI)](https://support.sigfox.com/docs/link-quality:-general-knowledge) which is more relevant than SNR in Sigfox network.\n",
        "operationId": "getCallbackMessagesErrorListForDevice",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The Device identifier (hexadecimal format)",
            "required": true,
            "type": "string"
          },
          {
            "name": "since",
            "in": "query",
            "description": "Starting timestamp (in milliseconds since the Unix Epoch)",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "before",
            "in": "query",
            "description": "Ending timestamp (in milliseconds since the Unix Epoch)",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of items to return",
            "required": false,
            "type": "integer",
            "default": 100,
            "format": "int32"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "The number of items to skip",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": { "$ref": "#/definitions/deviceErrorMessages" }
                },
                "paging": { "$ref": "#/definitions/paging" }
              },
              "example": {
                "data": [
                  {
                    "deviceId": "123D5",
                    "deviceTypeId": "5964a10570c85b51ccbaf497",
                    "time": 1487065942000,
                    "data": "DEADBEEF",
                    "snr": 27.4,
                    "status": "202",
                    "messages": "OK",
                    "callback": {
                      "subject": "email title",
                      "message": "email body"
                    },
                    "parameters": { "key1": "value1", "key2": "value2" }
                  },
                  {
                    "deviceId": "2",
                    "deviceTypeId": "5964a10570c85b51ccbaf497",
                    "time": 1487069845000,
                    "data": "1234ABCD",
                    "snr": 78.65,
                    "status": "500",
                    "messages": "Internal Server Error",
                    "callback": {
                      "url": "www.google.com",
                      "header": { "header1": "value1", "header2": "value2" },
                      "body": { "value1": "ok", "value2": true, "value3": 123 },
                      "contentType": "application/json",
                      "method": "POST",
                      "error": "JSON body could not be evaluated"
                    },
                    "parameters": { "key3": 123, "key4": false }
                  }
                ],
                "paging": { "next": "http://next-url-to-request" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": { "$ref": "#/definitions/ErrorContent" }
          },
          "401": {
            "description": "Unauthorized. Authentication (ID/password) error."
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "You are not allowed to access the resource."
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "The requested resource was not found."
                }
              }
            }
          },
          "500": { "description": "Internal Server Error" }
        }
      },
      "parameters": []
    },
    "/devices/{id}/certificate/modem": {
      "get": {
        "tags": ["Devices"],
        "summary": "Retrieve the modem certificate associated with a device",
        "description": "Retrieve the modem certificate associated with a device.\n",
        "operationId": "getModemCertificateInfo",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The Device identifier (hexadecimal format)",
            "required": true,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Defines the other available fields to be returned in the response.\n",
            "required": false,
            "type": "string",
            "enum": ["manufacturer(name)"]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": { "$ref": "#/definitions/modemCertificate" }
          },
          "400": {
            "description": "Bad Request",
            "schema": { "$ref": "#/definitions/ErrorContent" }
          },
          "401": {
            "description": "Unauthorized. Authentication (ID/password) error."
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "You are not allowed to access the resource."
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "The requested resource was not found."
                }
              }
            }
          },
          "500": { "description": "Internal Server Error" }
        }
      },
      "parameters": []
    },
    "/devices/{id}/certificate/product": {
      "get": {
        "tags": ["Devices"],
        "summary": "Retrieve the product certificate associated with a device",
        "description": "Retrieve the product certificate associated with a device already registered.\n",
        "operationId": "getProductCertificateInfo",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The Device identifier (hexadecimal format)",
            "required": true,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Defines the other available fields to be returned in the response.\n",
            "required": false,
            "type": "string",
            "enum": ["manufacturer(name)"]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": { "$ref": "#/definitions/productCertificate" }
          },
          "400": {
            "description": "Bad Request",
            "schema": { "$ref": "#/definitions/ErrorContent" }
          },
          "401": {
            "description": "Unauthorized. Authentication (ID/password) error."
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "You are not allowed to access the resource."
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "The requested resource was not found."
                }
              }
            }
          },
          "500": { "description": "Internal Server Error" }
        }
      },
      "parameters": []
    },
    "/devices/{id}/product-certificate": {
      "get": {
        "tags": ["Devices"],
        "summary": "Retrieve the product certificate associated with a device ID and PAC",
        "description": "Retrieve the product certificate associated with a given device ID and PAC, when the device has not already been created on the portal, only in CRA\n",
        "operationId": "getProductCertificateInfoWithPac",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The Device identifier (hexadecimal format)",
            "required": true,
            "type": "string"
          },
          {
            "name": "pac",
            "in": "query",
            "description": "The device's PAC (hexadecimal format)",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": {
              "$ref": "#/definitions/productCertificateWithPacResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": { "$ref": "#/definitions/ErrorContent" }
          },
          "401": {
            "description": "Unauthorized. Authentication (ID/password) error."
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "You are not allowed to access the resource."
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "The requested resource was not found."
                }
              }
            }
          },
          "500": { "description": "Internal Server Error" }
        }
      },
      "parameters": []
    },
    "/devices/{id}/consumption/{year}": {
      "get": {
        "tags": ["Devices"],
        "summary": "Retrieve a device's consumption for a year",
        "description": "Retrieve a device's consumption for a given year.\n",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The Device identifier (hexadecimal format)",
            "required": true,
            "type": "string"
          },
          {
            "name": "year",
            "in": "path",
            "description": "The year of consumption",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": { "$ref": "#/definitions/deviceConsumption" }
          },
          "400": {
            "description": "Bad Request",
            "schema": { "$ref": "#/definitions/ErrorContent" }
          },
          "401": {
            "description": "Unauthorized. Authentication (ID/password) error."
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "You are not allowed to access the resource."
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "The requested resource was not found."
                }
              }
            }
          },
          "500": { "description": "Internal Server Error" }
        }
      },
      "parameters": []
    },
    "/devices/{id}/consumption/{year}/{month}": {
      "get": {
        "tags": ["Devices"],
        "summary": "Get a Device's consumption for a given month",
        "description": "Retrieve a device's consumption for a given month during a given year.\n",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The Device identifier (hexadecimal format)",
            "required": true,
            "type": "string"
          },
          {
            "name": "year",
            "in": "path",
            "description": "The year of consumption",
            "required": true,
            "type": "integer"
          },
          {
            "name": "month",
            "in": "path",
            "description": "The month of consumption",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": { "$ref": "#/definitions/deviceConsumption" }
          },
          "400": {
            "description": "Bad Request",
            "schema": { "$ref": "#/definitions/ErrorContent" }
          },
          "401": {
            "description": "Unauthorized. Authentication (ID/password) error."
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "You are not allowed to access the resource."
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "The requested resource was not found."
                }
              }
            }
          },
          "500": { "description": "Internal Server Error" }
        }
      },
      "parameters": []
    },
    "/devices/{id}/disengage": {
      "post": {
        "tags": ["Devices"],
        "summary": "Disengage sequence number check for the next message",
        "description": "Disable sequence number check for the next message.\n",
        "operationId": "deviceSeqNumberDisengage",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The Device identifier (hexadecimal format)",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": { "description": "No content" },
          "400": {
            "description": "Bad Request",
            "schema": { "$ref": "#/definitions/ErrorContent" }
          },
          "401": {
            "description": "Unauthorized. Authentication (ID/password) error."
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "You are not allowed to access the resource."
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "The requested resource was not found."
                }
              }
            }
          },
          "500": { "description": "Internal Server Error" }
        }
      },
      "parameters": []
    },
    "/devices/{id}/messages": {
      "get": {
        "tags": ["Devices"],
        "summary": "Retrieve a list of messages",
        "description": "Retrieve a list of messages for a given device according to request filters. SNR will be deprecated (see [Newsletter](https://backend.sigfox.com/welcome/news) for details). To monitor radio link quality, please use the [Link Quality Indicator (LQI)](https://support.sigfox.com/docs/link-quality:-general-knowledge) which is more relevant than SNR in Sigfox network.\n",
        "operationId": "getDeviceMessagesListForDevice",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The Device identifier (hexadecimal format)",
            "required": true,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Defines the other available fields to be returned in the response.\n",
            "required": false,
            "type": "string",
            "enum": [
              "oob",
              "ackRequired",
              "device(name)",
              "rinfos(cbStatus,rep,repetitions,baseStation(name))",
              "downlinkAnswerStatus(baseStation(name))"
            ]
          },
          {
            "name": "since",
            "in": "query",
            "description": "Starting timestamp (in milliseconds since the Unix Epoch)",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "before",
            "in": "query",
            "description": "Ending timestamp (in milliseconds since the Unix Epoch)",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of items to return",
            "required": false,
            "type": "integer",
            "default": 100,
            "format": "int32"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "The number of items to skip",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": { "$ref": "#/definitions/deviceMessage" }
                },
                "paging": { "$ref": "#/definitions/paging" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": { "$ref": "#/definitions/ErrorContent" }
          },
          "401": {
            "description": "Unauthorized. Authentication (ID/password) error."
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "You are not allowed to access the resource."
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "The requested resource was not found."
                }
              }
            }
          },
          "412": { "description": "Precondition Failed" },
          "500": { "description": "Internal Server Error" }
        }
      },
      "parameters": []
    },
    "/devices/{id}/messages/metric": {
      "get": {
        "tags": ["Devices"],
        "summary": "Retreive the number of messages",
        "description": "Return the number of messages for a given device, for the last day, last week and last month.\n",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The Device identifier (hexadecimal format)",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": {
              "type": "object",
              "properties": {
                "lastDay": {
                  "type": "integer",
                  "format": "int32",
                  "description": "Number of device messages for the last day"
                },
                "lastWeek": {
                  "type": "integer",
                  "format": "int32",
                  "description": "Number of device messages for the last week"
                },
                "lastMonth": {
                  "type": "integer",
                  "format": "int32",
                  "description": "Number of device messages for the last month"
                }
              },
              "example": { "lastDay": 387, "lastWeek": 763, "lastMonth": 3268 }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": { "$ref": "#/definitions/ErrorContent" }
          },
          "401": {
            "description": "Unauthorized. Authentication (ID/password) error."
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "You are not allowed to access the resource."
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "The requested resource was not found."
                }
              }
            }
          },
          "500": { "description": "Internal Server Error" }
        }
      },
      "parameters": []
    },
    "/devices/{id}/locations": {
      "get": {
        "tags": ["Devices"],
        "summary": "Retrieve the locations of a device",
        "description": "Retrieve a list of location data of a device according to request filters.\n",
        "operationId": "getDeviceLocationsList",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The Device identifier (hexadecimal format)",
            "required": true,
            "type": "string"
          },
          {
            "name": "oob",
            "in": "query",
            "description": "if true, the method return also the location from out of band Messages",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "since",
            "in": "query",
            "description": "Starting timestamp (in milliseconds since the Unix Epoch)",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "before",
            "in": "query",
            "description": "Ending timestamp (in milliseconds since the Unix Epoch)",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of items to return",
            "required": false,
            "type": "integer",
            "default": 100,
            "format": "int32"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "The number of items to skip",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": { "$ref": "#/definitions/deviceLocation_2" }
                },
                "paging": { "$ref": "#/definitions/paging" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": { "$ref": "#/definitions/ErrorContent" }
          },
          "401": {
            "description": "Unauthorized. Authentication (ID/password) error."
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "You are not allowed to access the resource."
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "The requested resource was not found."
                }
              }
            }
          },
          "500": { "description": "Internal Server Error" }
        }
      },
      "parameters": []
    },
    "/devices/{id}/unsubscribe": {
      "put": {
        "tags": ["Devices"],
        "summary": "Unsubscribe a device",
        "description": "Set an unsubscription date for the device's token.\n",
        "operationId": "Unsubscribe",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The Device identifier (hexadecimal format)",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "unsubscriptionTime",
            "description": "the unsubscription time (in milliseconds since the Unix Epoch)",
            "required": true,
            "schema": { "$ref": "#/definitions/tokenUnsubscribe" }
          }
        ],
        "responses": {
          "204": { "description": "No content" },
          "400": {
            "description": "Bad Request",
            "schema": { "$ref": "#/definitions/ErrorContent" }
          },
          "401": {
            "description": "Unauthorized. Authentication (ID/password) error."
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "You are not allowed to access the resource."
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "The requested resource was not found."
                }
              }
            }
          },
          "500": { "description": "Internal Server Error" }
        }
      },
      "parameters": []
    },
    "/devices/bulk": {
      "post": {
        "tags": ["Devices"],
        "summary": "Create multiple devices",
        "description": "Create multiple new devices with asynchronous job\n",
        "operationId": "createBulkDevice",
        "parameters": [
          {
            "in": "body",
            "name": "devices",
            "description": "The devices to create",
            "required": true,
            "schema": { "$ref": "#/definitions/asynchronousDeviceCreationJob" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": {
              "type": "object",
              "properties": {
                "total": {
                  "type": "integer",
                  "format": "int32",
                  "description": "Number of device to create"
                },
                "jobId": {
                  "type": "string",
                  "description": "jobId (to use in job status request)"
                }
              },
              "example": { "total": 100, "jobId": "5a5896f93007ab520cb54108" }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": { "$ref": "#/definitions/ErrorContent" }
          },
          "401": {
            "description": "Unauthorized. Authentication (ID/password) error."
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "You are not allowed to access the resource."
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "A conflict happened with the current state of the resource."
                }
              }
            }
          },
          "500": { "description": "Internal Server Error" }
        }
      },
      "put": {
        "tags": ["Devices"],
        "summary": "Update multiple devices",
        "description": "Update or edit multiple devices with asynchronous job.\n",
        "operationId": "deviceBulkEditAsync",
        "parameters": [
          {
            "in": "body",
            "name": "devices",
            "description": "The devices to edit",
            "required": true,
            "schema": { "$ref": "#/definitions/asynchronousDeviceEditionJob" }
          },
          {
            "name": "groupId",
            "in": "query",
            "description": "Group Identifier use to create the devices",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Job started",
            "schema": {
              "type": "object",
              "properties": {
                "total": {
                  "type": "integer",
                  "format": "int32",
                  "description": "Number of devices to edit"
                },
                "jobId": {
                  "type": "string",
                  "description": "jobId (to use in job status request)"
                }
              },
              "example": { "total": 100, "jobId": "5a5896f93007ab520cb54108" }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": { "$ref": "#/definitions/ErrorContent" }
          },
          "401": {
            "description": "Unauthorized. Authentication (ID/password) error."
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "You are not allowed to access the resource."
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "A conflict happened with the current state of the resource."
                }
              }
            }
          },
          "500": { "description": "Internal Server Error" }
        }
      },
      "parameters": []
    },
    "/devices/bulk/{jobId}": {
      "get": {
        "tags": ["Devices"],
        "summary": "Retrieve the status of a job",
        "description": "Retrieve the status of an asynchronous job for devices.\n",
        "operationId": "getBulkJobForDevice",
        "parameters": [
          {
            "name": "jobId",
            "in": "path",
            "description": "The job identifier (hexadecimal format)",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": { "$ref": "#/definitions/registrationJobStatus" }
          },
          "400": {
            "description": "Bad Request",
            "schema": { "$ref": "#/definitions/ErrorContent" }
          },
          "401": {
            "description": "Unauthorized. Authentication (ID/password) error."
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "You are not allowed to access the resource."
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "The requested resource was not found."
                }
              }
            }
          },
          "500": { "description": "Internal Server Error" }
        }
      },
      "parameters": []
    },
    "/devices/bulk/transfer": {
      "post": {
        "tags": ["Devices"],
        "summary": "Transfer multiple devices to another device type",
        "description": "Transfer multiple devices to another device type with asynchronous job\n",
        "operationId": "deviceBulkTransfer",
        "parameters": [
          {
            "in": "body",
            "name": "devices",
            "description": "The devices to move",
            "required": true,
            "schema": { "$ref": "#/definitions/asynchronousDeviceTransferJob" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": {
              "type": "object",
              "properties": {
                "total": {
                  "type": "integer",
                  "format": "int32",
                  "description": "Number of devices to transfer"
                },
                "jobId": {
                  "type": "string",
                  "description": "jobId (to use in job status request)"
                }
              },
              "example": { "jobId": "5a5896f93007ab520cb54108", "total": 50 }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": { "$ref": "#/definitions/ErrorContent" }
          },
          "401": {
            "description": "Unauthorized. Authentication (ID/password) error."
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "You are not allowed to access the resource."
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "A conflict happened with the current state of the resource."
                }
              }
            }
          },
          "500": { "description": "Internal Server Error" }
        }
      },
      "parameters": []
    },
    "/devices/bulk/replace": {
      "post": {
        "tags": ["Devices"],
        "summary": "Replace multiple devices",
        "description": "Replace multiple devices (moving tokens from one device to another) with synchronous job\n",
        "operationId": "devicesBulkReplace",
        "parameters": [
          {
            "in": "body",
            "name": "devicePairs",
            "description": "Pairs of source and target devices",
            "required": false,
            "schema": {
              "$ref": "#/definitions/asynchronousDeviceReplacementJob"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": { "$ref": "#/definitions/replaceResponse" }
          },
          "400": {
            "description": "Bad Request",
            "schema": { "$ref": "#/definitions/ErrorContent" }
          },
          "401": {
            "description": "Unauthorized. Authentication (ID/password) error."
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "You are not allowed to access the resource."
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "The requested resource was not found."
                }
              }
            }
          },
          "500": { "description": "Internal Server Error" }
        }
      },
      "parameters": []
    },
    "/devices/bulk/restart": {
      "post": {
        "tags": ["Devices"],
        "summary": "Restart multiple devices",
        "description": "Restart multiple devices with asynchronous job.\n",
        "operationId": "devicesBulkRestart",
        "parameters": [
          {
            "in": "body",
            "name": "devices",
            "description": "list of device's identifier (hexadecimal format)",
            "required": true,
            "schema": { "$ref": "#/definitions/deviceActionJob" }
          },
          {
            "name": "groupId",
            "in": "query",
            "description": "Group Identifier use to restart multiple devices",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Job started",
            "schema": {
              "type": "object",
              "properties": {
                "jobId": {
                  "type": "string",
                  "description": "jobId (to use in job status request)"
                }
              },
              "example": { "jobId": "5a5896f93007ab520cb54108" }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": { "$ref": "#/definitions/ErrorContent" }
          },
          "401": {
            "description": "Unauthorized. Authentication (ID/password) error."
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "You are not allowed to access the resource."
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "The requested resource was not found."
                }
              }
            }
          },
          "500": { "description": "Internal Server Error" }
        }
      },
      "parameters": []
    },
    "/devices/bulk/restart/{jobId}": {
      "get": {
        "tags": ["Devices"],
        "summary": "Retrieve the async job status for a restart action.",
        "description": "Retrieve the async job status for a restart devices action.\n",
        "operationId": "getBulkRestartJob",
        "parameters": [
          {
            "name": "jobId",
            "in": "path",
            "description": "The job identifier (hexadecimal format)",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": { "$ref": "#/definitions/actionJob" }
          },
          "400": {
            "description": "Bad Request",
            "schema": { "$ref": "#/definitions/ErrorContent" }
          },
          "401": {
            "description": "Unauthorized. Authentication (ID/password) error."
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "You are not allowed to access the resource."
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "The requested resource was not found."
                }
              }
            }
          },
          "500": { "description": "Internal Server Error" }
        }
      },
      "parameters": []
    },
    "/devices/bulk/suspend": {
      "post": {
        "tags": ["Devices"],
        "summary": "Suspend multiple devices",
        "description": "Suspend multiple devices with asynchronous job\n",
        "operationId": "devicesBulkSuspend",
        "parameters": [
          {
            "in": "body",
            "name": "devices",
            "description": "list of device's identifier (hexadecimal format)",
            "required": true,
            "schema": { "$ref": "#/definitions/deviceActionJob" }
          },
          {
            "name": "groupId",
            "in": "query",
            "description": "Group Identifier use to suspend multiple devices",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Job started",
            "schema": {
              "type": "object",
              "properties": {
                "jobId": {
                  "type": "string",
                  "description": "jobId (to use in job status request)"
                }
              },
              "example": { "jobId": "5a5896f93007ab520cb54108" }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": { "$ref": "#/definitions/ErrorContent" }
          },
          "401": {
            "description": "Unauthorized. Authentication (ID/password) error."
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "You are not allowed to access the resource."
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "The requested resource was not found."
                }
              }
            }
          },
          "500": { "description": "Internal Server Error" }
        }
      },
      "parameters": []
    },
    "/devices/bulk/suspend/{jobId}": {
      "get": {
        "tags": ["Devices"],
        "summary": "Retrieve the status of a suspend job",
        "description": "Retrieve the async job status for a suspend devices action.\n",
        "operationId": "getBulkSuspendJob",
        "parameters": [
          {
            "name": "jobId",
            "in": "path",
            "description": "The job identifier (hexadecimal format)",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": { "$ref": "#/definitions/actionJob" }
          },
          "400": {
            "description": "Bad Request",
            "schema": { "$ref": "#/definitions/ErrorContent" }
          },
          "401": {
            "description": "Unauthorized. Authentication (ID/password) error."
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "You are not allowed to access the resource."
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "The requested resource was not found."
                }
              }
            }
          },
          "500": { "description": "Internal Server Error" }
        }
      },
      "parameters": []
    },
    "/devices/bulk/resume": {
      "post": {
        "tags": ["Devices"],
        "summary": "Resume multiple devices",
        "description": "Resume multiple devices with asynchronous job.\n",
        "operationId": "devicesBulkResume",
        "parameters": [
          {
            "in": "body",
            "name": "devices",
            "description": "list of device's identifier (hexadecimal format)",
            "required": true,
            "schema": { "$ref": "#/definitions/deviceActionJob" }
          },
          {
            "name": "groupId",
            "in": "query",
            "description": "Group Identifier use to resume multiple devices",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Job started",
            "schema": {
              "type": "object",
              "properties": {
                "jobId": {
                  "type": "string",
                  "description": "jobId (to use in job status request)"
                }
              },
              "example": { "jobId": "5a5896f93007ab520cb54108" }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": { "$ref": "#/definitions/ErrorContent" }
          },
          "401": {
            "description": "Unauthorized. Authentication (ID/password) error."
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "You are not allowed to access the resource."
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "The requested resource was not found."
                }
              }
            }
          },
          "500": { "description": "Internal Server Error" }
        }
      },
      "parameters": []
    },
    "/devices/bulk/resume/{jobId}": {
      "get": {
        "tags": ["Devices"],
        "summary": "Retrieve the status of a resume job",
        "description": "Retrieve the async job status for a resume devices action.\n",
        "operationId": "getBulkResumeJob",
        "parameters": [
          {
            "name": "jobId",
            "in": "path",
            "description": "The job identifier (hexadecimal format)",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": { "$ref": "#/definitions/actionJob" }
          },
          "400": {
            "description": "Bad Request",
            "schema": { "$ref": "#/definitions/ErrorContent" }
          },
          "401": {
            "description": "Unauthorized. Authentication (ID/password) error."
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "You are not allowed to access the resource."
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "The requested resource was not found."
                }
              }
            }
          },
          "500": { "description": "Internal Server Error" }
        }
      },
      "parameters": []
    },
    "/devices/bulk/unsubscribe": {
      "post": {
        "tags": ["Devices"],
        "summary": "Unsubscribe multiple devices",
        "description": "Unsubscribe multiple devices with asynchronous job.\n",
        "operationId": "deviceBulkUnsubscribe",
        "parameters": [
          {
            "in": "body",
            "name": "devices",
            "description": "array of device's identifier (hexadecimal format) with unsubscribtion time",
            "required": true,
            "schema": { "$ref": "#/definitions/bulkUnsubscribe" }
          },
          {
            "name": "groupId",
            "in": "query",
            "description": "Group Identifier use to unsubscribe multiple devices",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Job started",
            "schema": {
              "type": "object",
              "properties": {
                "jobId": {
                  "type": "string",
                  "description": "jobId (to use in job status request)"
                }
              },
              "example": { "jobId": "5a5896f93007ab520cb54108" }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": { "$ref": "#/definitions/ErrorContent" }
          },
          "401": {
            "description": "Unauthorized. Authentication (ID/password) error."
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "You are not allowed to access the resource."
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "The requested resource was not found."
                }
              }
            }
          },
          "500": { "description": "Internal Server Error" }
        }
      },
      "parameters": []
    },
    "/devices/bulk/unsubscribe/{jobId}": {
      "get": {
        "tags": ["Devices"],
        "summary": "Retrieve the async job status for an unsubscribe action.",
        "description": "Retrieve the async job status for an unsubscribe devices action.\n",
        "operationId": "getDeviceUnsubscribeJob",
        "parameters": [
          {
            "name": "jobId",
            "in": "path",
            "description": "The job identifier (hexadecimal format)",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": { "$ref": "#/definitions/actionJob" }
          },
          "400": {
            "description": "Bad Request",
            "schema": { "$ref": "#/definitions/ErrorContent" }
          },
          "401": {
            "description": "Unauthorized. Authentication (ID/password) error."
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "You are not allowed to access the resource."
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "The requested resource was not found."
                }
              }
            }
          },
          "500": { "description": "Internal Server Error" }
        }
      },
      "parameters": []
    },
    "/device-types/": {
      "get": {
        "tags": ["DeviceTypes"],
        "summary": "Retrieve a list of device types",
        "description": "Retrieve a list of device types according to visibility permissions and request filters.\n",
        "operationId": "listDeviceTypes",
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "description": "Search returns all Device Type names containing the value. Example: ?name=sig\n",
            "required": false,
            "type": "string"
          },
          {
            "name": "groupIds",
            "in": "query",
            "description": "Search for device types which are attached to a Group. Example: ?groupIds=57309674171c857460043087,57309674171c857460043088\n",
            "required": false,
            "type": "array",
            "items": { "type": "string" },
            "collectionFormat": "csv"
          },
          {
            "name": "deep",
            "in": "query",
            "description": "If a group identifier is specified, also includes its subgroups.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "contractId",
            "in": "query",
            "description": "Searches for device types which are attached to the given contract.",
            "required": false,
            "type": "string"
          },
          {
            "name": "payloadType",
            "in": "query",
            "description": "Searches device types by payload type\n  - 2 -> Regular (raw payload)\n  - 3 -> Custom grammar\n  - 4 -> Geolocation\n  - 5 -> Display in ASCII\n  - 6 -> Radio planning frame\n  - 9 -> Sensitv2\n",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "authorizations",
            "in": "query",
            "description": "if true, we return the list of actions and resources the user has access",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "sort",
            "in": "query",
            "description": "The field on which the list will be sorted. (field to sort ascending or -field to sort descending).",
            "required": false,
            "type": "string",
            "default": "id",
            "enum": ["id", "-id", "name", "-name"]
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Defines the other available API user's fields to be returned in the response.\n",
            "required": false,
            "type": "string",
            "enum": [
              "group(name,type,level)",
              "contract(name)",
              "geolocPayloadConfig(name)"
            ]
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Defines the maximum number of items to return",
            "required": false,
            "type": "integer",
            "default": 100,
            "format": "int32"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Defines the number of items to skip",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int32"
          },
          {
            "name": "pageId",
            "in": "query",
            "description": "Token representing the page to retrieve",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": { "$ref": "#/definitions/deviceType" }
                },
                "actions": { "$ref": "#/definitions/actions" },
                "paging": { "$ref": "#/definitions/paging" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": { "$ref": "#/definitions/ErrorContent" }
          },
          "401": {
            "description": "Unauthorized. Authentication (ID/password) error."
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "You are not allowed to access the resource."
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "The requested resource was not found."
                }
              }
            }
          },
          "500": { "description": "Internal Server Error" }
        }
      },
      "post": {
        "tags": ["DeviceTypes"],
        "summary": "Create a device type",
        "description": "Create a new device type\n",
        "operationId": "createDeviceType",
        "parameters": [
          {
            "in": "body",
            "name": "deviceType",
            "description": "The device type to create",
            "required": true,
            "schema": { "$ref": "#/definitions/deviceTypeCreate" }
          }
        ],
        "responses": {
          "201": {
            "description": "Successful response",
            "headers": {
              "Location": {
                "type": "string",
                "description": "The new created device type's location"
              }
            },
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "The new created device type's identifier"
                }
              },
              "example": { "id": "561e7e699336d297301de3iz" }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": { "$ref": "#/definitions/ErrorContent" }
          },
          "401": {
            "description": "Unauthorized. Authentication (ID/password) error."
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "You are not allowed to access the resource."
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "The requested resource was not found."
                }
              }
            }
          },
          "500": { "description": "Internal Server Error" }
        }
      },
      "parameters": []
    },
    "/device-types/{id}": {
      "get": {
        "tags": ["DeviceTypes"],
        "summary": "Retrieve information about a device type",
        "description": "Retrieve information about a device type.\n",
        "operationId": "getDeviceType",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The Device Type identifier (hexademical format)",
            "required": true,
            "type": "string"
          },
          {
            "name": "authorizations",
            "in": "query",
            "description": "if true, we return the list of actions and resources the user has access",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Defines the other available API user's fields to be returned in the response.\n",
            "required": false,
            "type": "string",
            "enum": [
              "group(name,type,level)",
              "contract(name)",
              "geolocPayloadConfig(name)"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": { "$ref": "#/definitions/deviceType" }
          },
          "400": {
            "description": "Bad Request",
            "schema": { "$ref": "#/definitions/ErrorContent" }
          },
          "401": {
            "description": "Unauthorized. Authentication (ID/password) error."
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "You are not allowed to access the resource."
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "The requested resource was not found."
                }
              }
            }
          },
          "500": { "description": "Internal Server Error" }
        }
      },
      "put": {
        "tags": ["DeviceTypes"],
        "summary": "Update a device type",
        "description": "Update a given device type.\n",
        "operationId": "updateDeviceType",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The Device Type identifier (hexademical format)",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "deviceType",
            "description": "The device type to update",
            "required": true,
            "schema": { "$ref": "#/definitions/deviceTypeUpdate" }
          }
        ],
        "responses": {
          "204": { "description": "No content" },
          "400": {
            "description": "Bad Request",
            "schema": { "$ref": "#/definitions/ErrorContent" }
          },
          "401": {
            "description": "Unauthorized. Authentication (ID/password) error."
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "You are not allowed to access the resource."
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "The requested resource was not found."
                }
              }
            }
          },
          "500": { "description": "Internal Server Error" }
        }
      },
      "delete": {
        "tags": ["DeviceTypes"],
        "summary": "Delete a device type",
        "description": "Delete a given device type.\n",
        "operationId": "deviceTypesDelete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The Device Type identifier (hexademical format)",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": { "description": "No content" },
          "400": {
            "description": "Bad Request",
            "schema": { "$ref": "#/definitions/ErrorContent" }
          },
          "401": {
            "description": "Unauthorized. Authentication (ID/password) error."
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "You are not allowed to access the resource."
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "The requested resource was not found."
                }
              }
            }
          },
          "500": { "description": "Internal Server Error" }
        }
      },
      "parameters": []
    },
    "/device-types/{id}/messages": {
      "get": {
        "tags": ["DeviceTypes"],
        "summary": "Retrieve a list of messages",
        "description": "Retrieve a list of messages for a given device types. SNR will be deprecated (see [Newsletter](https://backend.sigfox.com/welcome/news) for details). To monitor radio link quality, please use the [Link Quality Indicator (LQI)](https://support.sigfox.com/docs/link-quality:-general-knowledge) which is more relevant than SNR in Sigfox network.\n",
        "operationId": "getDeviceMessagesListForDeviceType",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The Device Type identifier",
            "required": true,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Defines the other available API user's fields to be returned in the response.\n",
            "required": false,
            "type": "string",
            "enum": [
              "oob",
              "ackRequired",
              "device(name)",
              "rinfos(cbStatus,rep,repetitions,baseStation(name))",
              "downlinkAnswerStatus(baseStation(name))"
            ]
          },
          {
            "name": "since",
            "in": "query",
            "description": "Starting timestamp (in milliseconds since Unix Epoch).",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "before",
            "in": "query",
            "description": "Ending timestamp (in milliseconds since Unix Epoch).",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "authorizations",
            "in": "query",
            "description": "if true, we return the list of actions and resources the user has access",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Defines the maximum number of items to return",
            "required": false,
            "type": "integer",
            "default": 100,
            "format": "int32"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Defines the number of items to skip",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": { "$ref": "#/definitions/deviceMessage" }
                },
                "paging": { "$ref": "#/definitions/paging" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": { "$ref": "#/definitions/ErrorContent" }
          },
          "401": {
            "description": "Unauthorized. Authentication (ID/password) error."
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "You are not allowed to access the resource."
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "The requested resource was not found."
                }
              }
            }
          },
          "500": { "description": "Internal Server Error" }
        }
      },
      "parameters": []
    },
    "/device-types/{id}/callbacks-not-delivered": {
      "get": {
        "tags": ["DeviceTypes"],
        "summary": "Retrieve a list of callback errors",
        "description": "Retrieve a list of undelivered callback messages for a given device types. SNR will be deprecated (see [Newsletter](https://backend.sigfox.com/welcome/news) for details). To monitor radio link quality, please use the [Link Quality Indicator (LQI)](https://support.sigfox.com/docs/link-quality:-general-knowledge) which is more relevant than SNR in Sigfox network.\n",
        "operationId": "getCallbackMessagesErrorListForDeviceType",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The Device Type identifier",
            "required": true,
            "type": "string"
          },
          {
            "name": "since",
            "in": "query",
            "description": "Starting timestamp (in milliseconds since Unix Epoch).",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "before",
            "in": "query",
            "description": "Ending timestamp (in milliseconds since Unix Epoch).",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Defines the maximum number of items to return",
            "required": false,
            "type": "integer",
            "default": 100,
            "format": "int32"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Defines the number of items to skip",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": { "$ref": "#/definitions/errorMessages" }
                },
                "paging": { "$ref": "#/definitions/paging" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": { "$ref": "#/definitions/ErrorContent" }
          },
          "401": {
            "description": "Unauthorized. Authentication (ID/password) error."
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "You are not allowed to access the resource."
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "The requested resource was not found."
                }
              }
            }
          },
          "500": { "description": "Internal Server Error" }
        }
      },
      "parameters": []
    },
    "/device-types/{id}/callbacks": {
      "get": {
        "tags": ["DeviceTypes"],
        "summary": "Retrieve a list of callbacks",
        "description": "Retrieve a list of callbacks for a given device type according to visibility permissions and request filters.\n",
        "operationId": "listCallbacks",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The Device Type identifier from which callbacks will be retrieve",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": { "$ref": "#/definitions/callback" }
                }
              },
              "example": {
                "data": [
                  {
                    "id": "5730510c7f071f9afd2bb2b7",
                    "channel": "URL",
                    "callbackType": 0,
                    "payloadConfig": "int1::uint:8 int2::uint:8",
                    "callbackSubtype": 2,
                    "enabled": true,
                    "dead": false,
                    "downlinkHook": false,
                    "url": "http://myserver.com/sigfox/callback",
                    "contentType": "application/x-www-form-urlencoded",
                    "httpMethod": "POST",
                    "sendSni": false,
                    "headers": { "key1": "value1", "key2": "value2" }
                  },
                  {
                    "id": "5a547b37d20419040546f3cf",
                    "channel": "BATCH_URL",
                    "callbackType": 0,
                    "payloadConfig": "int1::uint:8 int2::uint:8",
                    "callbackSubtype": 2,
                    "enabled": true,
                    "dead": false,
                    "url": "http://myserver.com/sigfox/batchcallback",
                    "contentType": "application/x-www-form-urlencoded",
                    "httpMethod": "POST",
                    "downlinkHook": false,
                    "sendSni": false,
                    "linePattern": "{device};{time};{data}"
                  },
                  {
                    "id": "5730510c7f071f9afd2bb2b8",
                    "channel": "EMAIL",
                    "callbackType": 0,
                    "enabled": true,
                    "dead": false,
                    "recipient": "your@email.com",
                    "subject": "Your subject",
                    "message": "Your message: {time} {data}"
                  },
                  {
                    "id": "568bee769336cf9a324a9a5e",
                    "channel": "URL",
                    "callbackType": 0,
                    "callbackSubtype": 3,
                    "enabled": true,
                    "dead": true,
                    "url": "http://host/path?id={device}&time={time}",
                    "contentType": "application/x-www-form-urlencoded",
                    "httpMethod": "GET",
                    "downlinkHook": true
                  }
                ]
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": { "$ref": "#/definitions/ErrorContent" }
          },
          "401": {
            "description": "Unauthorized. Authentication (ID/password) error."
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "You are not allowed to access the resource."
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "The requested resource was not found."
                }
              }
            }
          },
          "500": { "description": "Internal Server Error" }
        }
      },
      "post": {
        "tags": ["DeviceTypes"],
        "summary": "Create a callback",
        "description": "Create a new callback for a given device type. SNR will be deprecated (see [Newsletter](https://backend.sigfox.com/welcome/news) for details). To monitor radio link quality, please use the [Link Quality Indicator (LQI)](https://support.sigfox.com/docs/link-quality:-general-knowledge) which is more relevant than SNR in Sigfox network.\n",
        "operationId": "createCallback",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The Device Type identifier from which callbacks will be retrieve",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "callback",
            "required": true,
            "schema": { "$ref": "#/definitions/createCallback" }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "Location": {
                "type": "string",
                "description": "The URI of the new created callback"
              }
            },
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "The callback's identifier"
                }
              },
              "example": { "id": "5730510c7f071f9afd2bb2b7" }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": { "$ref": "#/definitions/ErrorContent" }
          },
          "401": {
            "description": "Unauthorized. Authentication (ID/password) error."
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "You are not allowed to access the resource."
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "The requested resource was not found."
                }
              }
            }
          },
          "500": { "description": "Internal Server Error" }
        }
      },
      "parameters": []
    },
    "/device-types/{id}/callbacks/{callbackId}": {
      "put": {
        "tags": ["DeviceTypes"],
        "summary": "Update a callback",
        "description": "Update a callback for a given device type SNR will be deprecated (see [Newsletter](https://backend.sigfox.com/welcome/news) for details). To monitor radio link quality, please use the [Link Quality Indicator (LQI)](https://support.sigfox.com/docs/link-quality:-general-knowledge) which is more relevant than SNR in Sigfox network.\n",
        "operationId": "updateCallback",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The Device Type identifier from which callbacks will be retrieve",
            "required": true,
            "type": "string"
          },
          {
            "name": "callbackId",
            "in": "path",
            "description": "The Callback identifier",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "callback",
            "description": "The callback to update",
            "required": true,
            "schema": { "$ref": "#/definitions/updateCallback" }
          }
        ],
        "responses": {
          "204": { "description": "No content" },
          "400": {
            "description": "Bad Request",
            "schema": { "$ref": "#/definitions/ErrorContent" }
          },
          "401": {
            "description": "Unauthorized. Authentication (ID/password) error."
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "You are not allowed to access the resource."
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "The requested resource was not found."
                }
              }
            }
          },
          "500": { "description": "Internal Server Error" }
        }
      },
      "delete": {
        "tags": ["DeviceTypes"],
        "summary": "Delete a callback",
        "description": "Delete a callback for a given device type.\n",
        "operationId": "deleteCallback",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The Device Type identifier from which callbacks will be retrieve",
            "required": true,
            "type": "string"
          },
          {
            "name": "callbackId",
            "in": "path",
            "description": "The Callback identifier",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": { "description": "No content" },
          "400": {
            "description": "Bad Request",
            "schema": { "$ref": "#/definitions/ErrorContent" }
          },
          "401": {
            "description": "Unauthorized. Authentication (ID/password) error."
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "You are not allowed to access the resource."
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "The requested resource was not found."
                }
              }
            }
          },
          "500": { "description": "Internal Server Error" }
        }
      },
      "parameters": []
    },
    "/device-types/{id}/callbacks/{callbackId}/enable": {
      "put": {
        "tags": ["DeviceTypes"],
        "summary": "Enable or disable a callback",
        "description": "Enable or disable a callback for a given device type.\n",
        "operationId": "enableCallback",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The Device Type identifier from which callbacks will be retrieve",
            "required": true,
            "type": "string"
          },
          {
            "name": "callbackId",
            "in": "path",
            "description": "The Callback identifier",
            "required": true,
            "type": "string"
          },
          {
            "name": "enabled",
            "in": "query",
            "description": "True to enable the callback, false to disable it",
            "required": true,
            "type": "boolean"
          }
        ],
        "responses": {
          "204": { "description": "No content" },
          "400": {
            "description": "Bad Request",
            "schema": { "$ref": "#/definitions/ErrorContent" }
          },
          "401": {
            "description": "Unauthorized. Authentication (ID/password) error."
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "You are not allowed to access the resource."
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "The requested resource was not found."
                }
              }
            }
          },
          "500": { "description": "Internal Server Error" }
        }
      },
      "parameters": []
    },
    "/device-types/{id}/callbacks/{callbackId}/downlink": {
      "put": {
        "tags": ["DeviceTypes"],
        "summary": "Selects a downlink callback",
        "description": "Selects a downlink callback for a device type. The callback will be selected as the downlink one, the one that was previously selected will no longer be used for downlink.\n",
        "operationId": "enableDownlinkCallback",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The Device Type identifier from which callbacks will be retrieve",
            "required": true,
            "type": "string"
          },
          {
            "name": "callbackId",
            "in": "path",
            "description": "The Callback identifier",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": { "description": "No content" },
          "400": {
            "description": "Bad Request",
            "schema": { "$ref": "#/definitions/ErrorContent" }
          },
          "401": {
            "description": "Unauthorized. Authentication (ID/password) error."
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "You are not allowed to access the resource."
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "The requested resource was not found."
                }
              }
            }
          },
          "500": { "description": "Internal Server Error" }
        }
      },
      "parameters": []
    },
    "/device-types/{id}/callbacks/{callbackId}/callbacks-not-delivered": {
      "get": {
        "tags": ["DeviceTypes"],
        "summary": "last device message error for this callback",
        "description": "Retrieve the last device message error associated with this callback.",
        "operationId": "listLastCallbackError",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The Device Type identifier from which callbacks will be retrieve",
            "required": true,
            "type": "string"
          },
          {
            "name": "callbackId",
            "in": "path",
            "description": "The Callback identifier",
            "required": true,
            "type": "string"
          },
          {
            "name": "since",
            "in": "query",
            "description": "Starting timestamp (in milliseconds since Unix Epoch).",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "before",
            "in": "query",
            "description": "Ending timestamp (in milliseconds since Unix Epoch).",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Defines the maximum number of items to return",
            "required": false,
            "type": "integer",
            "default": 100,
            "format": "int32"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Defines the number of items to skip",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": { "$ref": "#/definitions/errorMessages" }
          },
          "400": {
            "description": "Bad Request",
            "schema": { "$ref": "#/definitions/ErrorContent" }
          },
          "401": {
            "description": "Unauthorized. Authentication (ID/password) error."
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "You are not allowed to access the resource."
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "The requested resource was not found."
                }
              }
            }
          },
          "500": { "description": "Internal Server Error" }
        }
      },
      "parameters": []
    },
    "/device-types/{id}/disengage": {
      "put": {
        "tags": ["DeviceTypes"],
        "summary": "Disengage sequence number check for the next message",
        "description": "Disable the sequence number check for the next message of each device of a device type.\n",
        "operationId": "deviceTypesSeqNumberDisengage",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The Device Type identifier",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": { "description": "No content" },
          "400": {
            "description": "Bad Request",
            "schema": { "$ref": "#/definitions/ErrorContent" }
          },
          "401": {
            "description": "Unauthorized. Authentication (ID/password) error."
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "You are not allowed to access the resource."
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "The requested resource was not found."
                }
              }
            }
          },
          "500": { "description": "Internal Server Error" }
        }
      },
      "parameters": []
    },
    "/device-types/{id}/bulk/restart": {
      "post": {
        "tags": ["DeviceTypes"],
        "summary": "Restart the devices of a device type",
        "description": "Restart the devices of a device type with a asynchronous job.\n",
        "operationId": "deviceTypeBulkRestart",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The Device Type identifier",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Job started",
            "schema": {
              "type": "object",
              "properties": {
                "jobId": {
                  "type": "string",
                  "description": "jobId so that the customer is able to request job status"
                }
              },
              "example": { "jobId": "5730510c7f071f7olp2bb2b8" }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": { "$ref": "#/definitions/ErrorContent" }
          },
          "401": {
            "description": "Unauthorized. Authentication (ID/password) error."
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "You are not allowed to access the resource."
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "The requested resource was not found."
                }
              }
            }
          },
          "500": { "description": "Internal Server Error" }
        }
      },
      "parameters": []
    },
    "/device-types/bulk/restart/{jobId}": {
      "get": {
        "tags": ["DeviceTypes"],
        "summary": "Retrieve the device type async job status for restart action",
        "description": "Retrieve the async job status of a device type's asynchronous job for a restart devices action.\n",
        "operationId": "getDeviceTypeBulkRestartJob",
        "parameters": [
          {
            "name": "jobId",
            "in": "path",
            "description": "The job's identidier (hexademical format)",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": { "$ref": "#/definitions/actionJob" }
          },
          "400": {
            "description": "Bad Request",
            "schema": { "$ref": "#/definitions/ErrorContent" }
          },
          "401": {
            "description": "Unauthorized. Authentication (ID/password) error."
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "You are not allowed to access the resource."
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "The requested resource was not found."
                }
              }
            }
          },
          "500": { "description": "Internal Server Error" }
        }
      },
      "parameters": []
    },
    "/groups/": {
      "get": {
        "tags": ["Groups"],
        "summary": "Retrieve a list of groups according to visibility permissions and request filters.",
        "description": "Retrieve a list of groups according to visibility permissions and request filters. \n  If parentIds is provided, retrieve all direct sub-groups under the given parents. If parentIds is not provided, retrieve all direct sub-groups under the API user's group.\n  If deep is true, retrieve all sub-groups under either given parent groups or the API user group.\n",
        "operationId": "listGroups",
        "parameters": [
          {
            "name": "parentIds",
            "in": "query",
            "description": "The parent group's identifiers from which the children will be fetched",
            "required": false,
            "type": "array",
            "items": { "type": "string" },
            "collectionFormat": "csv"
          },
          {
            "name": "deep",
            "in": "query",
            "description": "Retrieve all sub-groups",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "name",
            "in": "query",
            "description": "Searches for groups containing the given text in their name",
            "required": false,
            "type": "string"
          },
          {
            "name": "types",
            "in": "query",
            "description": "Group's type\n- 0 -> SO\n- 2 -> Other\n- 5 -> SVNO\n- 6 -> Partners\n- 7 -> NIP\n- 8 -> DIST\n- 9 -> Channel\n- 10 -> Starter\n- 11 -> Partner\n",
            "required": false,
            "type": "array",
            "items": { "type": "integer", "format": "int32" },
            "collectionFormat": "csv"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Defines the other available fields to be returned in the response.\n",
            "required": false,
            "type": "string",
            "enum": ["path(name,type,level)"]
          },
          {
            "name": "action",
            "in": "query",
            "description": "Defines a resource:action pair the user has access on groups.\n",
            "required": false,
            "type": "string",
            "enum": [
              "base-stations:create",
              "contract-infos:create",
              "device-types:create",
              "devices:create",
              "hosts:create",
              "maintenances:create",
              "providers:create",
              "sites:create",
              "users:create"
            ]
          },
          {
            "name": "sort",
            "in": "query",
            "description": "The field on which the list will be sorted. (field to sort ascending or -field to sort descending)",
            "required": false,
            "type": "string",
            "default": "id",
            "enum": ["id", "-id", "name", "-name"]
          },
          {
            "name": "authorizations",
            "in": "query",
            "description": "if true, we return the list of actions and resources the user has access",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of items to return",
            "required": false,
            "type": "integer",
            "default": 100,
            "format": "int32"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "The number of items to skip",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int32"
          },
          {
            "name": "pageId",
            "in": "query",
            "description": "Token representing the page to retrieve",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "title": "Groups",
                  "items": { "$ref": "#/definitions/group" }
                },
                "paging": { "$ref": "#/definitions/paging" }
              },
              "title": "Response"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": { "$ref": "#/definitions/ErrorContent" }
          },
          "401": {
            "description": "Unauthorized. Authentication (ID/password) error."
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "You are not allowed to access the resource."
                }
              }
            }
          },
          "500": { "description": "Internal Server Error" }
        }
      },
      "post": {
        "tags": ["Groups"],
        "summary": "Create a group",
        "description": "Create a new group.\n",
        "operationId": "createGroup",
        "parameters": [
          {
            "in": "body",
            "name": "group",
            "required": true,
            "schema": { "$ref": "#/definitions/commonGroupCreate" }
          }
        ],
        "responses": {
          "201": {
            "description": "Successful response",
            "headers": {
              "Location": {
                "type": "string",
                "description": "The new created group location"
              }
            },
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "The new created group identifier"
                }
              },
              "title": "Response"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": { "$ref": "#/definitions/ErrorContent" }
          },
          "401": {
            "description": "Unauthorized. Authentication (ID/password) error."
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "You are not allowed to access the resource."
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "The requested resource was not found."
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "A conflict happened with the current state of the resource."
                }
              }
            }
          },
          "500": { "description": "Internal Server Error" }
        }
      },
      "parameters": []
    },
    "/groups/{id}": {
      "get": {
        "tags": ["Groups"],
        "summary": "Retrieve information about a group",
        "description": "Retrieve information about a given group.\n",
        "operationId": "getGroup",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The Group identifier",
            "required": true,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Defines the other available fields to be returned in the response.\n",
            "required": false,
            "type": "string",
            "enum": ["paths(name)"]
          },
          {
            "name": "authorizations",
            "in": "query",
            "description": "if true, we return the list of actions and resources the user has access",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": { "$ref": "#/definitions/group" }
          },
          "400": {
            "description": "Bad Request",
            "schema": { "$ref": "#/definitions/ErrorContent" }
          },
          "401": {
            "description": "Unauthorized. Authentication (ID/password) error."
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "You are not allowed to access the resource."
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "The requested resource was not found."
                }
              }
            }
          },
          "500": { "description": "Internal Server Error" }
        }
      },
      "put": {
        "tags": ["Groups"],
        "summary": "Update a group",
        "description": "Update a given group.\n",
        "operationId": "updateGroup",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The Group identifier",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "group",
            "description": "The group to update",
            "required": true,
            "schema": { "$ref": "#/definitions/commonGroupUpdate" }
          }
        ],
        "responses": {
          "204": { "description": "No content" },
          "400": {
            "description": "Bad Request",
            "schema": { "$ref": "#/definitions/ErrorContent" }
          },
          "401": {
            "description": "Unauthorized. Authentication (ID/password) error."
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "You are not allowed to access the resource."
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "The requested resource was not found."
                }
              }
            }
          },
          "500": { "description": "Internal Server Error" }
        }
      },
      "delete": {
        "tags": ["Groups"],
        "summary": "Delete a group",
        "description": "Delete a given group.\n",
        "operationId": "deleteGroup",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The Group identifier",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": { "description": "No content" },
          "400": {
            "description": "Bad Request",
            "schema": { "$ref": "#/definitions/ErrorContent" }
          },
          "401": {
            "description": "Unauthorized. Authentication (ID/password) error."
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "You are not allowed to access the resource."
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "The requested resource was not found."
                }
              }
            }
          },
          "500": { "description": "Internal Server Error" }
        }
      },
      "parameters": []
    },
    "/groups/{id}/callbacks-not-delivered": {
      "get": {
        "tags": ["Groups"],
        "summary": "Retrieve a list of undelivered callbacks",
        "description": "Retrieve a list of undelivered callbacks and errors for a given group, in reverse chronological order (most recent message first). SNR will be deprecated (see [Newsletter](https://backend.sigfox.com/welcome/news) for details). To monitor radio link quality, please use the [Link Quality Indicator (LQI)](https://support.sigfox.com/docs/link-quality:-general-knowledge) which is more relevant than SNR in Sigfox network.\n",
        "operationId": "getCallbackMessagesErrorListForGroup",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The Group identifier",
            "required": true,
            "type": "string"
          },
          {
            "name": "since",
            "in": "query",
            "description": "Starting timestamp (in milliseconds since Unix Epoch)",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "before",
            "in": "query",
            "description": "Ending timestamp (in milliseconds since Unix Epoch)",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of items to return",
            "required": false,
            "type": "integer",
            "default": 100,
            "format": "int32"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "The number of items to skip",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "title": "Hosts",
                  "items": { "$ref": "#/definitions/groupErrorMessages" }
                },
                "paging": { "$ref": "#/definitions/paging" }
              },
              "title": "Response"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": { "$ref": "#/definitions/ErrorContent" }
          },
          "401": {
            "description": "Unauthorized. Authentication (ID/password) error."
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "You are not allowed to access the resource."
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "The requested resource was not found."
                }
              }
            }
          },
          "500": { "description": "Internal Server Error" }
        }
      },
      "parameters": []
    },
    "/groups/{id}/geoloc-payloads": {
      "get": {
        "tags": ["Groups"],
        "summary": "Retrieve a list of geolocation payload",
        "description": "Retrieve a list of geolocation payload according to request filters.\n",
        "operationId": "listGeolocationPayload",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The Group identifier",
            "required": true,
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of items to return",
            "required": false,
            "type": "integer",
            "default": 100,
            "format": "int32"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "The number of items to skip",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int32"
          },
          {
            "name": "pageId",
            "in": "query",
            "description": "Token representing the page to retrieve",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "title": "Geolocation payload",
                  "items": { "$ref": "#/definitions/baseGeolocation" }
                },
                "paging": { "$ref": "#/definitions/paging" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": { "$ref": "#/definitions/ErrorContent" }
          },
          "401": {
            "description": "Unauthorized. Authentication (ID/password) error."
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "You are not allowed to access the resource."
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "The requested resource was not found."
                }
              }
            }
          },
          "500": { "description": "Internal Server Error" }
        }
      },
      "parameters": []
    },
    "/operators/{id}": {
      "get": {
        "tags": ["Operators"],
        "summary": "Retrieve information about an operator",
        "description": "Retrieve information about a given operator.\n",
        "operationId": "getOperator",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The Operator id (hexademical format)",
            "required": true,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Defines the other available fields to be returned in the response.\n",
            "required": false,
            "type": "string",
            "enum": [
              "hardwareConfigurations(hardware(name))",
              "telecommunicationStandard(name)",
              "currentRuntimes(hardware(name),runtime(name))",
              "upgradeStatus(runtime(name))"
            ]
          },
          {
            "name": "authorizations",
            "in": "query",
            "description": "if true, we return the list of actions and resources the user has access",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": { "$ref": "#/definitions/operatorRead" }
          },
          "400": {
            "description": "Bad Request",
            "schema": { "$ref": "#/definitions/ErrorContent" }
          },
          "401": {
            "description": "Unauthorized. Authentication (ID/password) error."
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "You are not allowed to access the resource."
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "The requested resource was not found."
                }
              }
            }
          },
          "500": { "description": "Internal Server Error" }
        }
      },
      "put": {
        "tags": ["Operators"],
        "summary": "Update an operator",
        "description": "Update a given operator.\n",
        "operationId": "updateOperator",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The Operator id (hexademical format)",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "operator",
            "description": "The operator to update",
            "required": true,
            "schema": { "$ref": "#/definitions/operatorUpdate" }
          }
        ],
        "responses": {
          "204": { "description": "No content" },
          "400": {
            "description": "Bad Request",
            "schema": { "$ref": "#/definitions/ErrorContent" }
          },
          "401": {
            "description": "Unauthorized. Authentication (ID/password) error."
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "You are not allowed to access the resource."
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "The requested resource was not found."
                }
              }
            }
          },
          "500": { "description": "Internal Server Error" }
        }
      },
      "parameters": []
    },
    "/profiles/": {
      "get": {
        "tags": ["Profiles"],
        "summary": "Retrieve a list of profiles",
        "description": "Retrieve a list of a Group's profiles according to visibility permissions and request filters.\n",
        "operationId": "listprofiles",
        "parameters": [
          {
            "name": "groupId",
            "in": "query",
            "description": "The group's identifier",
            "required": true,
            "type": "string"
          },
          {
            "name": "inherit",
            "in": "query",
            "description": "also returns profiles inherited from parent's group",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Defines the other available fields to be returned in the response.\n",
            "required": false,
            "type": "string",
            "enum": ["group(name,type,level)", "roles(name,path(name))"]
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of items to return",
            "required": false,
            "type": "integer",
            "default": 100,
            "format": "int32"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "The number of items to skip",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int32"
          },
          {
            "name": "authorizations",
            "in": "query",
            "description": "if true, return the list of actions and resources the user has access",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "title": "profiles",
                  "items": { "$ref": "#/definitions/profile" }
                },
                "paging": { "$ref": "#/definitions/paging" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": { "$ref": "#/definitions/ErrorContent" }
          },
          "401": {
            "description": "Unauthorized. Authentication (ID/password) error."
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "You are not allowed to access the resource."
                }
              }
            }
          },
          "500": { "description": "Internal Server Error" }
        }
      },
      "parameters": []
    },
    "/profiles/{id}": {
      "get": {
        "tags": ["Profiles"],
        "summary": "Retrieve information about a profile",
        "description": "Retrieve information about a given profile.\n",
        "operationId": "getProfile",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The Profile identifier",
            "required": true,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Defines the other available fields to be returned in the response.\n",
            "required": false,
            "type": "string",
            "enum": ["group(name,type,level)", "roles(name,path(name))"]
          },
          {
            "name": "authorizations",
            "in": "query",
            "description": "if true, return the list of actions and resources the user has access",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": { "$ref": "#/definitions/profile" }
          },
          "400": {
            "description": "Bad Request",
            "schema": { "$ref": "#/definitions/ErrorContent" }
          },
          "401": {
            "description": "Unauthorized. Authentication (ID/password) error."
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "You are not allowed to access the resource."
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "The requested resource was not found."
                }
              }
            }
          },
          "500": { "description": "Internal Server Error" }
        }
      },
      "parameters": []
    },
    "/tiles/monarch": {
      "get": {
        "tags": ["Tiles"],
        "summary": "Retrieve the information needed to display Sigfox Monarch service coverage.",
        "description": "Retrieve the information needed to display Sigfox Monarch service coverage.\n",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": { "$ref": "#/definitions/tilesResponse" }
          },
          "400": {
            "description": "Bad Request",
            "schema": { "$ref": "#/definitions/ErrorContent" }
          },
          "401": {
            "description": "Unauthorized. Authentication (ID/password) error."
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "You are not allowed to access the resource."
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "The requested resource was not found."
                }
              }
            }
          },
          "500": { "description": "Internal Server Error" }
        }
      },
      "parameters": []
    },
    "/tiles/monarch/kmz": {
      "post": {
        "tags": ["Tiles"],
        "summary": "Compute Sigfox Monarch coverage in order to allow export as kmz file",
        "description": "Starting the computation of Sigfox Monarch coverage view for a specific coverage mode. A new computation starts if no other computation, run in the last 24 hours, is available. Otherwise, the existing jobId is returned.\n",
        "operationId": "kmzCreateMonarch",
        "parameters": [
          {
            "in": "body",
            "name": "request",
            "description": "The computation will be performed with the specified coverage mode",
            "required": true,
            "schema": { "$ref": "#/definitions/kmzCreatePublicRequest" }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "type": "object",
              "properties": {
                "jobId": {
                  "type": "string",
                  "description": "jobId provided to the customer to request the job status and results"
                }
              },
              "example": { "jobId": "59a0e7e23c8789070995cc4b" }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": { "$ref": "#/definitions/ErrorContent" }
          },
          "401": {
            "description": "Unauthorized. Authentication (ID/password) error."
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "You are not allowed to access the resource."
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "The requested resource was not found."
                }
              }
            }
          },
          "500": { "description": "Internal Server Error" }
        }
      },
      "parameters": []
    },
    "/tiles/monarch/kmz/{jobId}": {
      "get": {
        "tags": ["Tiles"],
        "summary": "Retrieve Sigfox Monarch coverage kmz computed job results",
        "description": "Retrieve Sigfox Monarch coverage kmz computation from asynchronous job status\n",
        "operationId": "kmzStatusMonarch",
        "parameters": [
          {
            "name": "jobId",
            "in": "path",
            "description": "The job's identifier (hexademical format)",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": { "$ref": "#/definitions/kmzStatusResponse" }
          },
          "400": {
            "description": "Bad Request",
            "schema": { "$ref": "#/definitions/ErrorContent" }
          },
          "401": {
            "description": "Unauthorized. Authentication (ID/password) error."
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "You are not allowed to access the resource."
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "The requested resource was not found."
                }
              }
            }
          },
          "500": { "description": "Internal Server Error" }
        }
      },
      "parameters": []
    },
    "/tiles/monarch/kmz/{jobId}/tiles.kmz": {
      "get": {
        "tags": ["Tiles"],
        "summary": "Retrieve Sigfox Monarch coverage kmz file",
        "description": "Retrieve Sigfox Monarch coverage kmz from a job\n",
        "operationId": "kmzFileMonarch",
        "produces": ["application/vnd.google-earth.kmz"],
        "parameters": [
          {
            "name": "jobId",
            "in": "path",
            "description": "The job's identifier (hexademical format)",
            "required": true,
            "type": "string"
          },
          {
            "name": "zoom",
            "in": "query",
            "description": "The zoom level used to generate kmz file",
            "required": true,
            "type": "integer",
            "maximum": 11,
            "minimum": 0,
            "format": "int32"
          },
          {
            "name": "north",
            "in": "query",
            "description": "The north boundary to extract coverage",
            "required": true,
            "type": "integer",
            "maximum": 90,
            "minimum": -90,
            "format": "double"
          },
          {
            "name": "south",
            "in": "query",
            "description": "The south boundary to extract coverage",
            "required": true,
            "type": "integer",
            "maximum": 90,
            "minimum": -90,
            "format": "double"
          },
          {
            "name": "west",
            "in": "query",
            "description": "The west boundary to extract coverage",
            "required": true,
            "type": "integer",
            "maximum": 180,
            "minimum": -180,
            "format": "double"
          },
          {
            "name": "east",
            "in": "query",
            "description": "The east boundary to extract coverage",
            "required": true,
            "type": "integer",
            "maximum": 180,
            "minimum": -180,
            "format": "double"
          }
        ],
        "responses": {
          "200": { "description": "A Kmz file" },
          "400": {
            "description": "Bad Request",
            "schema": { "$ref": "#/definitions/ErrorContent" }
          },
          "401": {
            "description": "Unauthorized. Authentication (ID/password) error."
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "You are not allowed to access the resource."
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "The requested resource was not found."
                }
              }
            }
          },
          "500": { "description": "Internal Server Error" }
        }
      },
      "parameters": []
    },
    "/tiles/public-coverage": {
      "get": {
        "tags": ["Tiles"],
        "summary": "Retrieve the information needed to display Sigfox public coverage.",
        "description": "Retrieve the information needed to display Sigfox public coverage.\n",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": { "$ref": "#/definitions/tilesResponse" }
          },
          "400": {
            "description": "Bad Request",
            "schema": { "$ref": "#/definitions/ErrorContent" }
          },
          "401": {
            "description": "Unauthorized. Authentication (ID/password) error."
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "You are not allowed to access the resource."
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "The requested resource was not found."
                }
              }
            }
          },
          "500": { "description": "Internal Server Error" }
        }
      },
      "parameters": []
    },
    "/tiles/public-coverage/kmz/tiles.kmz": {
      "get": {
        "tags": ["Tiles"],
        "summary": "Retrieve Sigfox public coverage kmz file",
        "description": "Retrieve Sigfox public coverage kmz file from a job. The public coverage is always available and does not require a previous calculation\n",
        "operationId": "kmzFilePublicCoverage",
        "produces": ["application/vnd.google-earth.kmz"],
        "parameters": [
          {
            "name": "zoom",
            "in": "query",
            "description": "The zoom level used to generate kmz file",
            "required": true,
            "type": "integer",
            "maximum": 11,
            "minimum": 0,
            "format": "int32"
          },
          {
            "name": "north",
            "in": "query",
            "description": "The north boundary to extract coverage",
            "required": true,
            "type": "integer",
            "maximum": 90,
            "minimum": -90,
            "format": "double"
          },
          {
            "name": "south",
            "in": "query",
            "description": "The south boundary to extract coverage",
            "required": true,
            "type": "integer",
            "maximum": 90,
            "minimum": -90,
            "format": "double"
          },
          {
            "name": "west",
            "in": "query",
            "description": "The west boundary to extract coverage",
            "required": true,
            "type": "integer",
            "maximum": 180,
            "minimum": -180,
            "format": "double"
          },
          {
            "name": "east",
            "in": "query",
            "description": "The east boundary to extract coverage",
            "required": true,
            "type": "integer",
            "maximum": 180,
            "minimum": -180,
            "format": "double"
          }
        ],
        "responses": {
          "200": { "description": "A Kmz file" },
          "400": {
            "description": "Bad Request",
            "schema": { "$ref": "#/definitions/ErrorContent" }
          },
          "401": {
            "description": "Unauthorized. Authentication (ID/password) error."
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "You are not allowed to access the resource."
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "The requested resource was not found."
                }
              }
            }
          },
          "500": { "description": "Internal Server Error" }
        }
      },
      "parameters": []
    },
    "/users/": {
      "get": {
        "tags": ["Users"],
        "summary": "Retrieve a list of users according to visibility permissions and request filters",
        "description": "Retrieve a list of users according to visibility permissions and request filters.\n",
        "operationId": "listUsers",
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "Defines the other available fields to be returned in the response.\n",
            "required": false,
            "type": "string",
            "enum": [
              "userRoles(group(name,type,level,bssId,customerBssId),profile(name,roles(name,perms(name))))"
            ]
          },
          {
            "name": "text",
            "in": "query",
            "description": "Searches for users containing the given text in their name or email",
            "required": false,
            "type": "string"
          },
          {
            "name": "profileId",
            "in": "query",
            "description": "Searches for users who have the given profile affected",
            "required": false,
            "type": "string"
          },
          {
            "name": "groupIds",
            "in": "query",
            "description": "Searches for users who are attached to the given groups",
            "required": false,
            "type": "array",
            "items": { "type": "string" },
            "collectionFormat": "csv"
          },
          {
            "name": "deep",
            "in": "query",
            "description": "Deep search in the sub group hierarchy",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "The field on which the list will be sorted. (field to sort ascending or -field to sort descending)\nsort by name will sort on lowercase and ascii string version of \"<firstName> <lastName>\"\n",
            "required": false,
            "type": "string",
            "default": "id",
            "enum": ["id", "-id", "name", "-name", "email", "-email"]
          },
          {
            "name": "authorizations",
            "in": "query",
            "description": "if true, we return the list of actions and resources the user has access",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of items to return",
            "required": false,
            "type": "integer",
            "default": 100,
            "format": "int32"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "The number of items to skip",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int32"
          },
          {
            "name": "pageId",
            "in": "query",
            "description": "Token representing the page to retrieve",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "title": "Users",
                  "items": { "$ref": "#/definitions/user" }
                },
                "paging": { "$ref": "#/definitions/paging" }
              },
              "title": "Response"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": { "$ref": "#/definitions/ErrorContent" }
          },
          "401": {
            "description": "Unauthorized. Authentication (ID/password) error."
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "You are not allowed to access the resource."
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "The requested resource was not found."
                }
              }
            }
          },
          "500": { "description": "Internal Server Error" }
        }
      },
      "post": {
        "tags": ["Users"],
        "summary": "Create a user",
        "description": "Create a new user.\n",
        "operationId": "createUser",
        "parameters": [
          {
            "in": "body",
            "name": "user",
            "description": "The user to create",
            "required": true,
            "schema": { "$ref": "#/definitions/userCreation" }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "Location": {
                "type": "string",
                "description": "The URI of the new created user"
              }
            },
            "schema": { "$ref": "#/definitions/createResponse" }
          },
          "400": {
            "description": "Bad Request",
            "schema": { "$ref": "#/definitions/ErrorContent" }
          },
          "401": {
            "description": "Unauthorized. Authentication (ID/password) error."
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "You are not allowed to access the resource."
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "The requested resource was not found."
                }
              }
            }
          },
          "500": { "description": "Internal Server Error" }
        }
      },
      "parameters": []
    },
    "/users/{id}": {
      "get": {
        "tags": ["Users"],
        "summary": "Retrieve information about a user",
        "description": "Retrieve information about a given user. The id can also be the user's email address.\n",
        "operationId": "getUser",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The User identifier",
            "required": true,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Defines the other available fields to be returned in the response.\n",
            "required": false,
            "type": "string",
            "enum": [
              "userRoles(group(name,type,level,bssId,customerBssId),profile(name,roles(name,perms(name))))"
            ]
          },
          {
            "name": "authorizations",
            "in": "query",
            "description": "if true, we return the list of actions and resources the user has access",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": { "$ref": "#/definitions/user" }
          },
          "400": {
            "description": "Bad Request",
            "schema": { "$ref": "#/definitions/ErrorContent" }
          },
          "401": {
            "description": "Unauthorized. Authentication (ID/password) error."
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "You are not allowed to access the resource."
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "The requested resource was not found."
                }
              }
            }
          },
          "500": { "description": "Internal Server Error" }
        }
      },
      "put": {
        "tags": ["Users"],
        "summary": "Update a user",
        "description": "Update a given user.\n",
        "operationId": "updateUser",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The User identifier",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "user",
            "description": "The user to update",
            "required": true,
            "schema": { "$ref": "#/definitions/userUpdate" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": { "$ref": "#/definitions/updateResponse" }
          },
          "204": { "description": "No content" },
          "400": {
            "description": "Bad Request",
            "schema": { "$ref": "#/definitions/ErrorContent" }
          },
          "401": {
            "description": "Unauthorized. Authentication (ID/password) error."
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "You are not allowed to access the resource."
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "The requested resource was not found."
                }
              }
            }
          },
          "500": { "description": "Internal Server Error" }
        }
      },
      "delete": {
        "tags": ["Users"],
        "summary": "Delete a user",
        "description": "Delete a given user.\n",
        "operationId": "deleteUser",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The User identifier",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": { "description": "No content" },
          "400": {
            "description": "Bad Request",
            "schema": { "$ref": "#/definitions/ErrorContent" }
          },
          "401": {
            "description": "Unauthorized. Authentication (ID/password) error."
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "You are not allowed to access the resource."
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "The requested resource was not found."
                }
              }
            }
          },
          "500": { "description": "Internal Server Error" }
        }
      },
      "parameters": []
    },
    "/users/{id}/profiles": {
      "put": {
        "tags": ["Users"],
        "summary": "add user roles to a user",
        "description": "add user roles to a user.\n",
        "operationId": "addUserRoles",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The User identifier",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "userRoles",
            "description": "user roles array to add",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "userRoles": {
                  "type": "array",
                  "description": "Defines the rights of the user",
                  "title": "UserRoles",
                  "items": {
                    "type": "object",
                    "title": "UserRole",
                    "properties": {
                      "groupId": {
                        "type": "string",
                        "description": "The group identifier on which the user will have the permissions set"
                      },
                      "profileId": {
                        "type": "string",
                        "description": "The profile identifier that will give some permissions to the user"
                      }
                    },
                    "required": ["groupId", "profileId"]
                  }
                },
                "baseStations": {
                  "type": "string",
                  "description": "list of base station ids (Comma-separated values in hexadecimal format) corresponding to the userRoles with tap limited access granted",
                  "title": "baseStations"
                },
                "maintenances": {
                  "type": "string",
                  "description": "list of maintenance ids corresponding to the userRoles with site limited access granted",
                  "title": "maintenances"
                }
              }
            }
          }
        ],
        "responses": {
          "204": { "description": "No content" },
          "400": {
            "description": "Bad Request",
            "schema": { "$ref": "#/definitions/ErrorContent" }
          },
          "401": {
            "description": "Unauthorized. Authentication (ID/password) error."
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "You are not allowed to access the resource."
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "The requested resource was not found."
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "schema": {
              "type": "object",
              "properties": {
                "message": { "type": "string" },
                "allowedMethods": {
                  "type": "array",
                  "items": { "type": "string" }
                }
              },
              "example": {
                "message": "Method PATCH not allowed.",
                "allowedMethods": ["GET", "POST", "PUT", "DELETE"]
              }
            }
          },
          "500": { "description": "Internal Server Error" }
        }
      },
      "parameters": []
    },
    "/users/{id}/profiles/{profileId}": {
      "delete": {
        "tags": ["Users"],
        "summary": "Delete profiles or a given profile associated to the groupId",
        "description": "Delete profiles or a given profile associated to the groupId\n",
        "operationId": "deleteUserRole",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The User identifier",
            "required": true,
            "type": "string"
          },
          {
            "name": "profileId",
            "in": "path",
            "description": "The profile identifier",
            "required": true,
            "type": "string"
          },
          {
            "name": "groupId",
            "in": "query",
            "description": "The group identifier",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "204": { "description": "No content" },
          "400": {
            "description": "Bad Request",
            "schema": { "$ref": "#/definitions/ErrorContent" }
          },
          "401": {
            "description": "Unauthorized. Authentication (ID/password) error."
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "You are not allowed to access the resource."
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "The requested resource was not found."
                }
              }
            }
          },
          "500": { "description": "Internal Server Error" }
        }
      },
      "parameters": []
    }
  },
  "securityDefinitions": {
    "basicAuth": {
      "description": "Since all communications are encrypted, the authentication is performed using HTTP Basic scheme.",
      "type": "basic"
    }
  },
  "definitions": {
    "commonApiUser": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The API user name",
          "maxLength": 100
        },
        "timezone": { "type": "string", "description": "The API user timezone" }
      },
      "description": "Defines the generic API user properties",
      "example": { "name": "Device messages only", "timezone": "Europe/Paris" }
    },
    "apiUser": {
      "description": "Defines the API user properties",
      "allOf": [
        { "$ref": "#/definitions/commonApiUser" },
        {
          "type": "object",
          "properties": {
            "group": { "$ref": "#/definitions/minGroup" },
            "creationTime": {
              "type": "integer",
              "format": "int64",
              "description": "The creation time since epoch"
            },
            "id": {
              "type": "string",
              "description": "The API user identifier"
            },
            "accessToken": {
              "type": "string",
              "description": "The API user access token (password)"
            },
            "profiles": {
              "type": "array",
              "items": { "$ref": "#/definitions/minProfile" }
            },
            "actions": { "$ref": "#/definitions/actions" },
            "resources": { "$ref": "#/definitions/resources" }
          },
          "example": {
            "id": "5138e7dfa2f1fffaf25fd409",
            "group": [
              {
                "id": "babecafebabecafebabedcef",
                "name": "SIGFOX_Group",
                "type": "0",
                "level": 1
              }
            ],
            "creationTime": 1435579813762,
            "profiles": [
              { "id": "5138e7dfa2f1fffaf25fd409", "name": "SNO [W]" },
              { "id": "51cc7155e4b00d18ddb99230", "name": "DEVICE MANAGER [W]" }
            ],
            "accessToken": "b00c92a71b3b8dfa1fcv36d90b50aeb3"
          }
        }
      ],
      "title": "API User"
    },
    "apiUserCreation": {
      "type": "object",
      "required": ["groupId", "name", "profileIds", "timezone"],
      "properties": {
        "groupId": { "type": "string", "description": "The group identifer" },
        "name": {
          "type": "string",
          "description": "The API user name",
          "maxLength": 100
        },
        "timezone": {
          "type": "string",
          "description": "The API user timezone as a Java TimeZone ID (\"full name\" version only, like \"America/Costa_Rica\")"
        },
        "profileIds": {
          "type": "array",
          "description": "The API user profiles",
          "items": {
            "type": "string",
            "description": "The profile's identifier"
          }
        }
      },
      "title": "Create API User",
      "description": "Defines the API user properties for creation",
      "example": {
        "groupId": "babecafebabecafebabedcef",
        "name": "Test only",
        "timezone": "Europe/Paris",
        "profileIds": ["5138e7dfa2f1fffaf25fd409", "51cc7155e4b00d18ddb99230"]
      }
    },
    "apiUserEdition": {
      "description": "Defines the API user properties to be modified",
      "allOf": [
        { "$ref": "#/definitions/commonApiUser" },
        { "$ref": "#/definitions/profileIds" }
      ]
    },
    "profileIds": {
      "type": "object",
      "properties": {
        "profileId": { "type": "array", "items": { "type": "string" } }
      },
      "description": "The API user profile identifier(s)",
      "example": {
        "profileIds": ["5138e7dfa2f1fffaf25fd409", "51cc7155e4b00d18ddb99230"]
      }
    },
    "paging": {
      "type": "object",
      "properties": { "next": { "type": "string" } },
      "title": "Pagination"
    },
    "ErrorContent": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string",
          "example": "bad request",
          "description": "General error message"
        },
        "errors": {
          "type": "array",
          "description": "List of errors that occured during request",
          "items": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "example": "body",
                "description": "Describe where the problem occurred. Can be from body, query or path.\n"
              },
              "field": {
                "type": "string",
                "example": "location.temperature",
                "description": "Name of the field or parameter where the specific error occurred.\n"
              },
              "message": {
                "type": "string",
                "example": "extra fields not permitted",
                "description": "Readable specific error for the previously defined field.\n"
              }
            }
          }
        }
      },
      "description": "Content of error messages, and sub-errors messages if any"
    },
    "minGroup": {
      "type": "object",
      "properties": {
        "id": { "type": "string", "description": "The group identifier" },
        "name": {
          "type": "string",
          "description": "The group name",
          "minLength": 3,
          "maxLength": 100
        },
        "type": {
          "type": "integer",
          "format": "int32",
          "description": "Group's type\n0 -> SO\n2 -> Other\n5 -> SVNO\n6 -> Partners\n7 -> NIP\n8 -> DIST\n9 -> Channel\n10 -> Starter\n11 -> Partner\n"
        },
        "level": {
          "type": "integer",
          "format": "int32",
          "description": "The depth level of the group in hierarchy"
        },
        "actions": { "$ref": "#/definitions/actions" },
        "resources": { "$ref": "#/definitions/resources" }
      },
      "title": "Minimal Group",
      "description": "Defines a group entity",
      "example": {
        "id": "572f1204017975032d8ec1dd",
        "name": "Group 1",
        "type": 0,
        "level": 1,
        "actions": ["read"]
      }
    },
    "actions": {
      "type": "array",
      "description": "An array containg all the actions that can be executed on an entity or object",
      "items": { "$ref": "#/definitions/action" },
      "example": ["create", "update"]
    },
    "action": {
      "type": "string",
      "description": "An action that can be executed on an entity or object",
      "example": "create"
    },
    "resources": {
      "type": "array",
      "description": "An array of the api resources (endpoint) that this entity is able to use",
      "items": { "$ref": "#/definitions/resource" },
      "example": ["messages", "product-certificate"]
    },
    "resource": {
      "type": "string",
      "description": "An api resource (endpoint) that this entity is able to use",
      "example": "messages"
    },
    "minProfile": {
      "type": "object",
      "properties": {
        "id": { "type": "string", "description": "The profile's identifier" },
        "name": {
          "type": "string",
          "description": "The profile's name",
          "maxLength": 100
        },
        "actions": { "$ref": "#/definitions/actions" }
      },
      "title": "Profile",
      "description": "Defines a profile entity",
      "example": { "id": "572f196fe0b90abc0b5104ab", "name": "CUSTOMER [W]" }
    },
    "baseStationUpdate": {
      "type": "object",
      "properties": {
        "name": { "type": "string", "description": "The base station's name" },
        "description": {
          "type": "string",
          "description": "Description of the base station"
        },
        "baseStationAlertTime": {
          "type": "integer",
          "format": "int32",
          "description": "Overrides group level alert times, in seconds, for an individual base station.",
          "minimum": 300,
          "maximum": 86400
        },
        "transmissionAuthorized": {
          "type": "boolean",
          "description": "true if the transmission is authorized on this base station"
        },
        "installer": {
          "type": "string",
          "description": "Name of the installer of this base station. This field can be unset when updating."
        },
        "globalCoverageEnable": {
          "type": "boolean",
          "description": "true if the base station is available for the global coverage computation"
        },
        "elevation": {
          "type": "integer",
          "format": "int32",
          "description": "Antenna height (in meter)"
        },
        "splatRadius": {
          "type": "integer",
          "format": "int32",
          "description": "Radius of the base station (in km). This field can be unset when updating."
        },
        "mastEquipment": {
          "type": "integer",
          "format": "int32",
          "description": "LNA version of this base station. Mini station has type 7 -> MINI. Mini Access has type 21.\n0 -> OTHER\n1 -> LNA_V2_SBS_868_P\n2 -> LNA_V2_SBS_902_P\n3 -> LNA_V2_NB_SBS_868_P\n4 -> LNA_V1_SBS_868_P\n5 -> LNA_V2_SBS_920_P\n6 -> LNA_V2_SBS_923_P\n7 -> MINI\n8 -> LNA_V4_867\n9 -> LNA_V4_915\n10 -> LNAC_867\n11 -> LNAC_868\n12 -> LNAC_902\n13 -> LNAC_916_TX\n14 -> LNAC_921\n15 -> LNAC_921_TX\n16 -> LNAC_922_TX\n17 -> LNA_V3_SBS_868_P\n18 -> LNA_V3_SBS_902_P\n19 -> LNA_V3_SBS_920_P\n20 -> LNA_V3_SBS_923_P\n21 -> NONE\n22 -> LNAC_868_TX\n"
        },
        "mastEquipmentDescription": {
          "type": "string",
          "description": "The base station's mast equipment description. This field can be unset when updating."
        },
        "lnaByPass": {
          "type": "boolean",
          "description": "true if the LNA is by pass"
        },
        "cavityFilterVersion": {
          "type": "integer",
          "format": "int32",
          "description": "Cavity filter version for the base station.\n-1 -> None\n0 -> Other\n1 -> ETSI 868MHz (Matech)\n2 -> ETSI 868MHz (Elhyte)\n3 -> FCC 905MHz (Matech)\n4 -> FCC 905MHz (Elhyte)\n5 -> FCC 920MHz\n6 -> FCC 923MHz\n7 -> FCC 922.5MHz\n8 -> ETSI 867MHz (Matech)\n9 -> ETSI 867MHz (Techniwave)\n10 -> FCC 921.5MHz\n"
        },
        "cavityFilterVersionDescription": {
          "type": "string",
          "description": "The base station's cavity filter version description. This field can be unset when updating."
        },
        "environmentLoss": {
          "type": "number",
          "format": "double",
          "description": "Environment loss of this base station (in dB)"
        },
        "cableLoss": {
          "type": "number",
          "format": "double",
          "description": "Cable loss of this base station (in dB)"
        },
        "antennaGain": {
          "type": "number",
          "format": "double",
          "description": "Antenna gai of this base station (in dB)"
        },
        "antennaNoiseFigure": {
          "type": "number",
          "format": "double",
          "description": "Antenna noise figure of this base station (in dB). This setting is only relevant when an antenna with a filter is installed."
        },
        "antennaInsertionLoss": {
          "type": "number",
          "format": "double",
          "description": "Antenna insertion loss of this base station (in dB). This setting is only relevant when an antenna with a filter is installed."
        },
        "antennaMaxAdmissiblePower": {
          "type": "number",
          "format": "double",
          "description": "Antenna max admissible power of this base station (in dBm). This setting is only relevant when an antenna with a filter is installed."
        },
        "gainFlag": {
          "type": "boolean",
          "description": "true if the base station has a gain flag"
        },
        "mastEquipmentGain": {
          "type": "number",
          "format": "double",
          "description": "Mast equipment gain of this base station (in dB)"
        },
        "mastEquipmentNoiseFigure": {
          "type": "number",
          "format": "double",
          "description": "Mast equipment noise figure of this base station (in dB)"
        },
        "lnaInsertionLoss": {
          "type": "number",
          "format": "double",
          "description": "LNA insertion loss of this base station (in dB)"
        },
        "cavityFilterInsertionLoss": {
          "type": "number",
          "format": "double",
          "description": "Cavity filter insertion loss of this base station (in dB)"
        },
        "txPowerMargin": {
          "type": "number",
          "format": "double",
          "description": "TX power margin of this base station (in dBm)",
          "minimum": -20,
          "maximum": 20
        },
        "serviceCoverage": {
          "type": "integer",
          "format": "int32",
          "description": "Service coverage of a mini base station\n0 -> GLOBAL\n1 -> CUSTOMER\n"
        },
        "antenna": {
          "type": "object",
          "allOf": [{ "$ref": "#/definitions/antenna" }]
        },
        "monarchBeaconEnabled": {
          "type": "boolean",
          "description": "true if Monarch Beacon is enabled"
        }
      },
      "description": "Provide information to update a Base Station",
      "example": {
        "id": 1,
        "name": "Paris La Villette (Paris)",
        "versionCurrent": "N/A",
        "pac": "--automatic--",
        "remoteIp": "10.30.26.28",
        "autoTxPeriod": 6,
        "tilt": 46.29,
        "antenna": {
          "model": "abcd",
          "azimuth": 20.19,
          "attenuationDirect": 178.29,
          "attenuationIndirect": 241.6,
          "attenuation": 80
        }
      }
    },
    "baseStationBulkEdit": {
      "type": "object",
      "required": ["basestations", "groupId"],
      "properties": {
        "groupId": {
          "type": "string",
          "description": "Operator id of named base stations for bulk update"
        },
        "basestations": {
          "type": "array",
          "items": { "$ref": "#/definitions/baseStationUpdate" }
        }
      },
      "example": {
        "groupId": "1234AE",
        "basestations": [
          {
            "id": "001C",
            "name": "Base station #001C",
            "versionCurrent": "v2.6.3",
            "hwVersion": "TAPV1.0",
            "pac": "ADA9832316B3AAF1",
            "remoteIp": "10.250.0.240",
            "capabilities": "BAND800",
            "fifoExpiration": 0,
            "expectedHwVersion": "TAPV1.0",
            "autoTxPeriod": 6,
            "monarchBeaconEnabled": false
          },
          {
            "id": 1,
            "name": "Paris La Villette (Paris)",
            "versionCurrent": "N/A",
            "pac": "ADA9832316B3AAF2",
            "remoteIp": "10.30.26.28",
            "fifoExpiration": 86400,
            "expectedHwVersion": "TAPV1.0",
            "autoTxPeriod": 5
          }
        ]
      }
    },
    "cellularConnectivityForBs": {
      "description": "Cellular connectivity configuration for a base station.",
      "required": ["name", "apn"],
      "allOf": [
        { "$ref": "#/definitions/cellularConnectivityBase" },
        {
          "type": "object",
          "properties": {
            "id": { "type": "string", "description": "The group's identifier" },
            "group": { "$ref": "#/definitions/minGroup" },
            "baseStation": { "$ref": "#/definitions/minBaseStation" },
            "state": {
              "type": "integer",
              "format": "int32",
              "description": "State of a cellular connectivity configuration\n0 -> ACTIVE\n1 -> PASSIVE\n2 -> PENDING (new configuration to synchronize with the base station)\n3 -> REJECTED\n4 -> DELETING\n"
            },
            "syncStatus": {
              "type": "integer",
              "format": "int32",
              "description": "Synchronisation status of a cellular connectivity configuration\n0 -> OK (the conf is synchronized)\n1 -> TO_BE_SENT (the conf has to be synchronized)\n2 -> SENT (the conf is currently send to the base station)\n"
            },
            "lastSwitchErrorStatus": {
              "type": "integer",
              "format": "int32",
              "description": "Error status returned after a connectivity config switch\n0 -> SUCCESS\n1 -> BAD_GSM_PIN\n2 -> TOO_MANY_PIN_TRIES\n3 -> VPN_ESTABLISHMENT_IMPOSSIBLE\n4 -> NETWORK_REJECTED\n5 -> UNKNOWN\n"
            },
            "lastSetconfErrorStatus": {
              "type": "integer",
              "format": "int32",
              "description": "Error status returned after a connectivity config creation/edition\n0 -> SUCCESS\n1 -> BAD_FORMAT\n2 -> EXISTING_CONFIG\n3 -> TOO_MANY_CONFIG\n4 -> CONFIG_ID_CONFLICT\n5 -> UNKNOWN\n"
            },
            "actions": { "$ref": "#/definitions/actions" },
            "resources": { "$ref": "#/definitions/resources" }
          }
        }
      ]
    },
    "ethernetConnectivityForBs": {
      "description": "Ethernet connectivity configuration for a base station.",
      "allOf": [
        { "$ref": "#/definitions/ethernetConnectivityBase" },
        {
          "type": "object",
          "properties": {
            "id": { "type": "string", "description": "The group's identifier" },
            "group": { "$ref": "#/definitions/minGroup" },
            "baseStation": { "$ref": "#/definitions/minBaseStation" },
            "state": {
              "type": "integer",
              "format": "int32",
              "description": "State of an ethernet connectivity configuration\n0 -> ACTIVE\n1 -> PASSIVE\n2 -> PENDING (new configuration to synchronize with the base station)\n3 -> REJECTED\n4 -> DELETING\n"
            },
            "syncStatus": {
              "type": "integer",
              "format": "int32",
              "description": "Synchronisation status of an ethernet connectivity configuration\n0 -> OK (the conf is synchronized)\n1 -> TO_BE_SENT (the conf has to be synchronized)\n2 -> SENT (the conf is currently send to the base station)\n"
            },
            "actions": { "$ref": "#/definitions/actions" },
            "resources": { "$ref": "#/definitions/resources" }
          }
        }
      ]
    },
    "registrationJob": {
      "type": "object",
      "properties": {
        "jobDone": {
          "type": "boolean",
          "description": "If the job is finished or not"
        },
        "operatorId": {
          "type": "string",
          "description": "the operator's  idenfier (hexadecimal format)"
        },
        "name": {
          "type": "string",
          "description": "the name of the registration job"
        },
        "description": {
          "type": "string",
          "description": "the description of the registration job"
        },
        "total": {
          "type": "integer",
          "format": "int32",
          "description": "the total number of base stations given to be created"
        },
        "status": {
          "type": "object",
          "description": "the informations about the base stations already treated",
          "properties": {
            "errors": {
              "type": "array",
              "description": "reasons of each errors",
              "items": { "$ref": "#/definitions/jobError" }
            },
            "success": {
              "type": "integer",
              "format": "int32",
              "description": "the number of base stations successfully created or transferred"
            }
          }
        }
      },
      "description": "information about a multiple registrations job"
    },
    "baseStation": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The base station's identifier (hexadecimal format)"
        },
        "name": { "type": "string", "description": "The base station's name" },
        "versionCurrent": {
          "type": "string",
          "description": "The current version of the software installed on this base station"
        },
        "hwVersion": {
          "type": "string",
          "description": "The current version of the hardware of this base station"
        },
        "group": {
          "type": "object",
          "allOf": [{ "$ref": "#/definitions/minGroup" }]
        },
        "firstCommissioningTime": {
          "type": "integer",
          "format": "int64",
          "description": "The first commissioning time of the station (in milliseconds)"
        },
        "commissioningTime": {
          "type": "integer",
          "format": "int64",
          "description": "The commissioning time of the station (in milliseconds)"
        },
        "decommissioningTime": {
          "type": "integer",
          "format": "int64",
          "description": "The decommissioning time of the station (in milliseconds)"
        },
        "operatingDays": {
          "type": "integer",
          "format": "int32",
          "description": "The number of operating days of the station. To present if the station was not decommissioned, or to decommisioning time otherwise"
        },
        "manufacturerDeliveryTime": {
          "type": "integer",
          "format": "int64",
          "description": "Date of the delivery made by the manufacturer for this base station"
        },
        "warrantyTime": {
          "type": "integer",
          "format": "int64",
          "description": "Date of the beginning of the warranty for this base station"
        },
        "lastCommunicationTime": {
          "type": "integer",
          "format": "int64",
          "description": "Date of the last communication made with this base station"
        },
        "lastPingTime": {
          "type": "integer",
          "format": "int64",
          "description": "Date of the last PING received from this base station"
        },
        "restartTime": {
          "type": "integer",
          "format": "int64",
          "description": "Date of the last restart of this base station"
        },
        "connectionType": {
          "type": "integer",
          "format": "int32",
          "description": "Base station connection type.\n0 -> ETH\n1 -> GSM\n"
        },
        "description": {
          "type": "string",
          "description": "Description of the base station"
        },
        "location": {
          "type": "array",
          "description": "ISO 3166-1 UN M.49 country code of the site location. The first code is the country (region and department available for some countries).",
          "items": {
            "type": "object",
            "properties": {
              "code": {
                "type": "integer",
                "format": "int32",
                "description": "location code"
              },
              "name": { "type": "string", "description": "location name" }
            }
          }
        },
        "hwFamily": {
          "type": "object",
          "allOf": [{ "$ref": "#/definitions/minHwFamily" }]
        },
        "keepAlive": {
          "type": "integer",
          "format": "int32",
          "description": "Number of seconds the base station keep alive"
        },
        "lat": {
          "type": "number",
          "format": "double",
          "description": "The base station's latitude"
        },
        "lng": {
          "type": "number",
          "format": "double",
          "description": "The base station's longitude"
        },
        "communicationState": {
          "type": "integer",
          "format": "int32",
          "description": "Base station communication state.\n0 -> NO\n1 -> OK\n2 -> WARN\n3 -> KO\n4 -> OK KO\n"
        },
        "state": {
          "type": "integer",
          "format": "int32",
          "description": "Base station state.\n0 -> NO\n1 -> OK\n2 -> WARN\n3 -> KO\n4 -> OK KO\n"
        },
        "lifecycleStatus": {
          "type": "integer",
          "format": "int32",
          "description": "Base station lifecycle status\n0 -> STOCK\n1 -> PROD\n2 -> MAINTENANCE\n3 -> DEAD\n"
        },
        "queue": {
          "type": "object",
          "properties": {
            "in": {
              "type": "integer",
              "format": "int32",
              "description": "The number of messages handled by the base station"
            },
            "out": {
              "type": "integer",
              "format": "int32",
              "description": "The number of messages sent to back-end by the base station.\nA high difference between in and out values may suggest either connectivity problems with the back-end,\nor too many messages received at once by the station\n"
            }
          }
        },
        "muted": {
          "type": "boolean",
          "description": "true if the base station is muted"
        },
        "transmissionAuthorized": {
          "type": "boolean",
          "description": "true if the transmission is authorized on this base station"
        },
        "downlinkEnabled": {
          "type": "boolean",
          "description": "true if the downlink is enabled on this base station"
        },
        "installer": {
          "type": "string",
          "description": "Name if the installer of this base station"
        },
        "creationTime": {
          "type": "integer",
          "format": "int64",
          "description": "Date of the creation of the base station (in milliseconds since Unix Epoch)"
        },
        "createdBy": {
          "type": "string",
          "description": "Id of the user who created this base station"
        },
        "lastEditionTime": {
          "type": "integer",
          "format": "int64",
          "description": "Date of the last modification made on this base station (in milliseconds since Unix Epoch)"
        },
        "lastEditedBy": {
          "type": "string",
          "description": "Id of the user who edited this base station for the last time"
        },
        "baseFrequency": {
          "type": "integer",
          "format": "int32",
          "description": "Uplink base frequency of this base station (in Hz)"
        },
        "downlinkCenterFrequency": {
          "type": "integer",
          "format": "int32",
          "description": "Downlink center frequency of this base station (in Hz)"
        },
        "macroChannel": {
          "type": "integer",
          "format": "int32",
          "description": "Macro channel of this base station (in Hz)",
          "minimum": 0
        },
        "txPowerAmplification": {
          "type": "integer",
          "format": "int32",
          "description": "TX power amplification of this base station (in %)"
        },
        "protocol": {
          "type": "integer",
          "format": "int32",
          "description": "Base station protocol.\n1 -> V0\n2 -> V1\n3 -> BOTH\n"
        },
        "preAmp1": {
          "type": "integer",
          "format": "int32",
          "description": "Base station pre amp 1.\n0 -> LNA\n1 -> BYPASS\n2 -> ATTEND\n"
        },
        "preAmp2": {
          "type": "integer",
          "format": "int32",
          "description": "Base station pre amp 2.\n0 -> LNA\n1 -> BYPASS\n2 -> ATTEND\n"
        },
        "RAMLog": {
          "type": "integer",
          "format": "int32",
          "description": "Base station RAM log.\n0 -> YES\n1 -> NO\n2 -> AUTO\n3 -> DROP\n"
        },
        "wwanMode": {
          "type": "integer",
          "format": "int32",
          "description": "Base station WWAN mode.\n0 -> NONE\n1 -> AUTO\n2 -> WCDMA\n3 -> WCDMA_PREF\n4 -> GPRS_PREF\n5 -> GPRS\n"
        },
        "bitRate": {
          "type": "integer",
          "format": "int32",
          "description": "Base station bit rate.\n0 -> bit rate 100 b/s\n1 -> bit rate 600 b/s\n"
        },
        "globalCoverageEnable": {
          "type": "boolean",
          "description": "true if the base station is available for the global coverage computation"
        },
        "elevation": {
          "type": "integer",
          "format": "int32",
          "description": "Antenna height of the base station (in m)"
        },
        "splatRadius": {
          "type": "integer",
          "format": "int32",
          "description": "Radius of the base station (in km)"
        },
        "mastEquipment": {
          "type": "integer",
          "format": "int32",
          "description": "LNA version of the base station. Mini stations have type 7 -> MINI. Mini Access Stations have type 21.\n0 -> OTHER\n1 -> LNA_V2_SBS_868_P\n2 -> LNA_V2_SBS_902_P\n3 -> LNA_V2_NB_SBS_868_P\n4 -> LNA_V1_SBS_868_P\n5 -> LNA_V2_SBS_920_P\n6 -> LNA_V2_SBS_923_P\n7 -> MINI\n8 -> LNA_V4_867\n9 -> LNA_V4_915\n10 -> LNAC_867\n11 -> LNAC_868\n12 -> LNAC_902\n13 -> LNAC_916_TX\n14 -> LNAC_921\n15 -> LNAC_921_TX\n16 -> LNAC_922_TX\n17 -> LNA_V3_SBS_868_P\n18 -> LNA_V3_SBS_902_P\n19 -> LNA_V3_SBS_920_P\n20 -> LNA_V3_SBS_923_P\n21 -> NONE\n22 -> LNAC_868_TX\n"
        },
        "mastEquipmentDescription": {
          "type": "string",
          "description": "The base station's mast equipment description"
        },
        "lnaByPass": {
          "type": "boolean",
          "description": "true if the LNA is by-passed"
        },
        "cavityFilterVersion": {
          "type": "integer",
          "format": "int32",
          "description": "Cavity filter version of the base station.\n-1 -> None\n0 -> Other\n1 -> ETSI 868MHz (Matech)\n2 -> ETSI 868MHz (Elhyte)\n3 -> FCC 905MHz (Matech)\n4 -> FCC 905MHz (Elhyte)\n5 -> FCC 920MHz\n6 -> FCC 923MHz\n7 -> FCC 922.5MHz\n8 -> ETSI 867MHz (Matech)\n9 -> ETSI 867MHz (Techniwave)\n"
        },
        "cavityFilterVersionDescription": {
          "type": "string",
          "description": "The base station's cavity filter version description"
        },
        "environmentLoss": {
          "type": "number",
          "format": "double",
          "description": "Environment loss of this base station (in dB)"
        },
        "cableLoss": {
          "type": "number",
          "format": "double",
          "description": "Cable loss of this base station (in dB)"
        },
        "antennaGain": {
          "type": "number",
          "format": "double",
          "description": "Antenna gain of this base station (in dB)."
        },
        "antennaNoiseFigure": {
          "type": "number",
          "format": "double",
          "description": "Antenna noise figure of this base station (in dB). This setting is only relevant when an antenna with a filter is installed."
        },
        "antennaInsertionLoss": {
          "type": "number",
          "format": "double",
          "description": "Antenna insertion loss of this base station (in dB). This setting is only relevant when an antenna with a filter is installed."
        },
        "antennaMaxAdmissiblePower": {
          "type": "number",
          "format": "double",
          "description": "Antenna max admissible power of this base station (in dBm). This setting is only relevant when an antenna with a filter is installed."
        },
        "gainFlag": {
          "type": "boolean",
          "description": "true if the base station has a gain flag"
        },
        "mastEquipmentGain": {
          "type": "number",
          "format": "double",
          "description": "Mast equipment gain of this base station (in dB)"
        },
        "mastEquipmentNoiseFigure": {
          "type": "number",
          "format": "double",
          "description": "Mast equipment noise figure of this base station (in dB)"
        },
        "lnaInsertionLoss": {
          "type": "number",
          "format": "double",
          "description": "LNA insertion loss of this base station (in dB)"
        },
        "cavityFilterInsertionLoss": {
          "type": "number",
          "format": "double",
          "description": "Cavity filter insertion loss of this base station (in dB)"
        },
        "txPowerMargin": {
          "type": "number",
          "format": "double",
          "description": "TX power margin of this base station (in dBm)",
          "minimum": -20,
          "maximum": 20
        },
        "powerCapability": {
          "type": "number",
          "format": "double",
          "description": "power capability of this base station (in dBm)"
        },
        "antennaLocationCode": {
          "type": "integer",
          "format": "int32",
          "description": "Antenna location.\n0 -> OUTDOOR\n1 -> INDOOR\n"
        },
        "serviceCoverage": {
          "type": "integer",
          "format": "int32",
          "description": "Service coverage (for Mini base station)\n0 -> GLOBAL\n1 -> CUSTOMER\n"
        },
        "geolocComputation": {
          "type": "integer",
          "format": "int32",
          "description": "Defines whether the Base Station should contribute to the Sigfox Network location service.\n0 -> DEFAULT\n1 -> ENABLED\n2 -> DISABLED\n"
        },
        "geolocGlobalStateOfContribution": {
          "type": "integer",
          "format": "int32",
          "description": "The status, computed by the geolocation services, of the Base Station's contribution to the Sigfox Network location service.\n0 -> Not contributing\n1 -> Currently contributing\n2 -> Grey listed\n3 -> Black listed\n4 -> Contribution status not available for the moment\n"
        },
        "antenna": {
          "type": "object",
          "allOf": [{ "$ref": "#/definitions/antenna" }]
        },
        "availableConnections": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int32",
            "description": "Base station connection type.\n0 -> ETH\n1 -> GSM\n"
          }
        },
        "makerCode": {
          "type": "string",
          "description": "the base station’s marker code"
        },
        "actions": { "$ref": "#/definitions/actions" },
        "resources": { "$ref": "#/definitions/resources" }
      },
      "description": "Defines the base station's properties",
      "example": {
        "id": "1E6AB",
        "name": "BaseStation1",
        "versionCurrent": "v3.1",
        "hwVersion": "TAPV3.0",
        "group": { "id": "54eaf9469336ff9b89af0680" },
        "firstCommissioningTime": "1383591736000",
        "commissioningTime": "1516978047468",
        "decommissioningTime": 0,
        "operatingDays": 388,
        "manufacturerDeliveryTime": "1514761200000",
        "warrantyTime": "1514761200000",
        "lastCommunicationTime": "1550507749996",
        "lastPingTime": "1550507749996",
        "restartTime": "1550504678000",
        "connectionType": 0,
        "description": "BS site",
        "location": { "code": 250, "name": "France" },
        "hwFamily": { "id": 0 },
        "keepAlive": 60,
        "lat": 43.543,
        "lng": 1.5119,
        "communicationState": 1,
        "state": 1,
        "lifecycleStatus": 1,
        "queue": { "in": 272, "out": 272 },
        "muted": false,
        "transmissionAuthorized": true,
        "downlinkEnabled": true,
        "creationTime": "1349959615055",
        "lastEditionTime": "1534254596847",
        "lastEditedBy": "595c7ddfe89a8e23f712a180",
        "baseFrequency": "868130000",
        "downlinkCenterFrequency": "869525000",
        "macroChannel": "192000",
        "txPowerAmplification": 56,
        "txPowerMargin": 0,
        "protocol": 3,
        "preAmp1": 0,
        "preAmp2": 0,
        "RAMLog": 2,
        "wwanMode": 1,
        "bitRate": 0,
        "globalCoverageEnable": true,
        "elevation": 5,
        "mastEquipment": 1,
        "lnaByPass": false,
        "cavityFilterVersion": -1,
        "lnaInsertionLoss": 1.82,
        "cavityFilterInsertionLoss": 0,
        "environmentLoss": 2,
        "cableLoss": 2,
        "antennaGain": 7.5,
        "antennaNoiseFigure": 0,
        "antennaInsertionLoss": 0,
        "antennaMaxAdmissiblePower": 50,
        "gainFlag": true,
        "mastEquipmentGain": 20,
        "mastEquipmentNoiseFigure": 4,
        "powerCapability": 0,
        "antennaLocationCode": 0,
        "geolocComputation": 0,
        "geolocGlobalStateOfContribution": 4,
        "availableConnections": "0,1"
      }
    },
    "minHwFamily": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "Base station hardware family id.\n0 -> STANDARD\n1 -> MINI\n2 -> ACCESS STATION MINI\n3 -> ACCESS STATION MICRO\n"
        },
        "name": {
          "type": "string",
          "description": "The hardware family's name"
        }
      },
      "description": "minimal information about Hardware Family."
    },
    "simpleSite": {
      "description": "Minimal information about a site linked to a Base Station.",
      "allOf": [
        { "$ref": "#/definitions/minSite" },
        {
          "type": "object",
          "properties": {
            "host": { "$ref": "#/definitions/minHost" },
            "candidateExternalId": {
              "type": "integer",
              "format": "int64",
              "description": "external id of the site where the base station is installed"
            },
            "status": {
              "type": "integer",
              "format": "int32",
              "description": "Site status\n0 -> PROD\n1 -> REFUSED\n2 -> INSTALLED\n3 -> NOT PLANNED\n4 -> PRE PROD\n5 -> CANDIDATE\n6 -> CANCELLED\n7 -> CLIENT\n8 -> RD\n9 -> LABO\n14 -> INSTALLED CONNECTED ONLY SECONDARY\n15 -> INSTALLED CONNECTED ONLY PRIMARY\n"
            },
            "lessorId": {
              "type": "string",
              "description": "id of the lessor of the site where the base station is installed"
            },
            "actions": { "$ref": "#/definitions/actions" }
          }
        }
      ]
    },
    "minSite": {
      "type": "object",
      "properties": {
        "id": { "type": "string", "description": "The site's identifier" },
        "name": {
          "type": "string",
          "description": "The site's name",
          "maxLength": 100
        },
        "actions": { "$ref": "#/definitions/actions" }
      },
      "title": "minSite",
      "example": {
        "id": "572f1204017975032d8ec1dd",
        "name": "Site 1",
        "actions": ["read"]
      }
    },
    "minHost": {
      "type": "object",
      "properties": {
        "id": { "type": "string", "description": "The host's identifier" },
        "name": { "type": "string", "description": "The host's name" }
      },
      "title": "Host"
    },
    "antenna": {
      "type": "object",
      "properties": {
        "model": {
          "type": "string",
          "description": "Antenna model of the station. E.g. \"CXL 900-3LW\", \"CXL 900-6LW\" , \"\" -> NONE ..."
        },
        "azimuth": {
          "type": "number",
          "format": "double",
          "description": "The base station's azimuth (in °)"
        },
        "attenuation": {
          "type": "number",
          "format": "double",
          "description": "The base station's attenuation signal (in %)"
        },
        "attenuationDirect": {
          "type": "number",
          "format": "double",
          "description": "The base station's attenuation direct (in °). This field can be unset when updating."
        },
        "attenuationIndirect": {
          "type": "number",
          "format": "double",
          "description": "The base station's attenuation indirect (in °). This field can be unset when updating."
        },
        "tilt": {
          "type": "number",
          "format": "double",
          "description": "The base station's tilt"
        }
      },
      "description": "Antenna related settings"
    },
    "cellularConnectivityBase": {
      "type": "object",
      "required": ["apn", "name"],
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the configuration"
        },
        "apn": {
          "type": "string",
          "description": "The APN used to connect to the base station with this cellular connectivity configuration"
        },
        "username": {
          "type": "string",
          "description": "The username used to connect to the base station with this cellular connectivity configuration. This field can be unset by setting the value as an empty string."
        },
        "password": {
          "type": "string",
          "description": "The password used to connect to the base station with this cellular connectivity configuration. This field can be unset by setting the value as an empty string."
        },
        "pin": {
          "type": "string",
          "description": "The PIN used to connect to the base station with this cellular connectivity configuration. This field can be unset by setting the value as an empty string."
        },
        "roaming": {
          "type": "boolean",
          "description": "Indicates if the cellular connectivity is registered on a roaming network."
        },
        "source": {
          "type": "integer",
          "format": "int32",
          "description": "Configuration origin of the connectivity\n0 -> REMOTE (Configuration provided by Cloud)\n1 -> OTHERS (From shell console and other origins)\n2 -> DEFAULT (Auto-Generated)\n3 -> TOOLS (Factory, AAT or secure-control)\n"
        }
      }
    },
    "ethernetConnectivityBase": {
      "type": "object",
      "required": ["name", "type"],
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the configuration"
        },
        "type": {
          "type": "integer",
          "format": "int32",
          "description": "Token's type of an ethernet connectivity configuration\n1 -> STATIC\n2 -> PARTLY_DYNAMIC\n"
        },
        "ip": {
          "type": "string",
          "description": "IP address of the ethernet connectivity, required if the type is STATIC"
        },
        "mask": {
          "type": "string",
          "description": "Subnet mask of the ethernet connectivity, required if the type is STATIC"
        },
        "dns1": {
          "type": "string",
          "description": "DNS n°1 of the ethernet connectivity, required if the type is STATIC"
        },
        "dns2": {
          "type": "string",
          "description": "DNS n°2 of the ethernet connectivity, only applicable if the type is STATIC. This field can be unset by setting the value as an empty string."
        },
        "gateway": {
          "type": "string",
          "description": "Gateway of the ethernet connectivity, required if the type is STATIC"
        },
        "mtu": {
          "type": "integer",
          "format": "int32",
          "description": "MTU of the ethernet connectivity, required if the type is PARTLY_DYNAMIC. This field can be unset by setting the value to null."
        },
        "source": {
          "type": "integer",
          "format": "int32",
          "description": "Configuration origin of the connectivity\n0 -> REMOTE (Configuration provided by Cloud)\n1 -> OTHERS (From shell console and other origins)\n2 -> DEFAULT (Auto-Generated)\n3 -> TOOLS (Factory, AAT or secure-control)\n"
        }
      }
    },
    "deviceMessage": {
      "type": "object",
      "properties": {
        "device": {
          "type": "object",
          "description": "Defines a device message",
          "allOf": [{ "$ref": "#/definitions/commonDevice" }]
        },
        "time": {
          "type": "integer",
          "format": "int64",
          "description": "Timestamp of the message (in milliseconds since the Unix Epoch)"
        },
        "data": {
          "type": "string",
          "description": "message content, hex encoded"
        },
        "ackRequired": {
          "type": "boolean",
          "description": "true if an acknowledge is required"
        },
        "lqi": {
          "type": "integer",
          "format": "int32",
          "description": "link quality indicator\n0 -> LIMIT\n1 -> AVERAGE\n2 -> GOOD\n3 -> EXCELLENT\n4 -> NA\n"
        },
        "lqiRepeaters": {
          "type": "integer",
          "format": "int32",
          "description": "link quality indicator for repeated message\n0 -> LIMIT\n1 -> AVERAGE\n2 -> GOOD\n3 -> EXCELLENT\n4 -> NA\n"
        },
        "seqNumber": {
          "type": "integer",
          "format": "int32",
          "description": "the sequence number for this message, may not be present when device uses VO protocol"
        },
        "nbFrames": {
          "type": "integer",
          "format": "int32",
          "description": "nbFrames can be 1 or 3. This value represents an expected number of frames sent by the device."
        },
        "computedLocation": {
          "type": "array",
          "items": { "$ref": "#/definitions/computedLocation" }
        },
        "rinfos": {
          "type": "array",
          "items": { "$ref": "#/definitions/rinfo" }
        },
        "downlinkAnswerStatus": {
          "type": "object",
          "description": "the last callback status for this reception",
          "allOf": [{ "$ref": "#/definitions/downlinkAnswerStatus" }]
        }
      },
      "example": {
        "device": { "id": "1", "name": "device#1" },
        "time": 1487065942000,
        "data": "DEADBEEF",
        "ackRequired": false,
        "lqi": 2,
        "seqNumber": 2,
        "nbFrames": 3,
        "computedLocation": [
          { "lat": 43.45, "lng": 6.54, "radius": 400, "source": 2 }
        ],
        "rinfos": [
          {
            "baseStation": {
              "id": "1E6AB",
              "name": "BaseStation#1",
              "resourceType": 0
            },
            "rssi": -128.53,
            "rssiRepeaters": -56.2,
            "lat": 45.32,
            "lng": 102.3,
            "snr": 14.3,
            "snrRepeaters": 12.3,
            "freq": 868.53,
            "freqRepeaters": 868.1308,
            "rep": 2,
            "repetitions": [
              {
                "nseq": 1,
                "rssi": -127.52,
                "snr": 27.52,
                "freq": 868.1301,
                "repeated": true
              },
              {
                "nseq": 1,
                "rssi": -127.52,
                "snr": 28.52,
                "freq": 867.1401,
                "repeated": false
              }
            ],
            "cbStatus": {
              "status": 200,
              "info": "success",
              "cbDef": "var=2DC7C1%3B1500452712%3Bdeadbeaf%3B",
              "time": 1487065942000
            }
          }
        ],
        "downlinkAnswerStatus": {
          "baseStation": {
            "id": "1E6AB",
            "name": "BaseStation#1",
            "resourceType": 0
          },
          "plannedPower": 67.89,
          "data": "0000437f00000050",
          "operator": "Operator#1",
          "country": "FRANCE"
        }
      }
    },
    "commonDevice": {
      "type": "object",
      "required": ["id", "name"],
      "properties": {
        "id": {
          "type": "string",
          "description": "The device's identifier (hexadecimal format)"
        },
        "name": {
          "type": "string",
          "description": "The device's name",
          "maxLength": 100
        }
      },
      "description": "Defines the device's common properties for reading or creation (not update)",
      "example": { "id": "1", "name": "device#1" }
    },
    "computedLocation": {
      "type": "object",
      "properties": {
        "lat": {
          "type": "number",
          "format": "double",
          "description": "The device's estimated latitude"
        },
        "lng": {
          "type": "number",
          "format": "double",
          "description": "The device's estimated longitude"
        },
        "radius": {
          "type": "integer",
          "format": "int32",
          "description": "The radius of the circle (meters)"
        },
        "source": {
          "type": "integer",
          "format": "int32",
          "description": "Define how the location has been computed:\n- 0 -> computed using RSSI and position of the station (legacy)\n- 1 -> computed using the GPS data inside the payload\n- 2 -> computed using Network location\n- 3 -> computed using PoI location\n- 4 -> computed using HD network location\n- 5 -> computed using private database location\n- 6 -> computed using WiFi location\n- 7 -> computed using Proximity location\n"
        },
        "placeIds": {
          "type": "array",
          "description": "The place ids computed by the Sigfox Geolocation service",
          "items": { "type": "string" }
        }
      },
      "description": "Contains the estimated position of the device within a circle based on the GPS data or the Sigfox Geolocation service"
    },
    "rinfo": {
      "type": "object",
      "properties": {
        "baseStation": {
          "type": "object",
          "description": "Name and Id of the base station which has received the message.",
          "allOf": [{ "$ref": "#/definitions/minBaseStationWithType" }]
        },
        "rssi": {
          "type": "integer",
          "format": "int32",
          "description": "Received Signal Strength Indication (in dBm – Float value with two maximum fraction digits)"
        },
        "rssiRepeaters": {
          "type": "integer",
          "format": "int32",
          "description": "Received Signal Strength Indication from repeaters (in dBm – Float value with two maximum fraction digits)"
        },
        "lat": {
          "type": "number",
          "format": "double",
          "description": "The latitude of the base station that has received the message."
        },
        "lng": {
          "type": "number",
          "format": "double",
          "description": "The longitude of the base station that has received the message."
        },
        "delay": {
          "type": "number",
          "format": "double",
          "description": "the delay (in second) between sending and receiving the message, may not be present."
        },
        "snr": {
          "type": "number",
          "format": "double",
          "description": "the best signal of all repetitions for this base station"
        },
        "snrRepeaters": {
          "type": "number",
          "format": "double",
          "description": "the best signal of all repetitions for this base station coming from repeaters"
        },
        "freq": {
          "type": "number",
          "format": "double",
          "description": "the frequency at which the message has been received (in Hz)"
        },
        "freqRepeaters": {
          "type": "number",
          "format": "double",
          "description": "the frequency at which the message has been received (in Hz) form repeaters"
        },
        "rep": {
          "type": "integer",
          "format": "int32",
          "description": "number of repetitions sent by the base station"
        },
        "repetitions": {
          "type": "array",
          "description": "detail of the repetitions",
          "items": { "$ref": "#/definitions/repetition" }
        },
        "cbStatus": {
          "type": "array",
          "description": "list of callback status for this reception",
          "items": { "$ref": "#/definitions/cbStatus" }
        }
      },
      "example": {
        "rssi": -128.53,
        "rssiRepeaters": -56.2,
        "lat": 45.32,
        "lng": 102.3,
        "snr": 14.3,
        "snrRepeaters": 12.3,
        "freq": 868.53,
        "freqRepeaters": 868.1308,
        "rep": 3
      }
    },
    "minBaseStationWithType": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The base station identifier in hexadecimal"
        },
        "name": { "type": "string", "description": "The base station name" },
        "resourceType": {
          "type": "integer",
          "format": "int32",
          "description": "Resource type.\n0 -> SBS\n1 -> NAP  \n"
        },
        "actions": { "$ref": "#/definitions/actions" }
      },
      "description": "Minimal information about a BaseStation",
      "example": {
        "id": "1E6AB",
        "name": "BaseStation1",
        "resourceType": 0,
        "actions": ["read"]
      }
    },
    "repetition": {
      "type": "object",
      "properties": {
        "nseq": {
          "type": "integer",
          "format": "int32",
          "description": "nseq of the repetition"
        },
        "rssi": {
          "type": "integer",
          "format": "int32",
          "description": "Received Signal Strength Indication (in dBm – Float value with two maximum fraction digits)"
        },
        "snr": {
          "type": "number",
          "format": "double",
          "description": "the best signal of all repetitions for this base station"
        },
        "freq": {
          "type": "number",
          "format": "double",
          "description": "the frequency at which the message has been received (in Hz)"
        },
        "repeated": {
          "type": "boolean",
          "description": "if this repetition has been propagated by a repeater"
        }
      },
      "example": {
        "nseq": 1,
        "rssi": -127.52,
        "snr": 27.52,
        "freq": 868.1301,
        "repeated": true
      }
    },
    "cbStatus": {
      "type": "object",
      "properties": {
        "status": {
          "type": "integer",
          "format": "int32",
          "description": "http response status"
        },
        "info": { "type": "string", "description": "http response message" },
        "cbDef": {
          "type": "string",
          "description": "callback definition triggered"
        },
        "time": {
          "type": "integer",
          "format": "int64",
          "description": "time the callback was called (in milliseconds since the Unix Epoch)"
        }
      },
      "example": {
        "status": 200,
        "info": "success",
        "cbDef": "var=2DC7C1%3B1500452712%3Bdeadbeaf%3B",
        "time": 1487065942000
      }
    },
    "downlinkAnswerStatus": {
      "type": "object",
      "properties": {
        "baseStation": {
          "type": "object",
          "description": "base station to send downlink message",
          "allOf": [{ "$ref": "#/definitions/minBaseStationWithType" }]
        },
        "plannedPower": {
          "type": "number",
          "format": "double",
          "description": "planned downlink power as it was computed by the backend"
        },
        "data": {
          "type": "string",
          "description": "response content, hex encoded"
        },
        "operator": {
          "type": "string",
          "description": "name of the first operator which received the message as roaming"
        },
        "country": {
          "type": "string",
          "description": "country of the operator"
        }
      },
      "example": {
        "plannedPower": 67.89,
        "data": "0000437f00000050",
        "operator": "Operator#1",
        "country": "FRANCE"
      }
    },
    "jobError": {
      "type": "object",
      "properties": {
        "entity": {
          "type": "string",
          "description": "the hex id of the entity that has an error"
        },
        "message": {
          "type": "string",
          "description": "the message of the error"
        },
        "type": {
          "type": "integer",
          "format": "int32",
          "description": "Error type\n- 0 -> ENTITY\n- 1 -> SYSTEM\n"
        }
      },
      "example": {
        "errors": [
          { "entity": "001B", "message": "Invalid entity fields", "type": 0 },
          { "entity": "001C", "message": "Unknown entity", "type": 0 }
        ]
      }
    },
    "minBaseStation": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The base station identifier in hexadecimal"
        },
        "name": { "type": "string", "description": "The base station name" },
        "actions": { "$ref": "#/definitions/actions" }
      },
      "description": "Minimal information about a BaseStation",
      "example": { "id": "1E6AB", "name": "BaseStation1", "actions": ["read"] }
    },
    "cityArea": {
      "type": "object",
      "properties": {
        "id": { "type": "string", "description": "The city area's identifier" },
        "name": { "type": "string", "description": "The city area's name" },
        "groupId": {
          "type": "string",
          "description": "The city area operator's identifier"
        },
        "readOnly": {
          "type": "boolean",
          "description": "true if the city area is not editable by an operator user."
        },
        "deploymentKpiReport": {
          "type": "boolean",
          "description": "true if the city area is included in the monthly deployement kpi report of the operator."
        },
        "actions": { "$ref": "#/definitions/actions" }
      },
      "description": "Define the city area's properties",
      "example": {
        "id": "5ba8ecffe833d90c109a820a",
        "name": "Paris 1er",
        "groupId": "5506a4e193363de86a4fd6f8",
        "readOnly": false,
        "deploymentKpiReport": false
      }
    },
    "commonContractInfo": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The contract name",
          "maxLength": 100
        },
        "activationEndTime": {
          "type": "integer",
          "format": "int64",
          "description": "The activation end time (in milliseconds) of the contract. 0 means no activation time limit.",
          "minimum": 0
        },
        "communicationEndTime": {
          "type": "integer",
          "format": "int64",
          "description": "The end time (in milliseconds) of the communication. 0 means no communication time limit.",
          "minimum": 0
        },
        "bidir": {
          "type": "boolean",
          "description": "True if the contract info is bidirectional."
        },
        "highPriorityDownlink": {
          "type": "boolean",
          "description": "True if all downlinks are high priority."
        },
        "maxUplinkFrames": {
          "type": "integer",
          "format": "int32",
          "description": "The maximum number of uplink frames.",
          "minimum": 0
        },
        "maxDownlinkFrames": {
          "type": "integer",
          "format": "int32",
          "description": "The maximum number of downlink frames.",
          "minimum": 0
        },
        "maxTokens": {
          "type": "integer",
          "format": "int32",
          "description": "The maximum number of tokens for this contract. Either 0 (unlimited) or a positive number.",
          "minimum": 0
        },
        "automaticRenewal": {
          "type": "boolean",
          "description": "True if automatic renewal is allowed."
        },
        "renewalDuration": {
          "type": "integer",
          "format": "int32",
          "description": "The renewal duration in months.",
          "minimum": 0
        },
        "options": {
          "type": "array",
          "description": "The activated premium options. Given options will be merged with existing options in contract. In order to delete a single option use \"/{id}/options\" API.",
          "items": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "The premium option id (messageHistory, payloadEncryption, geolocation, cognition, testFrames, networkMetadata, satellite)"
              },
              "parameters": {
                "type": "object",
                "description": "The parameters of the premium options. The available parameters are the following:\npayloadEncryption:\n  level: 0 (DEVICE_TO_SIGFOX_CLOUD, default), 1 (END_TO_END), 2 (CUSTOMER)\n  secureStorage: true or false (default)\ngeolocation:\n  level: 1 (ATLAS, default), 2 (ATLAS_WIFI), 4 (ATLAS_POV), 5 (ATLAS_BUBBLE), 6 (ATLAS_WIFI_PRIVATEDB)\ncognition:\n  level: 0 (MONARCH, default)\ntestFrames:\n  nb: 1 - 25 (default=1)\n  duration (in months): 0 (illimited, default) or number of months\nnetworkMetadata:\n  (none)\nmessageHistory:\n  duration: 0 (3 days), 1 (30 days)\nsatellite:\n  (none)\n",
                "properties": {}
              }
            }
          }
        }
      },
      "description": "Defines a contract common properties"
    },
    "contractInfoCreate": {
      "description": "Defines a contract's common properties for creation",
      "required": [
        "name",
        "maxUplinkFrames",
        "maxDownlinkFrames",
        "groupId",
        "contractId",
        "pricingModel",
        "startTime",
        "userId",
        "timezone",
        "subscriptionPlan",
        "tokenDuration"
      ],
      "allOf": [
        { "$ref": "#/definitions/commonContractInfo" },
        {
          "type": "object",
          "properties": {
            "groupId": {
              "type": "string",
              "description": "ID of group associated with the contact"
            },
            "contractId": {
              "type": "string",
              "description": "The contract external ID. It's used to identify the contract in EDRs."
            },
            "userId": {
              "type": "string",
              "description": "The ID of the user who created the contract in BSS."
            },
            "orderId": {
              "type": "string",
              "description": "The order ID (hex), if any."
            },
            "orderName": {
              "type": "string",
              "description": "The order name, if any"
            },
            "pricingModel": {
              "type": "integer",
              "format": "int32",
              "description": "The pricing model used by this contract info. 1 -> Pricing model version 1. 2 -> Pricing model version 2. 3 -> Pricing model version 3.\n"
            },
            "startTime": {
              "type": "integer",
              "format": "int64",
              "description": "The start time (in milliseconds) of the contract",
              "minimum": 0
            },
            "timezone": {
              "type": "string",
              "description": "The contract timezone name as a Java TimeZone ID (\"full name\" version only, like \"America/Costa_Rica\")."
            },
            "subscriptionPlan": {
              "type": "integer",
              "format": "int32",
              "description": "The contract info subscription plan. 0 -> Free order 1 -> Pay As You Grow (PAYG) 2 -> Committed Volume Plan (CVP) 3 -> Flexible Committed Volume Plan (CVP Flex) 4 -> PACK 5 -> DevKit 6 -> Activate\n"
            },
            "tokenDuration": {
              "type": "integer",
              "format": "int32",
              "description": "The token duration in months. Must be >= 0, if 0 unlimited token duration.",
              "minimum": 0
            },
            "blacklistedTerritories": {
              "type": "array",
              "description": "The list of \"blacklisted\" territories, as an array of NIP group IDs.",
              "items": { "type": "string" }
            }
          }
        }
      ]
    },
    "contractInfo": {
      "description": "Defines all the contract properties.",
      "allOf": [
        { "$ref": "#/definitions/commonContractInfo" },
        {
          "type": "object",
          "properties": {
            "id": { "type": "string", "description": "The contract ID." },
            "contractId": {
              "type": "string",
              "description": "The contract external ID. It's used to identify the contract info in EDRs.\n"
            },
            "userId": {
              "type": "string",
              "description": "The ID of the user who created the contract in BSS."
            },
            "group": { "$ref": "#/definitions/minGroup" },
            "order": { "$ref": "#/definitions/minContractInfo" },
            "pricingModel": {
              "type": "integer",
              "format": "int32",
              "description": "The pricing model used by this contract info. - 1 -> Pricing model version 1. - 2 -> Pricing model version 2. - 3 -> Pricing model version 3.\n"
            },
            "createdBy": {
              "type": "string",
              "description": "The user id of contract's creator"
            },
            "lastEditionTime": {
              "type": "integer",
              "format": "int64",
              "description": "Creation date of this contract (timestamp in milliseconds since Unix Epoch)"
            },
            "creationTime": {
              "type": "integer",
              "format": "int64",
              "description": "Creation date of this contract (timestamp in milliseconds since Unix Epoch)"
            },
            "lastEditedBy": {
              "type": "string",
              "description": "The user id of the contract last editor"
            },
            "startTime": {
              "type": "integer",
              "format": "int64",
              "description": "The start time (in milliseconds) of the contract"
            },
            "timezone": {
              "type": "string",
              "description": "The contract timezone name as a Java TimeZone ID (\"full name\" version only, like \"America/Costa_Rica\")."
            },
            "subscriptionPlan": {
              "type": "integer",
              "format": "int32",
              "description": "The contract info subscription plan. - 0 -> Free order - 1 -> Pay As You Grow (PAYG) - 2 -> Committed Volume Plan (CVP) - 3 -> Flexible Committed Volume Plan (CVP Flex)\n"
            },
            "tokenDuration": {
              "type": "integer",
              "format": "int32",
              "description": "The token duration in months. Must be >= 0. 0 means unlimited time."
            },
            "blacklistedTerritories": {
              "type": "array",
              "description": "The list of \"blacklisted\" territories, as an array of NIP groups.",
              "items": { "$ref": "#/definitions/minGroup" }
            },
            "tokensInUse": {
              "type": "integer",
              "format": "int32",
              "description": "The number of tokens in use."
            },
            "tokensUsed": {
              "type": "integer",
              "format": "int32",
              "description": "The number of tokens used (expired or revoked)."
            }
          }
        }
      ]
    },
    "contractInfoUpdate": {
      "allOf": [
        { "$ref": "#/definitions/commonContractInfo" },
        {
          "type": "object",
          "properties": {
            "orderName": {
              "type": "string",
              "description": "The order name, if any. This field can be unset when updating."
            },
            "blacklistedTerritories": {
              "type": "array",
              "description": "The list of \"blacklisted\" territories, as an array of NIP group IDs.",
              "items": { "type": "string" }
            }
          }
        }
      ]
    },
    "actionJob": {
      "type": "object",
      "properties": {
        "jobDone": {
          "type": "boolean",
          "description": "If the job is finished or not"
        },
        "status": {
          "type": "object",
          "description": "the informations about the devices already treated",
          "properties": {
            "total": {
              "type": "integer",
              "format": "int32",
              "description": "the total number of devices given"
            },
            "nbSuccess": {
              "type": "integer",
              "format": "int32",
              "description": "the number of devices successfully changed"
            },
            "nbErrors": {
              "type": "integer",
              "format": "int32",
              "description": "the number of devices unsuccessfully changed"
            },
            "errors": {
              "type": "array",
              "description": "reasons of each errors",
              "items": { "$ref": "#/definitions/jobError" }
            }
          }
        }
      },
      "example": {
        "jobDone": true,
        "status": {
          "total": 145298,
          "nbSuccess": 145297,
          "nbErrors": 1,
          "errors": [
            {
              "entity": "00FF",
              "message": "the device doesn't exist",
              "type": 0
            }
          ]
        }
      }
    },
    "device": {
      "description": "Defines the device's properties",
      "allOf": [
        { "$ref": "#/definitions/commonDevice" },
        {
          "type": "object",
          "required": [
            "automaticRenewal",
            "comState",
            "creationTime",
            "pac",
            "state"
          ],
          "properties": {
            "satelliteCapable": {
              "type": "boolean",
              "description": "Can the device communicate using satellite communication"
            },
            "repeater": {
              "type": "boolean",
              "description": "Has the device repeater function"
            },
            "messageModulo": {
              "type": "integer",
              "format": "int32",
              "description": "The message modulo"
            },
            "deviceType": { "$ref": "#/definitions/minDeviceType" },
            "contract": { "$ref": "#/definitions/minContractInfo" },
            "group": { "$ref": "#/definitions/minGroup" },
            "modemCertificate": { "$ref": "#/definitions/certificate" },
            "prototype": {
              "type": "boolean",
              "description": "The device is a prototype"
            },
            "productCertificate": { "$ref": "#/definitions/certificate" },
            "location": { "$ref": "#/definitions/deviceLocation" },
            "lastComputedLocation": {
              "$ref": "#/definitions/lastComputedLocation"
            },
            "pac": {
              "type": "string",
              "description": "The device's PAC (Porting Access Code)"
            },
            "sequenceNumber": {
              "type": "integer",
              "format": "int32",
              "description": "The last device's sequence number.\nAbsent if the device has never communicated or if the SIGFOX message protocol is V0\n"
            },
            "trashSequenceNumber": {
              "type": "integer",
              "format": "int32",
              "description": "The last trashed device's sequence number.\nAbsent if there is no message trashed or if the SIGFOX message protocol is V0\n"
            },
            "lastCom": {
              "type": "integer",
              "format": "int64",
              "description": "The last time (in milliseconds since the Unix Epoch) the device has communicated"
            },
            "lqi": {
              "type": "integer",
              "format": "int32",
              "description": "Link Quality Indicator\n0 -> LIMIT\n1 -> AVERAGE\n2 -> GOOD\n3 -> EXCELLENT\n4 -> NA\n"
            },
            "activationTime": {
              "type": "integer",
              "format": "int64",
              "description": "The device's activation time (in milliseconds since the Unix Epoch)"
            },
            "creationTime": {
              "type": "integer",
              "format": "int64",
              "description": "The device's provisionning time (in milliseconds since the Unix Epoch)"
            },
            "state": {
              "type": "integer",
              "format": "int32",
              "description": "State of this device.\n0 -> OK\n1 -> DEAD\n2 -> OFF_CONTRACT\n3 -> DISABLED\n4 -> WARN\n5 -> DELETED\n6 -> SUSPENDED\n7 -> NOT_ACTIVABLE\n"
            },
            "comState": {
              "type": "integer",
              "format": "int32",
              "description": "Communication state of this device.\n0 -> NO\n1 -> OK\n2 -> WARN\n3 -> KO\n4 -> (na)\n5 -> NOT_SEEN\n"
            },
            "token": { "$ref": "#/definitions/token" },
            "unsubscriptionTime": {
              "type": "integer",
              "format": "int64",
              "description": "The device's unsubscription time (in milliseconds since the Unix Epoch)"
            },
            "createdBy": {
              "type": "string",
              "description": "The id of device's creator user"
            },
            "lastEditionTime": {
              "type": "integer",
              "format": "int64",
              "description": "Date of the last edition of this device (in milliseconds since the Unix Epoch)"
            },
            "lastEditedBy": {
              "type": "string",
              "description": "The id of device's last editor user"
            },
            "automaticRenewal": {
              "type": "boolean",
              "description": "Allow token renewal ?"
            },
            "automaticRenewalStatus": {
              "type": "integer",
              "format": "int32",
              "description": "Computed automatic renewal status.\n0 -> ALLOWED\n1 -> NOT_ALLOWED\n2 -> RENEWED\n3 -> ENDED\n"
            },
            "activable": {
              "type": "boolean",
              "description": "true if the device is activable and can take a token"
            },
            "actions": { "$ref": "#/definitions/actions" },
            "resources": { "$ref": "#/definitions/resources" }
          }
        }
      ]
    },
    "minDeviceType": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The device type info's identifier"
        },
        "name": {
          "type": "string",
          "description": "The device type info's name"
        },
        "actions": { "$ref": "#/definitions/actions" },
        "resources": { "$ref": "#/definitions/resources" }
      },
      "title": "Minimal Device Type Information",
      "description": "Defines a minimum contract info entity",
      "example": {
        "id": "572f1204017975032d8ec1dd",
        "name": "Device type info 1",
        "actions": ["read"],
        "resources": ["messages", "messages-oob"]
      }
    },
    "minContractInfo": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The contract info's identifier"
        },
        "name": { "type": "string", "description": "The contract info's name" },
        "actions": { "$ref": "#/definitions/actions" },
        "resources": { "$ref": "#/definitions/resources" }
      },
      "title": "Minimal Contract Information",
      "description": "Defines a minimum contract info entity",
      "example": {
        "id": "572f1204017975032d8ec1dd",
        "name": "Contract info 1",
        "actions": ["read"],
        "resources": ["devices"]
      }
    },
    "certificate": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The product certificate's identifier"
        },
        "key": {
          "type": "string",
          "description": "The product certificate's name"
        }
      },
      "description": "Defines a product or modem certificate type entity",
      "example": { "id": "53aaad5ae4b0ba69e6d561b9", "key": "P_0003_71CF_01" }
    },
    "deviceLocation": {
      "type": "object",
      "properties": {
        "lat": {
          "type": "number",
          "format": "double",
          "description": "The device's estimated latitude"
        },
        "lng": {
          "type": "number",
          "format": "double",
          "description": "The device's estimated longitude"
        }
      },
      "description": "Contains the position of the device",
      "example": { "lat": 43.456, "lng": 6.524 }
    },
    "lastComputedLocation": {
      "type": "object",
      "properties": {
        "lat": {
          "type": "number",
          "format": "double",
          "description": "The device's estimated latitude"
        },
        "lng": {
          "type": "number",
          "format": "double",
          "description": "The device's estimated longitude"
        },
        "radius": {
          "type": "integer",
          "format": "int32",
          "description": "The radius of the circle (meters)"
        },
        "sourceCode": {
          "type": "integer",
          "format": "int32",
          "description": "Define how the location has been computed:\n- 0 -> computed using RSSI and position of the station (legacy)\n- 1 -> computed using the GPS data inside the payload\n- 2 -> computed using Network location\n- 3 -> computed using PoI location\n- 4 -> computed using HD network location\n- 5 -> computed using private database location\n- 6 -> computed using WiFi location\n- 7 -> computed using Proximity location\n"
        },
        "placeIds": {
          "type": "array",
          "description": "The place ids computed by the Sigfox Geolocation service",
          "items": { "type": "string" }
        }
      },
      "description": "Contains the estimated position of the device within a circle based on the GPS data or the Sigfox Geolocation service"
    },
    "token": {
      "type": "object",
      "properties": {
        "state": {
          "type": "integer",
          "format": "int32",
          "description": "- 0 -> OK\n- 1 -> OFF_CONTRACT\n- 2 -> NA_FOR_API\n- 3 -> INVALID_TOKEN\n"
        },
        "detailMessage": {
          "type": "string",
          "description": "Token state description\n- Valid\n- Off Contract\n- Not applicable for API\n- Invalid\n"
        },
        "end": {
          "type": "integer",
          "format": "int64",
          "description": "The device's communication end time (in milliseconds since the Unix Epoch)"
        },
        "freeMessages": {
          "type": "integer",
          "format": "int32",
          "description": "The number of free messages left for this token"
        },
        "freeMessagesSent": {
          "type": "integer",
          "format": "int32",
          "description": "The number of free messages already sent for this token"
        }
      },
      "description": "Contains the token information of the device",
      "example": {
        "state": 0,
        "detailMessage": "Active",
        "end": 1503619200000,
        "unsubscriptionTime": 1503602300000,
        "freeMessages": 1,
        "freeMessagesSent": 9
      }
    },
    "availableEntitiesResponse": {
      "type": "object",
      "properties": {
        "operators": {
          "type": "array",
          "description": "Array of operators infos and their forecast radio planning infos",
          "items": {
            "type": "object",
            "properties": {
              "operatorId": {
                "type": "string",
                "description": "The identifier of the operator."
              },
              "operatorName": {
                "type": "string",
                "description": "The name of the operator."
              },
              "operatorMinDb": {
                "type": "number",
                "format": "int",
                "description": "The minimal sensitivity for the operator (in dBm)."
              },
              "operatorMaxDb": {
                "type": "number",
                "format": "int",
                "description": "The maximal sensitivity for the operator (in dBm)."
              },
              "operatorStandard": {
                "type": "number",
                "format": "int",
                "description": "The standard capability of the operator (0 for BAND800, 1 for BAND900), used to choose the device class attenuation value."
              },
              "operatorForecasts": {
                "type": "array",
                "description": "Array of all the operator forecast radio planning infos.",
                "items": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "number",
                      "format": "double",
                      "description": "The identifier of the radio planning."
                    },
                    "name": {
                      "type": "string",
                      "description": "The name of the simulation."
                    }
                  }
                }
              },
              "actions": { "$ref": "#/definitions/actions" }
            }
          }
        },
        "classes": {
          "type": "array",
          "description": "Array of device class infos.",
          "items": {
            "type": "object",
            "properties": {
              "id": {
                "type": "number",
                "format": "int",
                "description": "The Id of the device class."
              },
              "name": {
                "type": "string",
                "description": "The name of the device class."
              },
              "attenuation": {
                "type": "array",
                "description": "The mean attenuation associated for calculation (in dB).",
                "items": { "type": "number", "format": "int" }
              }
            }
          }
        },
        "actions": { "$ref": "#/definitions/actions" }
      },
      "description": "Returned data for Service Coverage Available Entities API"
    },
    "redundancyResponse": {
      "type": "object",
      "properties": {
        "redundancy": {
          "type": "number",
          "format": "int",
          "description": "The base station redundancy, 0 = none, 1 = 1 base station, 2 = 2 base stations, 3 = 3 base stations or more"
        }
      },
      "description": "Returned data for Service Coverage Redundancy API"
    },
    "globalCoverageRequest": {
      "type": "object",
      "required": ["locations"],
      "properties": {
        "locations": {
          "type": "array",
          "description": "An array of positions. Valid locations have two properties, lat and lng.",
          "items": {
            "type": "object",
            "properties": {
              "lat": {
                "type": "number",
                "format": "double",
                "description": "A latitude in degrees. Must be between -90° and 90°."
              },
              "lng": {
                "type": "number",
                "format": "double",
                "description": "A longitude in degrees. Must be between -180° and 180°."
              }
            },
            "required": ["lat", "lng"]
          }
        },
        "radius": {
          "type": "number",
          "format": "int",
          "description": "The radius of the area in which the coverage results are averaged and returned for a selected location, in meters."
        },
        "groupId": {
          "type": "string",
          "description": "The id of a group to include its operator in the global coverage, in case it is not a public operator."
        }
      },
      "description": "Defines the request to get Global Coverage"
    },
    "globalCoverageResponse": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "description": "An array containing the response for each point.",
          "items": {
            "type": "object",
            "properties": {
              "lat": {
                "type": "number",
                "format": "double",
                "description": "The latitude in degrees."
              },
              "lng": {
                "type": "number",
                "format": "double",
                "description": "The longitude in degrees."
              },
              "locationCovered": {
                "type": "boolean",
                "description": "True, if the requested location is considered covered."
              },
              "margins": {
                "type": "array",
                "description": "The margins values (dB) for redundancy level 1, 2 and 3.",
                "items": { "type": "number", "format": "int" }
              }
            }
          }
        }
      },
      "description": "Returned data for Global Coverage API",
      "example": {
        "data": [
          {
            "lat": 42.3652,
            "lng": 2.5678,
            "locationCovered": true,
            "margins": [47, 32, 17]
          },
          {
            "lat": 43.0976,
            "lng": -0.4561,
            "locationCovered": false,
            "margins": [0, 0, 0]
          }
        ]
      }
    },
    "globalCoverageBulkResponse": {
      "type": "object",
      "properties": {
        "jobDone": {
          "type": "boolean",
          "description": "If the job is completed or not"
        },
        "time": {
          "type": "integer",
          "format": "int64",
          "description": "the statistics creation time (in milliseconds since the Unix Epoch)"
        },
        "results": {
          "type": "array",
          "description": "An array containing the response for each point.",
          "items": {
            "type": "object",
            "properties": {
              "lat": {
                "type": "number",
                "format": "double",
                "description": "The latitude in degrees."
              },
              "lng": {
                "type": "number",
                "format": "double",
                "description": "The longitude in degrees."
              },
              "locationCovered": {
                "type": "boolean",
                "description": "True, if the requested location is considered covered."
              },
              "margins": {
                "type": "array",
                "description": "The margins values (dB) for redundancy level 1, 2 and 3.",
                "items": { "type": "number", "format": "int" }
              }
            }
          }
        }
      },
      "description": "Returned data for Bulk Global Coverage API",
      "example": {
        "jobDone": true,
        "time": 1487065942000,
        "results": [
          {
            "lat": 42.3652,
            "lng": 2.5678,
            "locationCovered": true,
            "margins": [47, 32, 17]
          },
          {
            "lat": 43.0976,
            "lng": -0.4561,
            "locationCovered": false,
            "margins": [0, 0, 0]
          }
        ]
      }
    },
    "certificateUpdate": {
      "type": "object",
      "properties": {
        "key": { "type": "string", "description": "The certificate name" }
      }
    },
    "singleDeviceFields": {
      "type": "object",
      "properties": {
        "activable": {
          "type": "boolean",
          "description": "true if the device is activable and can take a token. Not used if the device has already a token",
          "default": true
        },
        "automaticRenewal": {
          "type": "boolean",
          "description": "Allow token renewal ?"
        },
        "lat": {
          "type": "number",
          "format": "double",
          "description": "The device's provided latitude",
          "default": 0
        },
        "lng": {
          "type": "number",
          "format": "double",
          "description": "The device's provided longitude",
          "default": 0
        },
        "productCertificate": { "$ref": "#/definitions/certificateUpdate" },
        "prototype": {
          "type": "boolean",
          "description": "If the device is a prototype or not"
        }
      }
    },
    "deviceUpdateJob": {
      "allOf": [
        { "$ref": "#/definitions/singleDeviceFields" },
        {
          "type": "object",
          "properties": {
            "name": { "type": "string", "description": "The device's name" }
          },
          "example": {
            "name": "Device 1",
            "lat": 48.8585715,
            "lng": 2.2922923,
            "productCertificate": { "key": "P_0003_71CF_01" },
            "prototype": true,
            "automaticRenewal": true,
            "activable": false
          }
        }
      ]
    },
    "deviceCreationJob": {
      "allOf": [
        { "$ref": "#/definitions/commonDevice" },
        { "$ref": "#/definitions/singleDeviceFields" },
        {
          "type": "object",
          "required": ["deviceTypeId", "pac"],
          "properties": {
            "deviceTypeId": {
              "type": "string",
              "description": "The device type's identifier this device is affected"
            },
            "pac": {
              "type": "string",
              "description": "The device's PAC (Porting Access Code)"
            },
            "prototype": {
              "type": "boolean",
              "description": "Set to true if the device is a prototype",
              "default": false
            },
            "automaticRenewal": {
              "type": "boolean",
              "description": "Subscribtion to automatic token renewal",
              "default": true
            },
            "activable": {
              "type": "boolean",
              "description": "The device is activable and can take a token",
              "default": true
            },
            "lat": {
              "type": "number",
              "format": "double",
              "description": "The device's provided latitude",
              "default": 0
            },
            "lng": {
              "type": "number",
              "format": "double",
              "description": "The device's provided longitude",
              "default": 0
            }
          },
          "example": {
            "id": "00FF",
            "name": "Device 1",
            "pac": "585CB3B42AC98BD4",
            "deviceTypeId": "57309548171c857460043085",
            "productCertificate": { "key": "P_0003_71CF_01" },
            "prototype": true,
            "automaticRenewal": true,
            "activable": false,
            "lat": 48.8585715,
            "lng": 2.2922923
          }
        }
      ]
    },
    "bulkDeviceAsynchronousRequest": {
      "type": "object",
      "required": ["deviceTypeId"],
      "properties": {
        "deviceTypeId": {
          "type": "string",
          "description": "The identifier of the device type under which the new devices will be created"
        },
        "productCertificate": { "$ref": "#/definitions/certificateUpdate" },
        "prototype": {
          "type": "boolean",
          "description": "Value describing if the devices are prototypes",
          "default": false
        },
        "prefix": {
          "type": "string",
          "description": "Prefix to used in device name",
          "maxLength": 40
        },
        "data": {
          "type": "array",
          "items": {
            "type": "object",
            "description": "Describes the individual fields of devices created in an ansynchronous bulk request",
            "properties": {
              "id": {
                "type": "string",
                "description": "The device's identifier (hexadecimal format)"
              },
              "pac": {
                "type": "string",
                "description": "The device's PAC (Porting Access Code)"
              },
              "name": { "type": "string", "description": "The device's name" },
              "lat": {
                "type": "number",
                "format": "double",
                "description": "The device's provided latitude",
                "default": 0
              },
              "lng": {
                "type": "number",
                "format": "double",
                "description": "The device's provided longitude",
                "default": 0
              },
              "automaticRenewal": {
                "type": "boolean",
                "description": "Value describing if the device is permitted to automatically renew its token",
                "default": true
              },
              "activable": {
                "type": "boolean",
                "description": "Value describing if the devices are activable and can recover a token",
                "default": true
              }
            },
            "required": ["id"]
          }
        }
      },
      "description": "Defines the the common information shared by the devices created in an ansychronous bulk request"
    },
    "asynchronousDeviceCreationJob": {
      "allOf": [
        { "type": "object" },
        { "$ref": "#/definitions/bulkDeviceAsynchronousRequest" }
      ]
    },
    "deviceEditionBulk": {
      "allOf": [
        { "$ref": "#/definitions/singleDeviceFields" },
        {
          "type": "object",
          "required": ["id"],
          "properties": {
            "id": {
              "type": "string",
              "description": "The device's identifier (hexadecimal format)"
            },
            "name": {
              "type": "string",
              "description": "The name of the device"
            }
          },
          "example": {
            "id": "00FF",
            "productCertificate": { "key": "P_1234_FE39_01" },
            "name": "Device 1",
            "lat": 48.8585715,
            "lng": 2.2922923,
            "automaticRenewal": true,
            "activable": true
          }
        }
      ]
    },
    "asynchronousDeviceEditionJob": {
      "type": "object",
      "required": ["data"],
      "properties": {
        "data": {
          "type": "array",
          "items": { "$ref": "#/definitions/deviceEditionBulk" }
        }
      },
      "example": {
        "data": [
          {
            "id": "00FF",
            "productCertificate": { "key": "P_1234_FE39_01" },
            "name": "Device 1",
            "lat": 48.8585715,
            "lng": 2.2922923,
            "automaticRenewal": true,
            "payloadEncryption": true,
            "activable": true
          }
        ]
      }
    },
    "registrationJobStatus": {
      "type": "object",
      "properties": {
        "jobDone": {
          "type": "boolean",
          "description": "If the job is finished or not"
        },
        "total": {
          "type": "integer",
          "format": "int32",
          "description": "The total number of devices given to be created"
        },
        "status": {
          "type": "object",
          "description": "The information about the devices already processed",
          "properties": {
            "errors": {
              "type": "array",
              "description": "Detailed information about each error",
              "items": { "$ref": "#/definitions/jobError" }
            },
            "success": {
              "type": "integer",
              "format": "int32",
              "description": "The number of devices successfully created, edited or transferred"
            }
          }
        }
      },
      "example": {
        "jobDone": true,
        "total": 145298,
        "status": {
          "errors": [
            {
              "entity": "00FF",
              "message": "Unauthorized modification",
              "type": 0
            },
            { "entity": "00FE", "message": "Unknown device", "type": 0 }
          ],
          "success": 145296
        }
      }
    },
    "replaceResponse": {
      "type": "object",
      "properties": {
        "total": {
          "type": "integer",
          "format": "int32",
          "description": "The total number of devices to be replaced"
        },
        "status": {
          "type": "object",
          "description": "The information about the devices already processed",
          "properties": {
            "errors": {
              "type": "array",
              "description": "reasons of each errors",
              "items": { "$ref": "#/definitions/jobError" }
            },
            "success": {
              "type": "integer",
              "format": "int32",
              "description": "The number of devices successfully replaced"
            }
          }
        }
      }
    },
    "deviceErrorMessages": {
      "type": "object",
      "properties": {
        "deviceId": { "type": "string", "description": "Device identifier" },
        "deviceTypeId": {
          "type": "string",
          "description": "Device type identifier"
        },
        "time": {
          "type": "integer",
          "format": "int64",
          "description": "Timestamp of the message (in milliseconds since the Unix Epoch)"
        },
        "data": { "type": "string", "description": "Data message" },
        "status": {
          "type": "string",
          "description": "Contains the callback response status."
        },
        "message": {
          "type": "string",
          "description": "Contains additional information on the response."
        },
        "callback": { "$ref": "#/definitions/callbackMedium" },
        "parameters": {
          "type": "object",
          "description": "All the parameters which have served to build the callback, see callback doc for an exhaustive list.",
          "properties": {}
        }
      },
      "example": {
        "deviceId": "1",
        "deviceTypeId": "5964a10570c85b51ccbaf497",
        "time": 1487065942000,
        "data": "DEADBEEF",
        "status": "403",
        "messages": "Forbidden",
        "callback": { "subject": "email title", "message": "email body" },
        "parameters": { "key1": "value1", "key2": "value2" }
      }
    },
    "tokenUnsubscribe": {
      "type": "object",
      "properties": {
        "unsubscriptionTime": {
          "type": "integer",
          "format": "int64",
          "description": "Timestamp of token unsubscription date (in milliseconds since the Unix Epoch)"
        }
      },
      "example": { "unsubscriptionTime": 1487065942000 }
    },
    "commonCertificate": {
      "type": "object",
      "required": ["name"],
      "properties": {
        "id": {
          "type": "string",
          "description": "The certificate's identifier"
        },
        "name": { "type": "string", "description": "The certificate's name" },
        "status": {
          "type": "integer",
          "format": "int32",
          "description": "The certificate's status code (0 -> ongoing, 1 -> finalized)"
        },
        "key": { "type": "string", "description": "The certificate's key" },
        "manufacturer": { "$ref": "#/definitions/minGroup" },
        "version": {
          "type": "string",
          "description": "The certificate's version"
        },
        "description": {
          "type": "string",
          "description": "The certificate description"
        }
      },
      "description": "Defines the common properties of a certificate"
    },
    "radioConfiguration": {
      "type": "object",
      "required": ["id"],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "The radio configuration identifier\n  - 0 -> RC1\n  - 1 -> RC2\n  - 2 -> RC3\n  - 3 -> RC101\n  - 4 -> RC4\n  - 5 -> RC5\n  - 6 -> RC6\n  - 7 -> RC7\n"
        }
      },
      "description": "Defines the properties of certificate radio configurations"
    },
    "productCertificateRadioConfiguration": {
      "description": "Defines the properties of a product certificate radio configuration",
      "allOf": [
        { "$ref": "#/definitions/radioConfiguration" },
        {
          "type": "object",
          "properties": {
            "uplinkClass": {
              "type": "integer",
              "format": "int32",
              "description": "The device uplink class\n  - 0 -> U0\n  - 1 -> U1\n  - 2 -> U2\n  - 3 -> U3\n  - 4 -> D0\n  - 5 -> D1\n  - 6 -> D2\n  - 7 -> D3\n"
            },
            "maxEirp": {
              "type": "number",
              "format": "double",
              "description": "Maximum radiated power EIRP (dBm)"
            }
          }
        }
      ]
    },
    "modemCertificateRadioConfiguration": {
      "description": "Defines the properties of a product certificate radio configuration",
      "allOf": [
        { "$ref": "#/definitions/radioConfiguration" },
        {
          "type": "object",
          "properties": {
            "outputPower": {
              "type": "number",
              "format": "double",
              "description": "Output conducted power (dBm)"
            },
            "balancedLinkBudget": {
              "type": "boolean",
              "description": "Balanced link budget"
            }
          }
        }
      ]
    },
    "radioCertificate": {
      "allOf": [
        { "$ref": "#/definitions/commonCertificate" },
        {
          "type": "object",
          "properties": {
            "modes": {
              "type": "array",
              "description": "The certificate's mode code (0 -> Uplink only, 1 -> Uplink and downlink)",
              "items": { "type": "integer", "format": "int32" }
            },
            "inputSensitivity": {
              "type": "integer",
              "format": "int32",
              "description": "The certificate's input sensitivity"
            }
          }
        }
      ]
    },
    "modemCertificate": {
      "allOf": [
        { "$ref": "#/definitions/radioCertificate" },
        {
          "type": "object",
          "properties": {
            "radioConfigurations": {
              "type": "array",
              "description": "Radio configurations available for this certificate\n",
              "items": {
                "$ref": "#/definitions/modemCertificateRadioConfiguration"
              }
            },
            "repeaterFunction": {
              "type": "boolean",
              "description": "The modem certificate has repeater function or not"
            }
          }
        }
      ]
    },
    "productCertificate": {
      "allOf": [
        { "$ref": "#/definitions/radioCertificate" },
        {
          "type": "object",
          "properties": {
            "radioConfigurations": {
              "type": "array",
              "description": "Radio configurations available for this certificate\n",
              "items": {
                "$ref": "#/definitions/productCertificateRadioConfiguration"
              }
            },
            "devKit": {
              "type": "boolean",
              "description": "The product certificate has repeater function or not"
            }
          }
        }
      ]
    },
    "productCertificateWithPacResponse": {
      "allOf": [
        { "$ref": "#/definitions/commonCertificate" },
        {
          "type": "object",
          "properties": {
            "externalId": {
              "type": "string",
              "description": "External Id of the certificate"
            },
            "certificateCode": {
              "type": "integer",
              "description": "Certificate's code"
            },
            "certificateIndex": {
              "type": "integer",
              "description": "Certificate's index"
            },
            "qualificationTime": {
              "type": "integer",
              "description": "Date of qualification (in milliseconds since the Unix Epoch)"
            },
            "reportNumber": {
              "type": "string",
              "description": "Report number"
            },
            "inputSensitivity": {
              "type": "integer",
              "description": "Input sensitivity"
            },
            "encryptionPayload": {
              "type": "boolean",
              "description": "true if the payload will be encrypted"
            },
            "devKit": { "type": "boolean", "description": "DevKit Flag" },
            "modes": {
              "type": "array",
              "description": "List of modes of the certificate [1=DOWNLINK, 2=MONARCH]",
              "items": { "type": "integer" }
            },
            "standards": {
              "type": "array",
              "items": { "$ref": "#/definitions/radioConfiguration" }
            },
            "standardCfgs": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/productCertificateRadioConfiguration"
              }
            }
          }
        }
      ]
    },
    "asynchronousDeviceTransferJob": {
      "type": "object",
      "required": ["deviceTypeId"],
      "properties": {
        "deviceTypeId": {
          "type": "string",
          "description": "The device type where new devices will be transfered"
        },
        "data": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "The device's identifier (hexadecimal format)"
              },
              "keepHistory": {
                "type": "boolean",
                "description": "Whether to keep the device history or not",
                "default": false
              },
              "activable": {
                "type": "boolean",
                "description": "True if the device is activable and can take a token. Not used if the device has already a token and if the transferred is intra-order.",
                "default": true
              }
            },
            "required": ["id"]
          }
        }
      },
      "example": {
        "deviceTypeId": "5a5896f93007ab520cb54108",
        "data": [
          { "id": 1, "keepHistory": true, "activable": true },
          { "id": "AB45F", "activable": false },
          { "id": "F5E8945", "keepHistory": false },
          { "id": "F59878S" }
        ]
      }
    },
    "asynchronousDeviceReplacementJob": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "deviceId": {
                "type": "string",
                "description": "The device's identifier to replace (hexadecimal format)"
              },
              "targetDeviceId": {
                "type": "string",
                "description": "The target device's identifier (hexadecimal format)"
              }
            }
          }
        }
      },
      "example": {
        "data": [
          { "deviceId": "54ABC", "targetDeviceId": "8562D" },
          { "deviceId": "54ABD", "targetDeviceId": "8563E" },
          { "deviceId": "54ABE", "targetDeviceId": "8564F" }
        ]
      }
    },
    "deviceActionJob": {
      "type": "object",
      "required": ["data"],
      "properties": {
        "data": { "type": "array", "items": { "type": "string" } }
      },
      "example": { "data": ["007B480F", "007B4810", "007B4811"] }
    },
    "bulkUnsubscribe": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "The device's identifier to unsubscribe (hexadecimal format)"
              },
              "unsubscriptionTime": {
                "type": "integer",
                "format": "int64",
                "description": "the unsubscription time (in milliseconds since the Unix Epoch)"
              }
            }
          }
        }
      },
      "example": {
        "data": [{ "id": "54ABC", "unsubscriptionTime": 1534165000000 }]
      }
    },
    "deviceConsumption": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "example": "1005550_2017",
          "description": "Identifier of the device consumption"
        },
        "deviceConsumptions": {
          "type": "array",
          "description": "Consumption of a device",
          "items": {
            "type": "object",
            "properties": {
              "frameCount": {
                "type": "integer",
                "example": 19,
                "description": "Number of uplink messages this day"
              },
              "downlinkFrameCount": {
                "type": "integer",
                "example": 4,
                "description": "Number of downlink messages this day"
              },
              "roamingFrameCount": {
                "type": "integer",
                "example": 3,
                "description": "Number of uplink roaming messages this day"
              },
              "roamingDownlinkFrameCount": {
                "type": "integer",
                "example": 1,
                "description": "Number of downlink roaming messages this day"
              },
              "roamingDetails": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "territory": {
                      "type": "string",
                      "example": "FRA",
                      "description": "Country of the Operator (3 letters from the ISO 3166-1 alpha-3 country code)."
                    },
                    "operator": {
                      "type": "string",
                      "example": "SIGFOX_France",
                      "description": "Name of the Operator"
                    },
                    "territoryRoamingFrameCount": {
                      "type": "integer",
                      "example": 3,
                      "description": "Number of uplink roaming messages this day for this operator"
                    },
                    "territoryRoamingDownlinkFrameCount": {
                      "type": "integer",
                      "example": 1,
                      "description": "Number of downlink roaming messages this day for this operator"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "description": "The consumption for this device"
    },
    "deviceLocation_2": {
      "allOf": [
        { "$ref": "#/definitions/computedLocation" },
        {
          "type": "object",
          "properties": {
            "time": {
              "type": "integer",
              "format": "int64",
              "description": "Timestamp of the message (in milliseconds since the Unix Epoch)"
            },
            "valid": {
              "type": "boolean",
              "description": "true, if a valid estimation for this message is available (GPS or RSSI)"
            }
          }
        }
      ]
    },
    "callbackMedium": {
      "allOf": [
        { "$ref": "#/definitions/callbackEmail" },
        { "$ref": "#/definitions/callbackHTTP" }
      ],
      "title": "Callback"
    },
    "callbackEmail": {
      "type": "object",
      "properties": {
        "subject": {
          "type": "string",
          "description": "The subject of the email to be sent"
        },
        "message": {
          "type": "string",
          "description": "The body of the email to be sent"
        }
      },
      "description": "Callback of type Email"
    },
    "callbackHTTP": {
      "type": "object",
      "properties": {
        "url": {
          "type": "string",
          "description": "The URL called when this message has been processed"
        },
        "headers": {
          "type": "object",
          "description": "The headers sent in the request. If no header is defined, this field is not present.",
          "properties": {}
        },
        "body": {
          "type": "string",
          "description": "The body of the request, if any. It is only present if the request method is POST."
        },
        "contentType": {
          "type": "string",
          "description": "The content type of the request. It is only present if the request is POST."
        },
        "method": {
          "type": "string",
          "description": "The HTTP method, currently GET, POST or PUT."
        },
        "error": {
          "type": "string",
          "description": "If there was an error, for instance if the body is JSON and could not be evaluated."
        }
      },
      "description": "Callback of type HTTP"
    },
    "geolocPayloadConfig": {
      "type": "object",
      "properties": {
        "id": { "type": "string", "description": "Geolocation payload id" },
        "name": { "type": "string", "description": "Geolocation payload name" }
      },
      "description": "When the payload display type is set to Geolocation for a Device Type, the geolocationPayloadConfig represents the format of the payload that the devices will use. Only recognized formats will be displayed. If you have a device with a GPS capable modem, please contact your device/modem manufacturer to get the suitable GeolocationPayloadConfig if any.",
      "example": {
        "id": "52243fa7e4b00e1b8587bd5a",
        "name": "Telecom Design [Root]"
      }
    },
    "baseDeviceType": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The device type's name",
          "maxLength": 100
        },
        "description": {
          "type": "string",
          "description": "The device type's description",
          "maxLength": 300
        },
        "downlinkMode": {
          "type": "integer",
          "format": "int32",
          "description": "The downlink mode to use for the devices of this device type\n- 0 -> DIRECT\n- 1 -> CALLBACK\n- 2 -> NONE\n- 3 -> MANAGED\n"
        },
        "downlinkDataString": {
          "type": "string",
          "description": "Downlink data to be sent to the devices of this device type if the downlinkMode is equal to 0.\nIt must be an 8 byte length message given in hexadecimal string format.\n"
        },
        "payloadType": {
          "type": "integer",
          "format": "int32",
          "description": "The payload type\n- 2 -> Regular (raw payload)\n- 3 -> Custom grammar\n- 4 -> Geolocation\n- 5 -> Display in ASCII\n- 6 -> Radio planning frame\n- 9 -> Sensitv2\n"
        },
        "payloadConfig": {
          "type": "string",
          "description": "The payload configuration. Required if the payload type is Custom, else ignored."
        },
        "keepAlive": {
          "type": "integer",
          "format": "int64",
          "description": "Keep alive period in seconds (0 to not keep alive else 1800 second minimum)",
          "minimum": 0
        },
        "alertEmail": {
          "type": "string",
          "format": "email",
          "description": "Email address to contact in case of problems occurring while executing a callback. This field can be unset when updating.",
          "maxLength": 250
        },
        "automaticRenewal": {
          "type": "boolean",
          "description": "Allows the automatic renewal of devices attached to this device type"
        }
      }
    },
    "deviceType": {
      "description": "Defines the device type's properties",
      "allOf": [
        { "$ref": "#/definitions/baseDeviceType" },
        {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "The device type's identifier"
            },
            "description": {
              "type": "string",
              "description": "The device type's description",
              "maxLength": 300
            },
            "downlinkMode": {
              "type": "integer",
              "format": "int32",
              "description": "The downlink mode to use for the devices of this device type.\n0 -> DIRECT\n1 -> CALLBACK\n2 -> NONE\n3 -> MANAGED\n"
            },
            "downlinkDataString": {
              "type": "string",
              "description": "Downlink data to be sent to the devices of this device type if downlinkMode is equal to 0.\nIt must be an 8 byte length message given in hexadecimal string format.\n"
            },
            "payloadType": {
              "type": "integer",
              "format": "int32",
              "description": "The payload type\n2 -> Regular (raw payload)\n3 -> Custom grammar\n4 -> Geolocation\n5 -> Display in ASCII\n6 -> Radio planning frame\n9 -> Sensitv2\n"
            },
            "payloadConfig": {
              "type": "string",
              "description": "The payload configuration. Required if the payload type is Custom, else ignored."
            },
            "group": { "$ref": "#/definitions/minGroup" },
            "contract": { "$ref": "#/definitions/minContractInfo" },
            "contracts": {
              "type": "array",
              "description": "The list of the contracts associated with the device type",
              "items": { "$ref": "#/definitions/minContractInfo" }
            },
            "detachedContracts": {
              "type": "array",
              "description": "The list of the contracts that were associated with the device type at some point, but are not anymore.",
              "items": { "$ref": "#/definitions/minContractInfo" }
            },
            "geolocPayloadConfig": {
              "$ref": "#/definitions/geolocPayloadConfig"
            },
            "creationTime": {
              "type": "integer",
              "format": "int64",
              "description": "Date of the creation of this device type (in milliseconds)"
            },
            "createdBy": {
              "type": "string",
              "description": "Identifier of the user who created this device type"
            },
            "lastEditionTime": {
              "type": "integer",
              "format": "int64",
              "description": "Date of the last edition of this device type (in milliseconds)"
            },
            "lastEditedBy": {
              "type": "string",
              "description": "Identifier of the user who last edited this device type"
            },
            "automaticRenewal": {
              "type": "boolean",
              "description": "Allows the automatic renewal of devices attached to this device type"
            }
          }
        }
      ]
    },
    "deviceTypeUpdate": {
      "description": "Defines the device type's properties",
      "allOf": [
        { "$ref": "#/definitions/baseDeviceType" },
        {
          "type": "object",
          "properties": {
            "payloadType": {
              "type": "integer",
              "format": "int32",
              "description": "The payload type\n2 -> Regular (raw payload)\n3 -> Custom grammar\n4 -> Geolocation\n5 -> Display in ASCII\n6 -> Radio planning frame\n9 -> Sensitv2\n"
            },
            "payloadConfig": {
              "type": "string",
              "description": "The payload configuration. Required if the payload type is Custom, else ignored."
            },
            "downlinkMode": {
              "type": "integer",
              "format": "int32",
              "description": "The downlink mode to use for the devices of this device type.\n0 -> DIRECT\n1 -> CALLBACK\n2 -> NONE\n3 -> MANAGED\n"
            },
            "downlinkDataString": {
              "type": "string",
              "description": "Downlink data to be sent to the devices of this device type if downlinkMode is equal to 0.\nIt must be an 8 byte length message given in hexadecimal string format.\n"
            },
            "description": {
              "type": "string",
              "description": "The device types's description"
            },
            "contractId": {
              "type": "string",
              "description": "The device type's contract identifier (must be on the same group than the device type)"
            },
            "contracts": {
              "type": "array",
              "description": "The device type's contract identifiers (must be on the same group than the device type)",
              "items": { "$ref": "#/definitions/contractId" }
            },
            "geolocPayloadConfigId": {
              "type": "string",
              "description": "The geoloc payload configuration identifier. Required if the payload type is Geolocation, else ignored."
            },
            "automaticRenewal": {
              "type": "boolean",
              "description": "Allows the automatic renewal of devices attached to this device type"
            }
          },
          "example": {
            "keepAlive": 12000,
            "payloadType": 3,
            "name": "MyNewName",
            "payloadConfig": "Device_Type::uint:8 Firmware_Version_Battery_status_byte::uint:8 Voltage_Value::uint:16:little-endian",
            "downlinkMode": 0,
            "downlinkDataString": "eeeeeeeeeeeeeeee",
            "automaticRenewal": true
          }
        }
      ]
    },
    "contractId": {
      "type": "object",
      "required": ["id"],
      "properties": {
        "id": { "type": "string", "description": "The contract's id" }
      },
      "description": "Contract's id"
    },
    "deviceTypeCreate": {
      "description": "Defines the device type's properties that can or lust be be included during creation",
      "required": ["groupId", "contracts", "geolocPayloadConfigId", "name"],
      "allOf": [
        { "$ref": "#/definitions/baseDeviceType" },
        {
          "type": "object",
          "required": ["contracts", "groupId"],
          "properties": {
            "groupId": {
              "type": "string",
              "description": "The device type's group identifier"
            },
            "contractId": {
              "type": "string",
              "description": "The device type's contract identifier"
            },
            "contracts": {
              "type": "array",
              "description": "The device type's contract identifiers",
              "items": { "$ref": "#/definitions/contractId" }
            },
            "geolocPayloadConfigId": {
              "type": "string",
              "description": "The geoloc payload configuration identifier. Required if the payload type is Geolocation, else ignored."
            }
          }
        }
      ]
    },
    "errorMessages": {
      "type": "object",
      "properties": {
        "deviceId": {
          "type": "string",
          "example": "87535",
          "description": "Device identifier"
        },
        "deviceTypeId": {
          "type": "string",
          "example": "5469f94c9336951d599dcc81",
          "description": "Device type identifier"
        },
        "time": {
          "type": "integer",
          "format": "int64",
          "example": 1521736736,
          "description": "Timestamp of the message (posix format)"
        },
        "data": {
          "type": "string",
          "example": "1767cc74f6",
          "description": "Data message"
        },
        "snr": {
          "type": "string",
          "example": "26.1",
          "description": "The SNR of the messages received by the network so far."
        },
        "status": {
          "type": "string",
          "description": "Contains the callback response status."
        },
        "message": {
          "type": "string",
          "example": "additional information",
          "description": "Contains additional information on the response."
        },
        "callback": { "$ref": "#/definitions/callbackMedium" },
        "parameters": {
          "type": "object",
          "description": "All the parameters which have served to build the callback, see callback definitions for an exhaustive list.",
          "properties": {}
        }
      }
    },
    "callback": {
      "type": "object",
      "discriminator": "channel",
      "properties": {
        "id": { "type": "string", "description": "The callback's identifier" },
        "channel": {
          "type": "string",
          "example": "URL",
          "description": "The callback's channel.\n- URL\n- BATCH_URL\n- EMAIL\n"
        },
        "callbackType": {
          "type": "integer",
          "format": "int32",
          "example": 0,
          "description": "The callback's type.\n- 0 -> DATA callback delivering uplink messages to a customer platform.\n- 1 -> SERVICE callback to enable additional services (see subtypes).\n- 2 -> ERROR callback to ease troubleshooting in case of communication failure.\n"
        },
        "callbackSubtype": {
          "type": "integer",
          "format": "int32",
          "example": 2,
          "description": "The callback's subtype. The subtype must be valid against its type.\n- 0 -> STATUS callback sending information about the status of a device (available for SERVICE callbacks)\n- 1 -> GEOLOC callback is deprecated and can no be longer be created or edited. This callback is in a read only state to allow for migration to a DATA_ADVANCED callback\n- 2 -> UPLINK callback for an uplink message (available for DATA callbacks)\n- 3 -> BIDIR callback for a bidirectional message (available for DATA callbacks)\n- 4 -> ACKNOWLEDGE callback sent on a downlink acknowledged message (available for SERVICE callbacks)\n- 5 -> REPEATER callback triggered when a repeater sends an OOB (available for SERVICE callbacks)\n- 6 -> DATA_ADVANCED callback sent on a message that can be geolocated (available for SERVICE callbacks)\n"
        },
        "payloadConfig": {
          "type": "string",
          "example": "int1::uint:8 int2::uint:8",
          "description": "The custom payload configuration. Only for DATA callbacks. This field can be unset when updating."
        },
        "enabled": {
          "type": "boolean",
          "example": true,
          "description": "True to enable the callback, otherwise false"
        },
        "dead": {
          "type": "boolean",
          "example": false,
          "description": "True if last use of the callback fails, otherwise false"
        }
      },
      "description": "Common information about Callback template"
    },
    "urlCallback": {
      "description": "Defines the properties needed to create a url callback",
      "allOf": [
        { "$ref": "#/definitions/callback" },
        {
          "type": "object",
          "properties": {
            "url": {
              "type": "string",
              "example": "http://myserver.com/sigfox/callback",
              "description": "The callback's url"
            },
            "httpMethod": {
              "type": "string",
              "example": "GET",
              "description": "The http method used to send a callback",
              "enum": ["GET", "PUT", "POST"]
            },
            "downlinkHook": {
              "type": "boolean",
              "example": false,
              "description": "True if this callback is used for downlink, else false."
            },
            "headers": {
              "type": "object",
              "example": { "key1": "value1", "key2": "value2" },
              "description": "The headers of the http request to send, as an object with key:value. This field can be unset when updating.",
              "properties": {}
            },
            "sendSni": {
              "type": "boolean",
              "example": true,
              "description": "Send SNI (Server Name Indication) for SSL/TLS connections. Used by BATCH_URL and URL callbacks (optional)."
            },
            "bodyTemplate": {
              "type": "string",
              "example": "",
              "description": "The body template of the request. Only if httpMethpd is set to POST or PUT. It can contain predefined and custom variables. Mandatory for URL callbacks. This field can be unset when updating."
            },
            "contentType": {
              "type": "string",
              "example": "application/x-www-form-urlencoded",
              "description": "The body media type of the request, only if httpMethpd is set to POST or PUT. This field can be unset when updating."
            }
          }
        }
      ]
    },
    "batchUrlCallback": {
      "description": "Defines the properties needed to create a batch url callback",
      "allOf": [
        { "$ref": "#/definitions/callback" },
        {
          "type": "object",
          "properties": {
            "url": { "type": "string", "description": "The callback's url" },
            "httpMethod": {
              "type": "string",
              "example": "GET",
              "description": "The http method used to send a callback",
              "enum": ["GET", "PUT", "POST"]
            },
            "linePattern": {
              "type": "string",
              "description": "The line pattern representing a message."
            }
          }
        }
      ]
    },
    "emailCallback": {
      "description": "Defines the properties needed to create a batch url callback",
      "allOf": [
        { "$ref": "#/definitions/callback" },
        {
          "type": "object",
          "properties": {
            "subject": {
              "type": "string",
              "description": "The subject of the email."
            },
            "recipient": {
              "type": "string",
              "description": "The recipient of the email."
            },
            "message": {
              "type": "string",
              "description": "the content of the message."
            }
          }
        }
      ]
    },
    "createCallback": {
      "type": "object",
      "required": ["callbackSubtype", "callbackType", "channel", "enabled"],
      "discriminator": "channel",
      "properties": {
        "channel": {
          "type": "string",
          "example": "URL",
          "description": "The callback's channel.\n- URL\n- BATCH_URL\n- EMAIL\n"
        },
        "callbackType": {
          "type": "integer",
          "format": "int32",
          "example": 0,
          "description": "The callback's type.\n- 0 -> DATA callback delivering uplink messages to a customer platform.\n- 1 -> SERVICE callback to enable additional services (see subtypes).\n- 2 -> ERROR callback to ease troubleshooting in case of communication failure.\n"
        },
        "callbackSubtype": {
          "type": "integer",
          "format": "int32",
          "example": 2,
          "description": "The callback's subtype. The subtype must be valid against its type.\n- 0 -> STATUS callback sending information about the status of a device (available for SERVICE callbacks)\n- 1 -> GEOLOC callback is deprecated and can no be longer be created or edited. This callback is in a read only state to allow for migration to a DATA_ADVANCED callback\n- 2 -> UPLINK callback for an uplink message (available for DATA callbacks)\n- 3 -> BIDIR callback for a bidirectional message (available for DATA callbacks)\n- 4 -> ACKNOWLEDGE callback sent on a downlink acknowledged message (available for SERVICE callbacks)\n- 5 -> REPEATER callback triggered when a repeater sends an OOB (available for SERVICE callbacks)\n- 6 -> DATA_ADVANCED callback sent on a message that can be geolocated (available for SERVICE callbacks)\n"
        },
        "payloadConfig": {
          "type": "string",
          "example": "int1::uint:8 int2::uint:8",
          "description": "The custom payload configuration. Only for DATA and DATA_ADVANCED callbacks. This field can be unset when updating."
        },
        "enabled": {
          "type": "boolean",
          "example": true,
          "description": "True to enable the callback, otherwise false"
        }
      },
      "description": "Common information about Callback template"
    },
    "createUrlCallback": {
      "description": "Defines the properties needed to create a url callback",
      "required": ["url", "httpMethod"],
      "allOf": [
        { "$ref": "#/definitions/createCallback" },
        {
          "type": "object",
          "properties": {
            "url": {
              "type": "string",
              "example": "http://myserver.com/sigfox/callback",
              "description": "The callback's url"
            },
            "httpMethod": {
              "type": "string",
              "example": "GET",
              "description": "The http method used to send a callback",
              "enum": ["GET", "PUT", "POST"]
            },
            "headers": {
              "type": "object",
              "example": { "key1": "value1", "key2": "value2" },
              "description": "The headers of the http request to send, as an object with key:value. This field can be unset when updating.",
              "properties": {}
            },
            "sendSni": {
              "type": "boolean",
              "example": true,
              "description": "Send SNI (Server Name Indication) for SSL/TLS connections. Used by BATCH_URL and URL callbacks (optional)."
            },
            "bodyTemplate": {
              "type": "string",
              "example": "",
              "description": "The body template of the request. Only if httpMethpd is set to POST or PUT. It can contain predefined and custom variables. Mandatory for URL callbacks. This field can be unset when updating."
            },
            "contentType": {
              "type": "string",
              "example": "application/x-www-form-urlencoded",
              "description": "The body media type of the request, only if httpMethpd is set to POST or PUT. This field can be unset when updating."
            }
          }
        }
      ]
    },
    "createBatchUrlCallback": {
      "description": "Defines the properties needed to create a batch url callback",
      "required": ["url", "httpMethod"],
      "allOf": [
        { "$ref": "#/definitions/createCallback" },
        {
          "type": "object",
          "properties": {
            "url": { "type": "string", "description": "The callback's url" },
            "httpMethod": {
              "type": "string",
              "example": "GET",
              "description": "The http method used to send a callback",
              "enum": ["GET", "PUT", "POST"]
            },
            "linePattern": {
              "type": "string",
              "description": "The line pattern representing a message."
            }
          }
        }
      ]
    },
    "createEmailCallback": {
      "description": "Defines the properties needed to create a batch url callback",
      "required": ["recipient"],
      "allOf": [
        { "$ref": "#/definitions/createCallback" },
        {
          "type": "object",
          "properties": {
            "subject": {
              "type": "string",
              "description": "The subject of the email."
            },
            "recipient": {
              "type": "string",
              "description": "The recipient of the email."
            },
            "message": {
              "type": "string",
              "description": "the content of the message."
            }
          }
        }
      ]
    },
    "updateCallback": {
      "type": "object",
      "discriminator": "channel",
      "properties": {
        "channel": {
          "type": "string",
          "example": "URL",
          "description": "The callback's channel.\n- URL\n- BATCH_URL\n- EMAIL\n"
        },
        "callbackType": {
          "type": "integer",
          "format": "int32",
          "example": 0,
          "description": "The callback's type.\n- 0 -> DATA callback delivering uplink messages to a customer platform.\n- 1 -> SERVICE callback to enable additional services (see subtypes).\n- 2 -> ERROR callback to ease troubleshooting in case of communication failure.\n"
        },
        "callbackSubtype": {
          "type": "integer",
          "format": "int32",
          "example": 2,
          "description": "The callback's subtype. The subtype must be valid against its type.\n- 0 -> STATUS callback sending information about the status of a device (available for SERVICE callbacks)\n- 1 -> GEOLOC callback is deprecated and can no be longer be created or edited. This callback is in a read only state to allow for migration to a DATA_ADVANCED callback\n- 2 -> UPLINK callback for an uplink message (available for DATA callbacks)\n- 3 -> BIDIR callback for a bidirectional message (available for DATA callbacks)\n- 4 -> ACKNOWLEDGE callback sent on a downlink acknowledged message (available for SERVICE callbacks)\n- 5 -> REPEATER callback triggered when a repeater sends an OOB (available for SERVICE callbacks)\n- 6 -> DATA_ADVANCED callback sent on a message that can be geolocated (available for SERVICE callbacks)\n"
        },
        "payloadConfig": {
          "type": "string",
          "example": "int1::uint:8 int2::uint:8",
          "description": "The custom payload configuration. Only for DATA callbacks. This field can be unset when updating."
        },
        "enabled": {
          "type": "boolean",
          "example": true,
          "description": "True to enable the callback, otherwise false"
        }
      },
      "description": "Common information about Callback template"
    },
    "updateUrlCallback": {
      "description": "Defines the properties needed to create a url callback",
      "allOf": [
        { "$ref": "#/definitions/updateCallback" },
        {
          "type": "object",
          "properties": {
            "url": {
              "type": "string",
              "example": "http://myserver.com/sigfox/callback",
              "description": "The callback's url"
            },
            "httpMethod": {
              "type": "string",
              "example": "GET",
              "description": "The http method used to send a callback",
              "enum": ["GET", "PUT", "POST"]
            },
            "headers": {
              "type": "object",
              "example": { "key1": "value1", "key2": "value2" },
              "description": "The headers of the http request to send, as an object with key:value. This field can be unset when updating.",
              "properties": {}
            },
            "sendSni": {
              "type": "boolean",
              "example": true,
              "description": "Send SNI (Server Name Indication) for SSL/TLS connections. Used by BATCH_URL and URL callbacks (optional)."
            },
            "bodyTemplate": {
              "type": "string",
              "example": "",
              "description": "The body template of the request. Only if httpMethpd is set to POST or PUT. It can contain predefined and custom variables. Mandatory for URL callbacks. This field can be unset when updating."
            }
          }
        }
      ]
    },
    "updatebatchUrlCallback": {
      "description": "Defines the properties needed to create a batch url callback",
      "allOf": [
        { "$ref": "#/definitions/updateCallback" },
        {
          "type": "object",
          "properties": {
            "url": { "type": "string", "description": "The callback's url" },
            "httpMethod": {
              "type": "string",
              "example": "GET",
              "description": "The http method used to send a callback",
              "enum": ["GET", "PUT", "POST"]
            },
            "linePattern": {
              "type": "string",
              "description": "The line pattern representing a message."
            }
          }
        }
      ]
    },
    "updateEmailCallback": {
      "description": "Defines the properties needed to create an email callback",
      "allOf": [
        { "$ref": "#/definitions/updateCallback" },
        {
          "type": "object",
          "properties": {
            "subject": {
              "type": "string",
              "description": "The subject of the email."
            },
            "recipient": {
              "type": "string",
              "description": "The recipient of the email."
            },
            "message": {
              "type": "string",
              "description": "the content of the message."
            }
          }
        }
      ]
    },
    "commonGroupCreate": {
      "type": "object",
      "required": ["description", "name", "parentId", "timezone", "type"],
      "discriminator": "type",
      "properties": {
        "name": {
          "type": "string",
          "description": "The group's name",
          "minLength": 3,
          "maxLength": 100
        },
        "description": {
          "type": "string",
          "description": "The group's description",
          "maxLength": 300
        },
        "type": {
          "type": "integer",
          "format": "int32",
          "description": "Group's type:\n- 0 -> SO\n- 2 -> Other\n- 5 -> SVNO\n- 6 -> Partners\n- 7 -> NIP\n- 8 -> DIST\n- 9 -> Channel\n- 10 -> Starter\n- 11 -> Partner\n"
        },
        "timezone": {
          "type": "string",
          "description": "The group's timezone (in Java TimeZone ID format, e.g.\"America/Costa_Rica\")."
        },
        "parentId": { "type": "string", "description": "The parent group id" }
      },
      "example": {
        "name": "Group 1",
        "description": "Description of my group 1",
        "type": 8,
        "timezone": "Europe/Paris",
        "parentId": "572f1451017975032d8ec1da"
      }
    },
    "SVNOCreate": {
      "description": "Defines the SVNO group's create properties",
      "allOf": [
        { "$ref": "#/definitions/commonGroupCreate" },
        {
          "type": "object",
          "properties": {
            "networkOperatorId": {
              "type": "string",
              "description": "SNO or NIP group id for a DIST & SVNO  group. This field is mandatory for DIST & SVNO group creation."
            }
          },
          "example": { "networkOperatorId": "572f1204017975032d8ec1dd" }
        }
      ]
    },
    "DISTCreate": {
      "description": "Defines the DIST group's create properties",
      "allOf": [
        { "$ref": "#/definitions/commonGroupCreate" },
        {
          "type": "object",
          "properties": {
            "networkOperatorId": {
              "type": "string",
              "description": "SO or NIP group id for a DIST & SVNO  group. This field is mandatory for DIST & SVNO group creation."
            }
          },
          "example": { "networkOperatorId": "572f1204017975032d8ec1dd" }
        }
      ]
    },
    "SOCreate": {
      "description": "Defines the SO group's create properties",
      "allOf": [
        { "$ref": "#/definitions/commonGroupCreate" },
        {
          "type": "object",
          "properties": {
            "countryISOAlpha3": {
              "type": "string",
              "description": "This is the country ISO code (3 letters from the ISO 3166-1 alpha-3 country code) where the operator manages its network. Only available for SO and NIP."
            }
          },
          "example": { "countryISOAlpha3": "FRA" }
        }
      ]
    },
    "NIPCreate": {
      "description": "Defines the NIP group's create properties",
      "allOf": [
        { "$ref": "#/definitions/commonGroupCreate" },
        {
          "type": "object",
          "properties": {
            "countryISOAlpha3": {
              "type": "string",
              "description": "This is the country ISO code (3 letters from the ISO 3166-1 alpha-3 country code) where the operator manages its network. Only available for SO and NIP."
            }
          },
          "example": { "countryISOAlpha3": "FRA" }
        }
      ]
    },
    "billableGroup": {
      "type": "object",
      "properties": {
        "billable": {
          "type": "boolean",
          "description": "true if the group is billable"
        },
        "technicalEmail": {
          "type": "string",
          "format": "email",
          "description": "The technical contact email",
          "maxLength": 250
        },
        "maxPrototypeAllowed": {
          "type": "integer",
          "format": "int32",
          "description": "Number of prototypes allowed. Accessible only for groups under SO"
        }
      },
      "description": "Defines the billable group's properties",
      "example": {
        "billable": true,
        "technicalEmail": "didier.renard@example.com",
        "maxPrototypeAllowed": 1000
      }
    },
    "BasicCreate": {
      "description": "Defines the Basic group's create properties",
      "allOf": [
        { "$ref": "#/definitions/commonGroupCreate" },
        { "$ref": "#/definitions/billableGroup" }
      ]
    },
    "PartnersCreate": {
      "description": "Defines the Partners group's create properties",
      "allOf": [
        { "$ref": "#/definitions/commonGroupCreate" },
        { "$ref": "#/definitions/billableGroup" }
      ]
    },
    "ChannelCreate": {
      "description": "Defines the Channel group's create properties",
      "allOf": [
        { "$ref": "#/definitions/commonGroupCreate" },
        { "$ref": "#/definitions/billableGroup" }
      ]
    },
    "StarterCreate": {
      "description": "Defines the Starter group's create properties",
      "allOf": [
        { "$ref": "#/definitions/commonGroupCreate" },
        { "$ref": "#/definitions/billableGroup" }
      ]
    },
    "PartnerCreate": {
      "description": "Defines the Partner group's create properties",
      "allOf": [
        { "$ref": "#/definitions/commonGroupCreate" },
        { "$ref": "#/definitions/billableGroup" }
      ]
    },
    "commonGroupUpdate": {
      "type": "object",
      "discriminator": "type",
      "properties": {
        "name": {
          "type": "string",
          "description": "The group's name",
          "minLength": 3,
          "maxLength": 100
        },
        "description": {
          "type": "string",
          "description": "The group's description",
          "maxLength": 300
        },
        "type": {
          "type": "integer",
          "format": "int32",
          "description": "- Group's type\n- 0 -> SO\n- 2 -> Other\n- 5 -> SVNO\n- 6 -> Partners\n- 7 -> NIP\n- 8 -> DIST\n- 9 -> Channel\n- 10 -> Starter\n- 11 -> Partner\n"
        },
        "timezone": {
          "type": "string",
          "description": "The timezone (in Java TimeZone ID format, e.g.\"America/Costa_Rica\")."
        }
      },
      "description": "Generic information for group update",
      "example": {
        "name": "Group 1",
        "description": "Description of my group 1",
        "type": 8,
        "timezone": "Europe/Paris"
      }
    },
    "SVNOUpdate": {
      "description": "Defines the SVNO group's update properties",
      "allOf": [{ "$ref": "#/definitions/commonGroupUpdate" }]
    },
    "DISTUpdate": {
      "description": "Defines the DIST group's update properties",
      "allOf": [
        { "$ref": "#/definitions/commonGroupUpdate" },
        { "type": "object" }
      ]
    },
    "SOUpdate": {
      "description": "Defines the SO group's update properties",
      "allOf": [
        { "$ref": "#/definitions/commonGroupUpdate" },
        {
          "type": "object",
          "properties": {
            "countryISOAlpha3": {
              "type": "string",
              "description": "This is the country ISO code (3 letters from the ISO 3166-1 alpha-3 country code) where the operator manages its network. Only available for SO and NIP."
            }
          },
          "example": { "countryISOAlpha3": "FRA" }
        }
      ]
    },
    "NIPUpdate": {
      "description": "Defines the NIP group's update properties",
      "allOf": [
        { "$ref": "#/definitions/commonGroupUpdate" },
        {
          "type": "object",
          "properties": {
            "countryISOAlpha3": {
              "type": "string",
              "description": "This is the country ISO code (3 letters from the ISO 3166-1 alpha-3 country code) where the operator manages its network. Only available for SO and NIP."
            }
          },
          "example": { "countryISOAlpha3": "FRA" }
        }
      ]
    },
    "BasicUpdate": {
      "description": "Defines the Basic group's update properties",
      "allOf": [
        { "$ref": "#/definitions/commonGroupUpdate" },
        { "$ref": "#/definitions/billableGroup" }
      ]
    },
    "PartnersUpdate": {
      "description": "Defines the Partners group's update properties",
      "allOf": [
        { "$ref": "#/definitions/commonGroupUpdate" },
        { "$ref": "#/definitions/billableGroup" }
      ]
    },
    "ChannelUpdate": {
      "description": "Defines the Channel group's update properties",
      "allOf": [
        { "$ref": "#/definitions/commonGroupUpdate" },
        { "$ref": "#/definitions/billableGroup" }
      ]
    },
    "StarterUpdate": {
      "description": "Defines the Starter group's update properties",
      "allOf": [
        { "$ref": "#/definitions/commonGroupUpdate" },
        { "$ref": "#/definitions/billableGroup" }
      ]
    },
    "PartnerUpdate": {
      "description": "Defines the Partner group's update properties",
      "allOf": [
        { "$ref": "#/definitions/commonGroupUpdate" },
        { "$ref": "#/definitions/billableGroup" }
      ]
    },
    "group": {
      "type": "object",
      "discriminator": "type",
      "properties": {
        "name": {
          "type": "string",
          "description": "The group's name",
          "minLength": 3,
          "maxLength": 100
        },
        "description": {
          "type": "string",
          "description": "The group's description",
          "maxLength": 300
        },
        "type": {
          "type": "integer",
          "format": "int32",
          "description": "Group's type\n- 0 -> SO\n- 2 -> Basic\n- 5 -> SVNO\n- 6 -> Partners\n- 7 -> NIP\n- 8 -> DIST\n- 9 -> Channel\n- 10 -> Starter\n- 11 -> Partner\n"
        },
        "timezone": {
          "type": "string",
          "description": "The timezone (in Java TimeZone ID format, e.g.\"America/Costa_Rica\")."
        },
        "id": { "type": "string", "description": "The group's identifier" },
        "nameCI": {
          "type": "string",
          "description": "The group's name to ascii and lowercase"
        },
        "path": {
          "type": "array",
          "description": "The group's path sorted by descending ancestor {id} (direct parent to farthest parent), restricted to the groups visible by the API user",
          "title": "Path",
          "items": { "$ref": "#/definitions/minGroup" }
        },
        "createdBy": {
          "type": "string",
          "description": "The user id of the group's creator"
        },
        "creationTime": {
          "type": "integer",
          "format": "int64",
          "description": "The creation date of the group (timestamp in milliseconds since Unix Epoch)"
        },
        "leaf": {
          "type": "boolean",
          "description": "true if the group is leaf"
        },
        "actions": { "$ref": "#/definitions/actions" }
      },
      "description": "Defines the group's generic properties",
      "example": {
        "id": "572f1204017975032d8ec1dd",
        "name": "Group 1",
        "description": "Description of my group 1",
        "type": 8,
        "timezone": "Europe/Paris",
        "nameCI": "group 1",
        "path": [
          { "id": "572f1451017975032d8ec1de", "name": "Group 1" },
          { "id": "572f1454017975032d8ec1df", "name": "Group 2" }
        ],
        "currentPrototypeCount": 56,
        "createdBy": "59e9a44cd20419749ec5649a",
        "creationTime": 1549363965954,
        "leaf": false,
        "actions": ["devices:create"]
      }
    },
    "SVNO": {
      "description": "Defines the SVNO group type properties",
      "allOf": [
        { "$ref": "#/definitions/group" },
        {
          "type": "object",
          "properties": {
            "networkOperatorId": {
              "type": "string",
              "description": "SO or NIP group id for a DIST & SVNO  group. This field is mandatory for DIST & SVNO group creation."
            }
          },
          "example": { "networkOperatorId": "572f1204017975032d8ec1dd" }
        }
      ]
    },
    "DIST": {
      "description": "Defines the DIST group type properties",
      "allOf": [
        { "$ref": "#/definitions/group" },
        {
          "type": "object",
          "properties": {
            "networkOperatorId": {
              "type": "string",
              "description": "SO or NIP group id for a DIST & SVNO  group. This field is mandatory for DIST & SVNO group creation."
            }
          },
          "example": { "networkOperatorId": "572f1204017975032d8ec1dd" }
        }
      ]
    },
    "SO": {
      "description": "Defines the SO group type properties",
      "allOf": [
        { "$ref": "#/definitions/group" },
        {
          "type": "object",
          "properties": {
            "countryISOAlpha3": {
              "type": "string",
              "description": "This is the country ISO code (3 letters from the ISO 3166-1 alpha-3 country code) where the operator manages its network. Only available for SNO and NIP."
            }
          },
          "example": { "countryISOAlpha3": "FRA" }
        }
      ]
    },
    "NIP": {
      "description": "Defines the NIP group type properties",
      "allOf": [
        { "$ref": "#/definitions/group" },
        {
          "type": "object",
          "properties": {
            "countryISOAlpha3": {
              "type": "string",
              "description": "This is the country ISO code (3 letters from the ISO 3166-1 alpha-3 country code) where the operator manages its network. Only available for SNO and NIP."
            }
          },
          "example": { "countryISOAlpha3": "FRA" }
        }
      ]
    },
    "Basic": {
      "description": "Defines the Basic group type properties",
      "allOf": [
        { "$ref": "#/definitions/group" },
        { "$ref": "#/definitions/billableGroup" },
        {
          "type": "object",
          "properties": {
            "currentPrototypeCount": {
              "type": "integer",
              "format": "int32",
              "description": "Number of prototype registered. Accessible only for groups under SO",
              "minimum": 0
            }
          },
          "example": { "currentPrototypeCount": 56 }
        }
      ]
    },
    "Partners": {
      "description": "Defines the Partners group type properties",
      "allOf": [
        { "$ref": "#/definitions/group" },
        { "$ref": "#/definitions/billableGroup" },
        {
          "type": "object",
          "properties": {
            "currentPrototypeCount": {
              "type": "integer",
              "format": "int32",
              "description": "Number of prototype registered. Accessible only for groups under SO",
              "minimum": 0
            }
          },
          "example": { "currentPrototypeCount": 56 }
        }
      ]
    },
    "Channel": {
      "description": "Defines the Channel group type properties",
      "allOf": [
        { "$ref": "#/definitions/group" },
        { "$ref": "#/definitions/billableGroup" },
        {
          "type": "object",
          "properties": {
            "currentPrototypeCount": {
              "type": "integer",
              "format": "int32",
              "description": "Number of prototype registered. Accessible only for groups under SO",
              "minimum": 0
            }
          },
          "example": { "currentPrototypeCount": 56 }
        }
      ]
    },
    "Starter": {
      "description": "Defines the Starter group type properties",
      "allOf": [
        { "$ref": "#/definitions/group" },
        { "$ref": "#/definitions/billableGroup" },
        {
          "type": "object",
          "properties": {
            "currentPrototypeCount": {
              "type": "integer",
              "format": "int32",
              "description": "Number of prototype registered. Accessible only for groups under SO",
              "minimum": 0
            }
          },
          "example": { "currentPrototypeCount": 56 }
        }
      ]
    },
    "Partner": {
      "description": "Defines Partner group type properties",
      "allOf": [
        { "$ref": "#/definitions/group" },
        { "$ref": "#/definitions/billableGroup" },
        {
          "type": "object",
          "properties": {
            "currentPrototypeCount": {
              "type": "integer",
              "format": "int32",
              "description": "Number of prototype registered. Accessible only for groups under SO",
              "minimum": 0
            }
          },
          "example": { "currentPrototypeCount": 56 }
        }
      ]
    },
    "baseGeolocation": {
      "type": "object",
      "properties": {
        "id": { "type": "string", "description": "Geolocation payload's id" },
        "name": {
          "type": "string",
          "description": "Geolocation payload's name"
        }
      },
      "example": {
        "name": "52243fa7e4b00e1b8587bd5a",
        "id": "Telecom Design [Root]"
      }
    },
    "groupCallbackMedium": {
      "description": "Callback types",
      "allOf": [
        { "$ref": "#/definitions/groupCallbackEmail" },
        { "$ref": "#/definitions/groupCallbackHTTP" }
      ]
    },
    "groupCallbackEmail": {
      "type": "object",
      "properties": {
        "subject": {
          "type": "string",
          "description": "the subject of the mail which have been sent"
        },
        "message": {
          "type": "string",
          "description": "The body of the mail which have been sent"
        }
      },
      "description": "Callback of email type"
    },
    "groupCallbackHTTP": {
      "type": "object",
      "properties": {
        "url": {
          "type": "string",
          "description": "The URL called when this message has been processed"
        },
        "headers": {
          "type": "object",
          "description": "The headers sent in the request. If no header is defined, this field is not present.",
          "properties": {}
        },
        "body": {
          "type": "string",
          "description": "The body of the request, if any. It is only present if the request method is POST."
        },
        "contentType": {
          "type": "string",
          "description": "The content type of the request. It is only present if the request is a POST."
        },
        "method": {
          "type": "string",
          "description": "The HTTP method, currently only GET, POST or PUT."
        },
        "error": {
          "type": "string",
          "description": "If there was an error, for instance if the body is JSON and could not be evaluated."
        }
      },
      "description": "Callback of HTTP type"
    },
    "groupErrorMessages": {
      "type": "object",
      "properties": {
        "device": { "type": "string", "description": "Device identifier" },
        "deviceUrl": { "type": "string", "description": "Url to the device" },
        "deviceType": {
          "type": "string",
          "description": "Device type identifier"
        },
        "time": {
          "type": "integer",
          "format": "int64",
          "description": "Timestamp of the message (posix format)"
        },
        "data": { "type": "string", "description": "Data message" },
        "snr": {
          "type": "string",
          "description": "The SNR of the messages received by the network so far"
        },
        "status": {
          "type": "string",
          "description": "Contains the callback response status."
        },
        "message": {
          "type": "string",
          "description": "Contains additional information on the response."
        },
        "callback": { "$ref": "#/definitions/groupCallbackMedium" },
        "parameters": {
          "type": "object",
          "description": "All the parameters which have served to build the callback, see callback doc for an exhaustive list.",
          "properties": {}
        }
      }
    },
    "ethernetConnectivityForGroup": {
      "description": "Ethernet connectivity configuration for a group.",
      "allOf": [
        { "$ref": "#/definitions/ethernetConnectivityBase" },
        {
          "type": "object",
          "properties": {
            "id": { "type": "string", "description": "The group's identifier" },
            "group": { "$ref": "#/definitions/minGroup" },
            "actions": { "$ref": "#/definitions/actions" },
            "resources": { "$ref": "#/definitions/resources" }
          }
        }
      ]
    },
    "cellularConnectivityForGroup": {
      "description": "Cellular connectivity configuration for a group.",
      "allOf": [
        { "$ref": "#/definitions/cellularConnectivityBase" },
        {
          "type": "object",
          "properties": {
            "id": { "type": "string", "description": "The group's identifier" },
            "group": { "$ref": "#/definitions/minGroup" },
            "actions": { "$ref": "#/definitions/actions" },
            "resources": { "$ref": "#/definitions/resources" }
          }
        }
      ]
    },
    "operatorRead": {
      "type": "object",
      "properties": {
        "id": { "type": "string", "description": "The operator's identifier" },
        "autoCloseCampaign": {
          "type": "boolean",
          "description": "true if the operator defined to automatically close upgrade campaign"
        },
        "transmitterPower": {
          "type": "integer",
          "format": "int32",
          "description": "Transmitter power (TRP) (in mW)",
          "minimum": 0,
          "maximum": 1000
        },
        "minDb": {
          "type": "integer",
          "format": "int32",
          "description": "Min dB (in dBm)",
          "minimum": -170,
          "maximum": 0
        },
        "maxDb": {
          "type": "integer",
          "format": "int32",
          "description": "Max dB (in dBm)",
          "minimum": -170,
          "maximum": 0
        },
        "alertTime": {
          "type": "integer",
          "format": "int32",
          "description": "Alert time (in seconds)",
          "minimum": 300,
          "maximum": 86400
        },
        "requestTrackerBaseUrl": {
          "type": "string",
          "description": "Request tracker base Url"
        },
        "telecommunicationStandard": { "$ref": "#/definitions/minStandard" },
        "antenna": { "$ref": "#/definitions/minAntenna" },
        "warrantyMode": {
          "type": "integer",
          "format": "int32",
          "description": "Warranty mode.\n0 -> MANUFACTURER\n1 -> PROVISIONING\n"
        },
        "networkType": {
          "type": "integer",
          "format": "int32",
          "description": "Network type.\n0 -> SNO_PUBLIC\n1 -> SNO_PRIVATE\n2 -> PILOT_PUBLIC\n3 -> PILOT_PRIVATE\n"
        },
        "actions": { "$ref": "#/definitions/actions" }
      },
      "description": "Defines the operator's properties"
    },
    "operatorUpdate": {
      "type": "object",
      "properties": {
        "transmitterPower": {
          "type": "integer",
          "format": "int32",
          "description": "Transmitter power (TRP) (in mW)",
          "minimum": 0,
          "maximum": 1000
        },
        "minDb": {
          "type": "integer",
          "format": "int32",
          "description": "Min dB (in dBm)",
          "minimum": -170,
          "maximum": 0
        },
        "maxDb": {
          "type": "integer",
          "format": "int32",
          "description": "Max dB (in dBm)",
          "minimum": -170,
          "maximum": 0
        },
        "alertTime": {
          "type": "integer",
          "format": "int32",
          "description": "Alert time (in seconds)",
          "minimum": 300,
          "maximum": 86400
        },
        "requestTrackerBaseUrl": {
          "type": "string",
          "description": "Request tracker base Url"
        },
        "telecommunicationStandard": { "$ref": "#/definitions/minStandard" },
        "antenna": { "$ref": "#/definitions/minAntenna" }
      },
      "description": "Defines the operator's properties"
    },
    "minStandard": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The telecommunication standard identifier"
        },
        "name": {
          "type": "string",
          "description": "The telecommunication standard name"
        }
      },
      "title": "Minimal telecommunication standard",
      "description": "Defines a telecommunication standard entity",
      "example": { "id": "572f1204017975032d8ec1dd", "name": "ETSI" }
    },
    "minAntenna": {
      "type": "object",
      "properties": {
        "model": { "type": "string", "description": "Antenna model" }
      },
      "description": "Defines the antenna properties",
      "example": { "model": "CXL 900-3LW" }
    },
    "baseHost": {
      "type": "object",
      "properties": {
        "name": { "type": "string", "description": "The host's name" }
      },
      "example": { "name": "Host 1" }
    },
    "host": {
      "allOf": [
        { "$ref": "#/definitions/baseHost" },
        {
          "type": "object",
          "properties": {
            "group": { "$ref": "#/definitions/minGroup" },
            "contacts": {
              "type": "array",
              "items": { "$ref": "#/definitions/contact" }
            },
            "actions": { "$ref": "#/definitions/actions" },
            "resources": { "$ref": "#/definitions/resources" }
          }
        }
      ]
    },
    "baseContact": {
      "type": "object",
      "required": ["name"],
      "properties": {
        "name": { "type": "string", "description": "The contact's name" },
        "email": {
          "type": "string",
          "format": "email",
          "description": "The contact's email. This field can be unset when updating.",
          "maxLength": 250
        },
        "phoneNumber": {
          "type": "string",
          "format": "phoneNumber",
          "description": "The contact's phone number must be in the international format with no spaces between numbers (+country code - number). This field can be unset when updating."
        },
        "mobilePhoneNumber": {
          "type": "string",
          "format": "phoneNumber",
          "description": "The contact's mobile phone number must be in the international format with no spaces between numbers (+country code - number). This field can be unset when updating."
        },
        "address": { "type": "string", "description": "The contact's address" },
        "description": {
          "type": "string",
          "description": "The contact's description"
        },
        "actions": { "$ref": "#/definitions/actions" },
        "resources": { "$ref": "#/definitions/resources" }
      },
      "description": "Defines a contact entity",
      "example": {
        "name": "Contact Name",
        "email": "contactName@email.com",
        "description": "Description of the contact",
        "address": "61 Address St. Liverpool L5 8UT, UNITED KINGDOM",
        "phoneNumber": "0123456789",
        "mobilePhoneNumber": "+033987654321"
      }
    },
    "contact": {
      "allOf": [
        { "$ref": "#/definitions/baseContact" },
        {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "The contact's identifier"
            }
          }
        }
      ]
    },
    "baseMaintenance": {
      "type": "object",
      "properties": {
        "name": { "type": "string", "description": "The maintenance's name" }
      },
      "example": { "name": "Maintenance 1" }
    },
    "maintenance": {
      "allOf": [
        { "$ref": "#/definitions/baseMaintenance" },
        {
          "type": "object",
          "properties": {
            "group": { "$ref": "#/definitions/minGroup" },
            "contacts": {
              "type": "array",
              "items": { "$ref": "#/definitions/contact" }
            },
            "actions": { "$ref": "#/definitions/actions" },
            "resources": { "$ref": "#/definitions/resources" }
          }
        }
      ]
    },
    "maintenanceCreation": {
      "allOf": [
        { "$ref": "#/definitions/baseMaintenance" },
        {
          "type": "object",
          "required": ["groupId"],
          "properties": {
            "groupId": {
              "type": "string",
              "description": "identifier of the group of this maintenance"
            }
          }
        }
      ]
    },
    "perm": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32",
          "description": "The permission's code"
        },
        "name": { "type": "string", "description": "The permission's name" },
        "description": {
          "type": "string",
          "description": "The permission's description (in english)"
        },
        "actions": { "$ref": "#/definitions/actions" },
        "resources": { "$ref": "#/definitions/resources" }
      },
      "description": "Information about a Permission",
      "example": {
        "code": 4003,
        "name": "DEV_INFO_DELETE",
        "description": "Delete devices"
      }
    },
    "profile": {
      "type": "object",
      "properties": {
        "id": { "type": "string", "description": "The profiler identifier" },
        "name": { "type": "string", "description": "The profile name" },
        "group": { "$ref": "#/definitions/minGroup" },
        "roles": {
          "type": "array",
          "description": "Lists the role contained in this profile.",
          "items": { "$ref": "#/definitions/minRole" }
        },
        "actions": { "$ref": "#/definitions/actions" },
        "resources": { "$ref": "#/definitions/resources" }
      },
      "example": {
        "id": "572f71a08916342398fb65c5",
        "name": "CUSTOMER [R]",
        "group": {
          "id": "572f71d08916342398fb65c6",
          "name": "Group 1",
          "type": "0",
          "level": 1
        },
        "roles": [
          {
            "id": "572f71e88916342398fb65c7",
            "name": "Role 1",
            "path": [
              { "id": "572f71e88916342398fb65c4", "name": "Meta Role" },
              { "id": "572f71e88916342398fb65c5", "name": "ROOT" }
            ]
          },
          {
            "id": "572f71f48916342398fb65c8",
            "name": "Role 2",
            "path": [
              { "id": "572f71e88916342398fb65c4", "name": "Meta Role" },
              { "id": "572f71e88916342398fb65c5", "name": "ROOT" }
            ]
          }
        ]
      }
    },
    "minRole": {
      "type": "object",
      "properties": {
        "id": { "type": "string", "description": "The role's identifier" },
        "name": {
          "type": "string",
          "description": "The role's name",
          "maxLength": 100
        },
        "path": {
          "type": "array",
          "description": "The roles's path sorted by descending ancestor (direct parent to farest parent)",
          "items": { "$ref": "#/definitions/minMetaRole" }
        }
      },
      "description": "Defines a role entity",
      "example": {
        "id": "572f71e88916342398fb65c7",
        "name": "Role 1",
        "path": [
          { "id": "572f71e88916342398fb65c4", "name": "Meta Role" },
          { "id": "572f71e88916342398fb65c5", "name": "ROOT" }
        ]
      }
    },
    "minMetaRole": {
      "type": "object",
      "properties": {
        "id": { "type": "string", "description": "The meta role's identifier" },
        "name": {
          "type": "string",
          "description": "The meta role's name",
          "maxLength": 100
        }
      },
      "description": "Defines a meta role entity",
      "example": { "id": "572f71e88916342398fb65c7", "name": "Role 1" }
    },
    "baseProvider": {
      "type": "object",
      "properties": {
        "name": { "type": "string", "description": "The provider's name" },
        "annualCost": {
          "type": "number",
          "format": "double",
          "description": "The provider's annual cost. This field can be unset when updating."
        }
      },
      "example": { "name": "Provider 1", "annualCost": 70.2 }
    },
    "provider": {
      "allOf": [
        { "$ref": "#/definitions/baseProvider" },
        {
          "type": "object",
          "properties": {
            "group": { "$ref": "#/definitions/minGroup" },
            "contacts": {
              "type": "array",
              "items": { "$ref": "#/definitions/contact" }
            },
            "actions": { "$ref": "#/definitions/actions" },
            "resources": { "$ref": "#/definitions/resources" }
          }
        }
      ]
    },
    "commonRole": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "the role's name",
          "maxLength": 100
        },
        "type": {
          "type": "integer",
          "format": "int32",
          "description": "Token's type of role\n- 0 -> ROLE\n- 1 -> META_EMPTY\n- 2 -> META\n"
        }
      },
      "description": "generic information about a Role"
    },
    "role": {
      "description": "Information about a Role",
      "allOf": [
        { "$ref": "#/definitions/commonRole" },
        {
          "type": "object",
          "properties": {
            "id": { "type": "string", "description": "The role's identifier" },
            "perms": {
              "type": "array",
              "description": "the permisions included in this role",
              "title": "Perms",
              "items": { "$ref": "#/definitions/minPerm" }
            },
            "path": {
              "type": "array",
              "description": "The roles's path sorted by descending ancestor (direct parent to farest parent)",
              "items": { "$ref": "#/definitions/minMetaRole" }
            },
            "actions": { "$ref": "#/definitions/actions" },
            "resources": { "$ref": "#/definitions/resources" }
          },
          "example": {
            "id": "572f6805e0b90abc0b5104af",
            "name": "CRUD",
            "type": 0,
            "path": [
              { "id": "572f6805e0b90abc0b5104ab", "name": "BASIC" },
              { "id": "572f6805e0b90abc0b5104ac", "name": "DEVICE" }
            ],
            "perms": [
              { "code": 4000, "name": "DEV_INFO_RED" },
              { "code": 4001, "name": "DEV_INFO_UPDATE" },
              { "code": 4003, "name": "DEV_INFO_DELETE" },
              { "code": 4002, "name": "DEV_INFO_CREATE" }
            ]
          }
        }
      ]
    },
    "minPerm": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32",
          "description": "The permission's code"
        },
        "name": { "type": "string", "description": "The permission's name" }
      },
      "description": "Code and name of a permission",
      "example": { "code": 4003, "name": "DEV_INFO_DELETE" }
    },
    "minProvider": {
      "type": "object",
      "properties": {
        "id": { "type": "string", "description": "The provider identifier" },
        "name": { "type": "string", "description": "The provider name" },
        "actions": { "$ref": "#/definitions/actions" }
      },
      "description": "Minimal information about a provider"
    },
    "internetSubscription": {
      "type": "object",
      "discriminator": "type",
      "properties": {
        "id": {
          "type": "string",
          "description": "The identifier of this internet subscription"
        },
        "type": {
          "type": "integer",
          "format": "int32",
          "example": 2,
          "description": "Internet subscription type\n- 0 -> GSM\n- 1 -> ADSL\n- 2 -> SATELLITE\n- 3 -> LAN\n- 4 -> WIFI\n"
        },
        "priority": {
          "type": "integer",
          "format": "int32",
          "description": "Internet subscription priority.\n- 0 -> PRIMARY\n- 1 -> SECONDARY\n- 2 -> TERMINATED\n"
        },
        "comments": {
          "type": "string",
          "description": "The comments about this internet subscription. This field can be unset when updating."
        },
        "startTime": {
          "type": "integer",
          "format": "int64",
          "description": "The start time of this internet subscription"
        },
        "endTime": {
          "type": "integer",
          "format": "int64",
          "description": "The end time this internet subscription. This field can be unset when updating."
        },
        "provider": { "$ref": "#/definitions/minProvider" },
        "contacts": {
          "type": "array",
          "items": { "$ref": "#/definitions/minContact" }
        },
        "actions": { "$ref": "#/definitions/actions" },
        "resources": { "$ref": "#/definitions/resources" }
      },
      "description": "Generic internet subscription information"
    },
    "adslSubscription": {
      "description": "Information about ADSL internet subscription",
      "allOf": [
        { "$ref": "#/definitions/internetSubscription" },
        {
          "type": "object",
          "properties": {
            "connectionStatus": {
              "type": "integer",
              "format": "int32",
              "example": 2,
              "description": "Subscription connection status\n- 0 -> REQUEST\n- 1 -> INSTALLED\n- 2 -> ACTIVATED\n"
            },
            "internetAccount": {
              "type": "string",
              "description": "The internet account of this internet subscription. This field can be unset when updating."
            },
            "orderNumber": {
              "type": "string",
              "description": "The order number of this internet subscription. This field can be unset when updating."
            },
            "interfaceLogin": {
              "type": "string",
              "description": "The interface login of this internet subscription"
            },
            "interfacePassword": {
              "type": "string",
              "description": "The interface password of this internet subscription"
            },
            "adslLogin": {
              "type": "string",
              "description": "The adsl login of this internet subscription. This field can be unset when updating."
            },
            "adslPassword": {
              "type": "string",
              "description": "The adsl password of this internet subscription. This field can be unset when updating."
            },
            "lineNumber": {
              "type": "string",
              "description": "The line number of this internet subscription"
            },
            "modem": {
              "type": "string",
              "description": "The modem of this internet subscription"
            },
            "modemSerialNumber": {
              "type": "string",
              "description": "The serial number of the modem of this internet subscription"
            },
            "jumperStrip": {
              "type": "string",
              "description": "The jumper strip of this internet subscription. This field can be unset when updating."
            },
            "jumperBlock": {
              "type": "string",
              "description": "The jumper block of this internet subscription. This field can be unset when updating."
            },
            "pair": {
              "type": "string",
              "description": "The pair of this internet subscription. This field can be unset when updating."
            }
          }
        }
      ]
    },
    "gsmSubscription": {
      "description": "Information about cellular internet subscription",
      "allOf": [
        { "$ref": "#/definitions/internetSubscription" },
        {
          "type": "object",
          "properties": {
            "dataNumber": {
              "type": "string",
              "description": "The data number of this internet subscription. This field can be unset when updating."
            },
            "simCardNumber": {
              "type": "string",
              "description": "The sim card number of this internet subscription. This field can be unset when updating."
            },
            "imei": {
              "type": "string",
              "description": "The IMEI of this internet subscription. This field can be unset when updating."
            },
            "modem": {
              "type": "string",
              "description": "The modem of this internet subscription. This field can be unset when updating."
            },
            "modemSerialNumber": {
              "type": "string",
              "description": "The serial number of the modem of this internet subscription"
            },
            "gsmConnectionType": {
              "type": "integer",
              "format": "int32",
              "description": "GSM subscription connection type\n- 0 -> DONGLE_USB\n- 1 -> ROUTER_ETH\n"
            }
          }
        }
      ]
    },
    "satSubscription": {
      "description": "Information about satellite internet subscription",
      "allOf": [
        { "$ref": "#/definitions/internetSubscription" },
        {
          "type": "object",
          "properties": {
            "connectionStatus": {
              "type": "integer",
              "format": "int32",
              "example": 2,
              "description": "Subscription connection status\n- 0 -> REQUEST\n- 1 -> CREDENTIALS PROVIDED\n- 2 -> KIT RECEIVED\n"
            },
            "altitude": {
              "type": "number",
              "format": "double",
              "example": 670,
              "description": "The altitude of the satellite of this internet subscription"
            },
            "azimuth": {
              "type": "number",
              "format": "double",
              "example": 205.152,
              "description": "The azimuth of the satellite of this internet subscription"
            },
            "polarization": {
              "type": "number",
              "format": "double",
              "example": 11.856,
              "description": "The polarization of the satellite of this internet subscription"
            },
            "orderNumber": {
              "type": "string",
              "example": "218337",
              "description": "The order number of this internet subscription"
            },
            "locationCode": {
              "type": "string",
              "example": "FR",
              "description": "The location code of this internet subscription. This field can be unset when updating."
            },
            "clusterCode": {
              "type": "string",
              "example": "002A",
              "description": "The cluster code of this internet subscription. This field can be unset when updating."
            },
            "login": {
              "type": "string",
              "example": "cattherine.menitro",
              "description": "The login of this internet subscription. This field can be unset when updating."
            },
            "password": {
              "type": "string",
              "example": "PMFPAI53A3",
              "description": "The password of this internet subscription. This field can be unset when updating."
            },
            "rType": {
              "type": "integer",
              "format": "int32",
              "example": 1,
              "description": "Subscription receiver type\n- 0 -> HEATING\n- 1 -> STANDARD\n"
            }
          }
        }
      ]
    },
    "wifiSubscription": {
      "description": "Information about Wi-Fi internet subscription",
      "allOf": [
        { "$ref": "#/definitions/internetSubscription" },
        {
          "type": "object",
          "properties": {
            "networkType": {
              "type": "integer",
              "format": "int32",
              "example": 0,
              "description": "Subscription network type\n- 0 -> COMPANY\n- 1 -> OTHER\n- 2 -> RESIDENT\n"
            },
            "ethConnectionType": {
              "type": "integer",
              "format": "int32",
              "description": "Subscription connection type\n- 0 -> DHCP\n- 1 -> STATIC\n"
            },
            "ssid": {
              "type": "string",
              "description": "The SSID of this Wi-Fi internet subscription. This field can be unset when updating."
            },
            "passphrase": {
              "type": "string",
              "description": "The passphrase on this Wi-Fi internet subscription. This field can be unset when updating."
            }
          }
        }
      ]
    },
    "createInternetSubscription": {
      "type": "object",
      "required": ["priority", "startTime", "type"],
      "discriminator": "type",
      "properties": {
        "id": {
          "type": "string",
          "description": "The identifier of this internet subscription"
        },
        "type": {
          "type": "integer",
          "format": "int32",
          "example": 2,
          "description": "Internet subscription type\n- 0 -> GSM\n- 1 -> ADSL\n- 2 -> SATELLITE\n- 3 -> LAN\n- 4 -> WIFI\n"
        },
        "priority": {
          "type": "integer",
          "format": "int32",
          "description": "Internet subscription priority.\n- 0 -> PRIMARY\n- 1 -> SECONDARY\n- 2 -> TERMINATED\n"
        },
        "comments": {
          "type": "string",
          "description": "The comments about this internet subscription. This field can be unset when updating."
        },
        "startTime": {
          "type": "integer",
          "format": "int64",
          "description": "The start time of this internet subscription"
        },
        "endTime": {
          "type": "integer",
          "format": "int64",
          "description": "The end time this internet subscription. This field can be unset when updating."
        },
        "provider": { "$ref": "#/definitions/minProvider" },
        "contacts": {
          "type": "array",
          "items": { "$ref": "#/definitions/minContact" }
        }
      },
      "description": "Generic internet subscription information"
    },
    "createGsmSubscription": {
      "description": "Information about cellular internet subscription",
      "required": ["modemSerialNumber"],
      "allOf": [
        { "$ref": "#/definitions/createInternetSubscription" },
        {
          "type": "object",
          "properties": {
            "dataNumber": {
              "type": "string",
              "description": "The data number of this internet subscription. This field can be unset when updating."
            },
            "simCardNumber": {
              "type": "string",
              "description": "The sim card number of this internet subscription. This field can be unset when updating."
            },
            "imei": {
              "type": "string",
              "description": "The IMEI of this internet subscription. This field can be unset when updating."
            },
            "modem": {
              "type": "string",
              "description": "The modem of this internet subscription. This field can be unset when updating."
            },
            "modemSerialNumber": {
              "type": "string",
              "description": "The serial number of the modem of this internet subscription"
            },
            "gsmConnectionType": {
              "type": "integer",
              "format": "int32",
              "description": "GSM subscription connection type\n- 0 -> DONGLE_USB\n- 1 -> ROUTER_ETH\n"
            }
          }
        }
      ]
    },
    "createLanSubscription": {
      "description": "Information about LAN internet subscription",
      "required": ["networkType", "connectionType"],
      "allOf": [
        { "$ref": "#/definitions/createInternetSubscription" },
        {
          "type": "object",
          "properties": {
            "networkType": {
              "type": "integer",
              "format": "int32",
              "description": "Subscription network type\n- 0 -> COMPANY\n- 1 -> OTHER\n- 2 -> RESIDENT\n"
            },
            "ethConnectionType": {
              "type": "integer",
              "format": "int32",
              "description": "Subscription connection type\n- 0 -> DHCP\n- 1 -> STATIC\n"
            },
            "addressing": {
              "type": "string",
              "example": "192.168.0.212",
              "description": "The addressing of this internet subscription. This field can be unset when updating."
            },
            "connectionComments": {
              "type": "number",
              "format": "double",
              "example": "IP Address: 192.168.0.212 Subnet Mask : 255.255.255.0 DNS : 192.168.0.154",
              "description": "Comments about the connection of this internet subscription. This field can be unset when updating."
            }
          }
        }
      ]
    },
    "createWifiSubscription": {
      "description": "Information about Wi-Fi internet subscription",
      "required": ["networkType", "connectionType"],
      "allOf": [
        { "$ref": "#/definitions/createInternetSubscription" },
        {
          "type": "object",
          "properties": {
            "networkType": {
              "type": "integer",
              "format": "int32",
              "example": 0,
              "description": "Subscription network type\n- 0 -> COMPANY\n- 1 -> OTHER\n- 2 -> RESIDENT\n"
            },
            "ethConnectionType": {
              "type": "integer",
              "format": "int32",
              "description": "Subscription connection type\n- 0 -> DHCP\n- 1 -> STATIC\n"
            },
            "ssid": {
              "type": "string",
              "description": "The SSID of this Wi-Fi internet subscription. This field can be unset when updating."
            },
            "passphrase": {
              "type": "string",
              "description": "The passphrase on this Wi-Fi internet subscription. This field can be unset when updating."
            }
          }
        }
      ]
    },
    "updateInternetSubscription": {
      "type": "object",
      "discriminator": "type",
      "properties": {
        "type": {
          "type": "integer",
          "format": "int32",
          "example": 2,
          "description": "Internet subscription type\n- 0 -> GSM\n- 1 -> ADSL\n- 2 -> SATELLITE\n- 3 -> LAN\n- 4 -> WIFI\n"
        },
        "priority": {
          "type": "integer",
          "format": "int32",
          "description": "Internet subscription priority.\n- 0 -> PRIMARY\n- 1 -> SECONDARY\n- 2 -> TERMINATED\n"
        },
        "comments": {
          "type": "string",
          "description": "The comments about this internet subscription. This field can be unset when updating."
        },
        "startTime": {
          "type": "integer",
          "format": "int64",
          "description": "The start time of this internet subscription"
        },
        "endTime": {
          "type": "integer",
          "format": "int64",
          "description": "The end time this internet subscription. This field can be unset when updating."
        },
        "provider": { "$ref": "#/definitions/minProvider" },
        "contacts": {
          "type": "array",
          "items": { "$ref": "#/definitions/minContact" }
        }
      },
      "description": "Generic internet subscription information"
    },
    "updateAdslSubscription": {
      "description": "Information about ADSL internet subscription",
      "allOf": [
        { "$ref": "#/definitions/updateInternetSubscription" },
        {
          "type": "object",
          "properties": {
            "connectionStatus": {
              "type": "integer",
              "format": "int32",
              "example": 2,
              "description": "Subscription connection status\n- 0 -> REQUEST\n- 1 -> INSTALLED\n- 2 -> ACTIVATED\n"
            },
            "internetAccount": {
              "type": "string",
              "description": "The internet account of this internet subscription. This field can be unset when updating."
            },
            "orderNumber": {
              "type": "string",
              "description": "The order number of this internet subscription. This field can be unset when updating."
            },
            "interfaceLogin": {
              "type": "string",
              "description": "The interface login of this internet subscription"
            },
            "interfacePassword": {
              "type": "string",
              "description": "The interface password of this internet subscription"
            },
            "adslLogin": {
              "type": "string",
              "description": "The adsl login of this internet subscription. This field can be unset when updating."
            },
            "adslPassword": {
              "type": "string",
              "description": "The adsl password of this internet subscription. This field can be unset when updating."
            },
            "lineNumber": {
              "type": "string",
              "description": "The line number of this internet subscription"
            },
            "modem": {
              "type": "string",
              "description": "The modem of this internet subscription"
            },
            "modemSerialNumber": {
              "type": "string",
              "description": "The serial number of the modem of this internet subscription"
            },
            "jumperStrip": {
              "type": "string",
              "description": "The jumper strip of this internet subscription. This field can be unset when updating."
            },
            "jumperBlock": {
              "type": "string",
              "description": "The jumper block of this internet subscription. This field can be unset when updating."
            },
            "pair": {
              "type": "string",
              "description": "The pair of this internet subscription. This field can be unset when updating."
            }
          }
        }
      ]
    },
    "updateGsmSubscription": {
      "description": "Information about cellular internet subscription",
      "allOf": [
        { "$ref": "#/definitions/updateInternetSubscription" },
        {
          "type": "object",
          "properties": {
            "dataNumber": {
              "type": "string",
              "description": "The data number of this internet subscription. This field can be unset when updating."
            },
            "simCardNumber": {
              "type": "string",
              "description": "The sim card number of this internet subscription. This field can be unset when updating."
            },
            "imei": {
              "type": "string",
              "description": "The IMEI of this internet subscription. This field can be unset when updating."
            },
            "modem": {
              "type": "string",
              "description": "The modem of this internet subscription. This field can be unset when updating."
            },
            "modemSerialNumber": {
              "type": "string",
              "description": "The serial number of the modem of this internet subscription"
            },
            "gsmConnectionType": {
              "type": "integer",
              "format": "int32",
              "description": "GSM subscription connection type\n- 0 -> DONGLE_USB\n- 1 -> ROUTER_ETH\n"
            }
          }
        }
      ]
    },
    "updateSatSubscription": {
      "description": "Information about satellite internet subscription",
      "required": ["rType", "orderNumber", "connectionStatus"],
      "allOf": [
        { "$ref": "#/definitions/updateInternetSubscription" },
        {
          "type": "object",
          "properties": {
            "connectionStatus": {
              "type": "integer",
              "format": "int32",
              "example": 2,
              "description": "Subscription connection status\n- 0 -> REQUEST\n- 1 -> CREDENTIALS PROVIDED\n- 2 -> KIT RECEIVED\n"
            },
            "altitude": {
              "type": "number",
              "format": "double",
              "example": 670,
              "description": "The altitude of the satellite of this internet subscription"
            },
            "azimuth": {
              "type": "number",
              "format": "double",
              "example": 205.152,
              "description": "The azimuth of the satellite of this internet subscription"
            },
            "polarization": {
              "type": "number",
              "format": "double",
              "example": 11.856,
              "description": "The polarization of the satellite of this internet subscription"
            },
            "orderNumber": {
              "type": "string",
              "example": "218337",
              "description": "The order number of this internet subscription"
            },
            "locationCode": {
              "type": "string",
              "example": "FR",
              "description": "The location code of this internet subscription. This field can be unset when updating."
            },
            "clusterCode": {
              "type": "string",
              "example": "002A",
              "description": "The cluster code of this internet subscription. This field can be unset when updating."
            },
            "login": {
              "type": "string",
              "example": "cattherine.menitro",
              "description": "The login of this internet subscription. This field can be unset when updating."
            },
            "password": {
              "type": "string",
              "example": "PMFPAI53A3",
              "description": "The password of this internet subscription. This field can be unset when updating."
            },
            "rType": {
              "type": "integer",
              "format": "int32",
              "example": 1,
              "description": "Subscription receiver type\n- 0 -> HEATING\n- 1 -> STANDARD\n"
            }
          }
        }
      ]
    },
    "updateWifiSubscription": {
      "description": "Information about Wi-Fi internet subscription",
      "required": ["networkType", "connectionType"],
      "allOf": [
        { "$ref": "#/definitions/updateInternetSubscription" },
        {
          "type": "object",
          "properties": {
            "networkType": {
              "type": "integer",
              "format": "int32",
              "example": 0,
              "description": "Subscription network type\n- 0 -> COMPANY\n- 1 -> OTHER\n- 2 -> RESIDENT\n"
            },
            "ethConnectionType": {
              "type": "integer",
              "format": "int32",
              "description": "Subscription connection type\n- 0 -> DHCP\n- 1 -> STATIC\n"
            },
            "ssid": {
              "type": "string",
              "description": "The SSID of this Wi-Fi internet subscription. This field can be unset when updating."
            },
            "passphrase": {
              "type": "string",
              "description": "The passphrase on this Wi-Fi internet subscription. This field can be unset when updating."
            }
          }
        }
      ]
    },
    "baseSiteConvention": {
      "type": "object",
      "properties": {
        "annualCost": {
          "type": "number",
          "format": "double",
          "description": "The annual cost of this convention"
        },
        "comments": {
          "type": "string",
          "description": "The comments of this convention"
        },
        "startTime": {
          "type": "integer",
          "format": "int64",
          "description": "The start time of this convention"
        },
        "endTime": {
          "type": "integer",
          "format": "int64",
          "description": "The end time of this convention"
        },
        "contractReference": {
          "type": "string",
          "description": "The bss contract reference of this convention"
        },
        "maintenance": {
          "type": "boolean",
          "description": "is this convention in maintenance"
        },
        "maintenanceAnnualCost": {
          "type": "number",
          "format": "double",
          "description": "The annual cost of the maintenance of this convention"
        },
        "status": {
          "type": "integer",
          "format": "int32",
          "description": "Convention status.\n- 0 -> AT SIGFOX\n- 1 -> AT HOST\n- 2 -> SIGNED SIGFOX\n- 3 -> SIGNED HOST\n- 4 -> SIGNED BOTH\n"
        },
        "type": {
          "type": "integer",
          "format": "int32",
          "description": "Convention status.\n- 0 -> CONDOMINIUM\n- 1 -> INDIVIDUAL\n- 2 -> SOCIAL HOUSING AUTHORITY\n- 3 -> ASSOCIATION\n- 4 -> COMPANY\n"
        }
      },
      "description": "Generic information about convention"
    },
    "siteConvention": {
      "description": "information about convention",
      "allOf": [
        { "$ref": "#/definitions/baseSiteConvention" },
        {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "The convention's identifier"
            },
            "site": { "$ref": "#/definitions/minSite" },
            "group": { "$ref": "#/definitions/minGroup" }
          }
        }
      ]
    },
    "baseSiteIntervention": {
      "type": "object",
      "properties": {
        "author": {
          "type": "string",
          "description": "The author of this intervention"
        },
        "comment": {
          "type": "string",
          "description": "The comment about this intervention"
        },
        "equipmentsToChange": {
          "type": "array",
          "description": "List of equipment to change for this intervention\n- 0 -> ANTENNA\n- 1 -> BASE STATION\n- 2 -> LNA\n- 3 -> FEEDER\n- 4 -> ADSL MODEM\n- 5 -> NETWORK CABLE\n- 6 -> SURGE\n- 7 -> WATERPROOFNESS\n- 8 -> SAT DEMOD\n- 9 -> SAT LNB\n- 10 -> SAT DISH\n- 11 -> SAT POWER SUPPLY\n- 12 -> INVERTER\n- 13 -> KEY 3G\n- 14 -> CIRCUIT BREAKER\n- 15 -> ROUTER 3G\n",
          "items": { "type": "integer", "format": "int32" }
        },
        "plannedTime": {
          "type": "integer",
          "format": "int64",
          "description": "The planned time of this intervention"
        },
        "interventionTime": {
          "type": "integer",
          "format": "int64",
          "description": "The time of this intervention"
        },
        "endTime": {
          "type": "integer",
          "format": "int64",
          "description": "The end time of this intervention"
        },
        "billCode": {
          "type": "string",
          "description": "The bill code of this intervention"
        },
        "rtId": {
          "type": "string",
          "description": "The request tracker identifier of this intervention"
        },
        "closed": {
          "type": "boolean",
          "description": "is this intervention closed"
        },
        "costs": {
          "type": "number",
          "format": "double",
          "description": "The costs of this intervention"
        },
        "type": {
          "type": "integer",
          "format": "int32",
          "description": "Convention status.\n- 0 -> OTHER\n- 1 -> PRE VISIT\n- 2 -> ANTENNA INSTALLATION\n- 3 -> TELECOM LINE INSTALLATION\n- 4 -> SITE SEARCH\n- 5 -> SAT INSTALLATION\n- 6 -> ELECTRICAL\n- 7 -> DISMANTLING\n"
        }
      },
      "description": "Generic information about intervention"
    },
    "siteIntervention": {
      "description": "Information about intervention",
      "allOf": [
        { "$ref": "#/definitions/baseSiteIntervention" },
        {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "The intervention's identifier"
            },
            "site": { "$ref": "#/definitions/minSite" },
            "group": { "$ref": "#/definitions/minGroup" },
            "baseStation": { "$ref": "#/definitions/minBaseStation" },
            "creationTime": {
              "type": "integer",
              "format": "int64",
              "description": "Date of the creation of this intervention (in milliseconds)"
            },
            "createdBy": {
              "type": "string",
              "description": "Identifier of the user who created this intervention"
            },
            "lastEditedTime": {
              "type": "integer",
              "format": "int64",
              "description": "Date of the last edition of this intervention (in milliseconds)"
            },
            "lastEditedBy": {
              "type": "string",
              "description": "Identifier of the user who last edited this intervention"
            }
          }
        }
      ]
    },
    "baseSite": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The site's name",
          "maxLength": 100
        },
        "lessorId": {
          "type": "string",
          "description": "The lessor identifier of the site. This field can be unset when updating."
        },
        "address": {
          "type": "string",
          "description": "The address of the site"
        },
        "comment": {
          "type": "string",
          "description": "Comment about the site. This field can be unset when updating."
        },
        "status": {
          "type": "integer",
          "format": "int32",
          "description": "Site status:\n- 0 -> PROD\n- 1 -> REFUSED\n- 2 -> INSTALLED\n- 3 -> NOT PLANNED\n- 4 -> PRE PROD\n- 5 -> CANDIDATE\n- 6 -> CANCELLED\n- 7 -> CLIENT\n- 8 -> RD\n- 9 -> LABO\n- 14 -> INSTALLED CONNECTED ONLY SECONDARY\n- 15 -> INSTALLED CONNECTED ONLY PRIMARY\n"
        },
        "statusComment": {
          "type": "string",
          "description": "The comment of the status of the site. This field can be unset when updating."
        },
        "stationInstallation": {
          "type": "integer",
          "format": "int32",
          "description": "Station installation:\n- 0 -> INDOOR WITHOUT CABINET\n- 1 -> OUTDOOR WITH CABINET\n- 2 -> INDOOR WITH CABINET\n- 3 -> OUTDOOR WITHOUT CABINET\n"
        },
        "inverterInfo": {
          "type": "integer",
          "format": "int32",
          "description": "Inverter type:\n- 0 -> NONE\n- 1 -> AC POWER HOST\n- 2 -> AC POWER HOST INVERTER\n- 3 -> AC POWER SIGFOX INVERTER\n- 4 -> DC POWER HOST 48V\n- 5 -> DC POWER SOLAR\n"
        },
        "aerialWorkPlatformAccess": {
          "type": "boolean",
          "description": "is the site access to the aerial work platform"
        },
        "lat": {
          "type": "number",
          "format": "double",
          "description": "the site's latitude",
          "minimum": -90,
          "maximum": 90
        },
        "lng": {
          "type": "number",
          "format": "double",
          "description": "the site's longitutde",
          "minimum": -180,
          "maximum": 180
        }
      },
      "description": "Generic information about a site"
    },
    "site": {
      "allOf": [
        { "$ref": "#/definitions/baseSite" },
        {
          "type": "object",
          "properties": {
            "id": { "type": "string", "description": "The site's identifier" },
            "host": { "$ref": "#/definitions/minHost" },
            "maintenance": { "$ref": "#/definitions/minMaintenance" },
            "group": { "$ref": "#/definitions/minGroup" },
            "basestationCount": {
              "type": "integer",
              "format": "int32",
              "description": "the number of base station installed on this site"
            },
            "primaryInternetSubscription": {
              "$ref": "#/definitions/internetSubscription"
            },
            "candidateExternalId": {
              "type": "number",
              "format": "long",
              "description": "the external identifier of the site as a candidate"
            },
            "location": {
              "type": "array",
              "description": "ISO 3166-1 UN M.49 country code of the site location. The first code is the country (region and department available for some countries).",
              "items": {
                "type": "object",
                "properties": {
                  "code": {
                    "type": "integer",
                    "format": "int32",
                    "description": "location code"
                  },
                  "name": { "type": "string", "description": "location name" }
                }
              }
            },
            "creationTime": {
              "type": "integer",
              "format": "int64",
              "description": "Date of the creation of this site (in milliseconds)"
            },
            "createdBy": {
              "type": "string",
              "description": "Identifier of the user who created this site"
            },
            "lastEditedTime": {
              "type": "integer",
              "format": "int64",
              "description": "Date of the last edition of this site (in milliseconds)"
            },
            "lastEditedBy": {
              "type": "string",
              "description": "Identifier of the user who last edited this site"
            },
            "actions": { "$ref": "#/definitions/actions" },
            "resources": { "$ref": "#/definitions/resources" }
          }
        }
      ]
    },
    "siteUpdate": {
      "allOf": [
        { "$ref": "#/definitions/baseSite" },
        {
          "type": "object",
          "properties": {
            "location": {
              "type": "array",
              "description": "ISO 3166-1 UN M.49 country code of the site location.\nThe first code is the country (region and department available for some countries).\n",
              "items": { "type": "integer", "format": "int32" }
            }
          },
          "example": {
            "lessorId": "1234abcd",
            "name": "Site 1",
            "address": "10 Street Paris",
            "comment": "some comments",
            "status": 0,
            "statusComment": "some comments on the status",
            "stationInstalation": 1,
            "inverterInfo": 4,
            "aerialWorkPlatformAccess": false,
            "lat": 40.32,
            "lng": 51.65,
            "location": [250, 11, 93]
          }
        }
      ]
    },
    "siteCreation": {
      "required": [
        "locs",
        "address",
        "groupId",
        "name",
        "inverterInfo",
        "status",
        "lat",
        "lng"
      ],
      "allOf": [
        { "$ref": "#/definitions/siteUpdate" },
        {
          "type": "object",
          "properties": {
            "groupId": {
              "type": "string",
              "description": "identifier of the group of this site"
            }
          }
        }
      ]
    },
    "minContact": {
      "type": "object",
      "properties": {
        "id": { "type": "string", "description": "The contact's identifier" },
        "name": { "type": "string", "description": "The contact's name" },
        "actions": { "$ref": "#/definitions/actions" }
      },
      "description": "Defines a contact entity",
      "example": {
        "id": "52243fa7e4b00e1b8587bd5a",
        "name": "Contact Name",
        "actions": ["read"]
      }
    },
    "minMaintenance": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The maintenance's identifier"
        },
        "name": { "type": "string", "description": "The maintenance's name" }
      },
      "title": "Maintenance"
    },
    "tilesResponse": {
      "type": "object",
      "properties": {
        "baseImgUrl": {
          "type": "string",
          "description": "The tiles base image url"
        },
        "tmsTemplateUrl": {
          "type": "string",
          "description": "The TMS template url"
        },
        "bounds": { "$ref": "#/definitions/bounds" }
      },
      "description": "Defines tiles reference to display on web map",
      "example": {
        "baseImgUrl": "https://tiles.sigfox.com/2d16bae056f4cce6aae7cce5e624cfd4",
        "tmsTemplateUrl": "https://tiles.sigfox.com/2d16bae056f4cce6aae7cce5e624cfd4/{z}/{x}/{y}.png",
        "bounds": {
          "sw": { "lat": 40.378456, "lng": -12.456965 },
          "ne": { "lat": 67.456416, "lng": 24.657631 }
        }
      }
    },
    "bounds": {
      "type": "object",
      "properties": {
        "sw": { "$ref": "#/definitions/latLng" },
        "ne": { "$ref": "#/definitions/latLng" }
      },
      "description": "Geographics bounds"
    },
    "latLng": {
      "type": "object",
      "properties": {
        "lat": {
          "type": "number",
          "format": "double",
          "description": "The latitude in degrees.",
          "minimum": -90,
          "maximum": 90
        },
        "lng": {
          "type": "number",
          "format": "double",
          "description": "The longitude in degrees.",
          "minimum": -180,
          "maximum": 180
        }
      }
    },
    "kmzCreatePublicRequest": {
      "type": "object",
      "properties": {
        "coverageMode": {
          "type": "string",
          "description": "The coverage mode for coverage display.  Outdoor is for 0dB margin and Indoor for 20 dB margin U1, U2 and U3 are for product class (1U, 2U and 3U), 0U is considered by default.\n",
          "enum": [
            "OVERLAP_INDOOR",
            "OVERLAP_OUTDOOR",
            "OVERLAP_INDOOR_U1",
            "OVERLAP_OUTDOOR_U1",
            "OVERLAP_INDOOR_U2",
            "OVERLAP_OUTDOOR_U2",
            "OVERLAP_INDOOR_U3",
            "OVERLAP_OUTDOOR_U3"
          ]
        }
      },
      "example": { "coverageMode": "OVERLAP_OUTDOOR" }
    },
    "kmzStatusResponse": {
      "type": "object",
      "properties": {
        "jobDone": {
          "type": "boolean",
          "description": "If the job is completed or not"
        },
        "time": {
          "type": "integer",
          "format": "int64",
          "description": "the kmz layer creation time (in milliseconds since the Unix Epoch)"
        }
      },
      "example": { "jobDone": true, "time": 1487065942000 }
    },
    "userRole": {
      "type": "object",
      "properties": {
        "group": { "$ref": "#/definitions/minGroup" },
        "profile": { "$ref": "#/definitions/minProfile" }
      },
      "description": "Information about User Role"
    },
    "commonUser": {
      "type": "object",
      "properties": {
        "firstName": {
          "type": "string",
          "description": "The user's first name",
          "maxLength": 100
        },
        "lastName": {
          "type": "string",
          "description": "The user's last name",
          "maxLength": 100
        },
        "timezone": { "type": "string", "description": "The user's timezone" }
      },
      "description": "Generic information about a User"
    },
    "baseResponse": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string",
          "description": "Additional information about the operation"
        },
        "userRoles": {
          "type": "array",
          "title": "UserRoles",
          "items": { "$ref": "#/definitions/userRole" }
        }
      },
      "description": "Generic information about user operation",
      "example": {
        "message": "User roles already covered by higher roles",
        "userRoles": [
          {
            "group": { "id": "572f1204017975032d8ec1dd" },
            "profile": { "id": "572f196fe0b90abc0b5104ab" }
          },
          {
            "group": { "id": "572f1204017975032d8eeeee" },
            "profile": { "id": "572f196fe0b90abc0b511111" }
          }
        ]
      }
    },
    "updateResponse": {
      "description": "Generic information about user update operation",
      "allOf": [{ "$ref": "#/definitions/baseResponse" }]
    },
    "createResponse": {
      "description": "Generic information about user create operation",
      "allOf": [
        { "$ref": "#/definitions/baseResponse" },
        {
          "type": "object",
          "properties": {
            "id": { "type": "string", "description": "The user's identifier" }
          },
          "example": { "id": "5730510c7f071f9afd2bb2b7" }
        }
      ]
    },
    "user": {
      "description": "Information about a User",
      "allOf": [
        { "$ref": "#/definitions/commonUser" },
        {
          "type": "object",
          "properties": {
            "id": { "type": "string", "description": "The user's identifier" },
            "email": {
              "type": "string",
              "format": "email",
              "description": "The user's email",
              "maxLength": 250
            },
            "locked": {
              "type": "boolean",
              "description": "If the user account is locked or not"
            },
            "creationTime": {
              "type": "integer",
              "format": "int64",
              "description": "The user's creation time (in millisecond since Unix Epoch)"
            },
            "lastLoginTime": {
              "type": "integer",
              "format": "int64",
              "description": "The user's last login time"
            },
            "userRoles": {
              "type": "array",
              "title": "UserRoles",
              "items": { "$ref": "#/definitions/userRole" }
            },
            "actions": { "$ref": "#/definitions/actions" },
            "resources": { "$ref": "#/definitions/resources" }
          }
        }
      ]
    },
    "userUpdate": {
      "description": "User information to be updated",
      "allOf": [
        { "$ref": "#/definitions/commonUser" },
        {
          "type": "object",
          "properties": {
            "userRoles": {
              "type": "array",
              "description": "Defines the rights of the user",
              "title": "UserRoles",
              "items": {
                "type": "object",
                "title": "UserRole",
                "properties": {
                  "groupId": {
                    "type": "string",
                    "description": "The group identifier on which the user will have the permissions set"
                  },
                  "profileId": {
                    "type": "string",
                    "description": "The profile identifier giving permissions to the user"
                  }
                },
                "required": ["groupId", "profileId"]
              }
            },
            "baseStations": {
              "type": "string",
              "description": "list of base station ids (Comma-separated values in hexadecimal format) corresponding to the userRoles with tap limited access granted"
            },
            "maintenances": {
              "type": "string",
              "description": "list of maintenance ids corresponding to the userRoles with site limited access granted"
            }
          }
        }
      ]
    },
    "userCreation": {
      "description": "User information for creation",
      "required": ["userRoles", "email", "firstName", "lastName"],
      "allOf": [
        { "$ref": "#/definitions/userUpdate" },
        {
          "type": "object",
          "properties": {
            "email": {
              "type": "string",
              "format": "email",
              "description": "The user's email",
              "maxLength": 250
            },
            "sendWelcomeEmail": {
              "type": "boolean",
              "description": "Send an email to the user to create/change is password"
            }
          }
        }
      ]
    }
  },
  "externalDocs": {
    "description": "Community",
    "url": "https://ask.sigfox.com/spaces/34/index.html"
  }
}

