#!/usr/bin/env php
<?php

use Arimac\Sigfox\GenCode\Client;
use Arimac\Sigfox\GenCode\Model;
use Arimac\Sigfox\GenCode\Config\EnumFields;
use Arimac\Sigfox\GenCode\Config\MethodNames;
use Arimac\Sigfox\GenCode\Config\RewriteRules;
use Arimac\Sigfox\GenCode\Helper;
use Arimac\Sigfox\GenCode\Repository;
use Arimac\Sigfox\GenCode\Request;
use Arimac\Sigfox\GenCode\Response;

$dir = dirname(__DIR__);

require_once $dir . "/vendor/autoload.php";

$openapiFileLocation = $dir . "/tmp/openapi.json";
$openapiUrl = "https://support.sigfox.com/api/apidocs";
if (!file_exists($openapiFileLocation)) {
    file_put_contents($openapiFileLocation, fopen($openapiUrl, 'r'));
}

Helper::rrmdir($dir . "/../src/Model");
Helper::rrmdir($dir."/../src/Repository");
Helper::rrmdir($dir."/../src/Request");
Helper::rrmdir($dir."/../src/Response/Generated");
@unlink($dir."/../src/Sigfox.php");

$openapi = json_decode( file_get_contents($openapiFileLocation) , true);

EnumFields::initialize();
RewriteRules::initialize();
MethodNames::initialize();

$simpleAlias = ["Resources", "Resource", "Actions", "Action"];

foreach ($openapi["definitions"] as $key => $definition) {
    $name = ucfirst($key);
    if (!in_array($name, $simpleAlias)) {
        $defClass = Model::fromArray("Arimac\\Sigfox\\Model\\$name", $definition);
    }
}

foreach ($openapi["paths"] as $endpoint => $operations){
    $rewrite = RewriteRules::rewrite($endpoint);
    foreach($operations as $method=> $operation){
        if($method!=="parameters"){
            $methodName = MethodNames::getMethodName($endpoint, $method, $operation["description"]);
        }
    }
}

/** @var Repository[] **/

$repositories = [];

$client = new Client("Arimac\\Sigfox", "Sigfox", Helper::normalizeDocComment("Client for sigfox API"));
$client->extend("Arimac\\Sigfox\\SigfoxExt");

$errors = [
    400=> "Arimac\\Sigfox\\Exception\\Response\\BadRequestException",
    401=> "Arimac\\Sigfox\\Exception\\Response\\UnauthorizedException",
    403=> "Arimac\\Sigfox\\Exception\\Response\\ForbiddenException",
    404=> "Arimac\\Sigfox\\Exception\\Response\\NotFoundException",
    405=> "Arimac\\Sigfox\\Exception\\Response\\MethodNotAllowedException",
    409=> "Arimac\\Sigfox\\Exception\\Response\\ConflictException",
    412=> "Arimac\\Sigfox\\Exception\\Response\\PreconditionFailedException",
    500=> "Arimac\\Sigfox\\Exception\\Response\\InternalServerException"
];

foreach ($openapi["paths"] as $endpoint => $path) {
    $rewrite = RewriteRules::rewrite($endpoint);
    $slices = explode("/", $rewrite);
    $repoName = "";
    $requestMethods = array_keys($path);
    $requestMethods = array_filter($requestMethods, function($method){
        return $method!="parameters"; 
    });
    $operation = $path[$requestMethods[0]];
    $params = isset($operation["parameters"])? $operation["parameters"]: [];
    $pathParams = [];
    foreach ($params as $param) {
        if ($param["in"] === "path") {
            $type = $param["typ"] ?? "string";
            $description = $param["description"];
            $pathParams[$param["name"]] = [
                "type" => Helper::toPHPValue($type),
                "description" => $description
            ];
        }
    }

    foreach ($slices as $key=> $slice) {
        if ($slice !== "") {
            $repoNameSlice = "";
            $parameter = false;
            if (substr($slice, 0, 1) === "{") {
                $parameter = true;
                $repoNameSlice = Helper::dashToCamel(substr($slice, 1, strlen($slice) - 2));
            } else {
                $repoNameSlice = Helper::dashToCamel($slice);
            }
            if($key===1){
                $client->addRepositoryMethod(lcfirst($repoNameSlice), "Arimac\\Sigfox\\Repository\\$repoNameSlice");
            }
            $previousRepoName = $repoName;
            $repoName .= $repoNameSlice;

            if (!isset($repositories[$repoName])) {
                $repository = new Repository("Arimac\\Sigfox\\Repository", $repoName);
                /** @var Repository **/
                $prevRepository = $repositories[$previousRepoName] ?? null;
                $repositories[$repoName] = $repository;

                $properties = $prevRepository ? $prevRepository->getProperties() : [];

                if ($parameter) {
                    $paramName = lcfirst($repoNameSlice);
                    $type = $pathParams[$paramName]["type"];
                    $description = $pathParams[$paramName]["description"];

                    $properties[] = [$paramName, $type, $description];
                    $prevRepository->addFindMethod(
                        $paramName,
                        $type,
                        "Arimac\\Sigfox\\Repository\\$repoName",
                        Helper::normalizeDocComment(
                            "Find by $paramName", 
                            [
                                ["param", "$type", "\$$paramName", $description],
                                ["return","$repoName", null ]
                            ]
                        )
                    );
                } else if ($prevRepository) {
                    $methodName = lcfirst($repoNameSlice);
                    $prevRepository->addRepositoryMethod($methodName,"Arimac\\Sigfox\\Repository\\". $repoName);
                }

                    $repository->addConstructor($properties);
            } else {
                $repository = $repositories[$repoName];
            }
        }
    }

    foreach ($requestMethods as $requestMethod) {
        $description = $path[$requestMethod]["description"];
        $methodName = MethodNames::getMethodName($endpoint, $requestMethod, $description);

        $requestClassName = $repoName . ucfirst($methodName);

        $operation = $path[$requestMethod];

        $responseModel=null;
        $responseTypeNullable = false;
        $expectedErrors = [];
        foreach($operation["responses"] as $statusCode => $response){
            if($statusCode<204&&$statusCode>=200){
                if(isset($response["schema"])){
                    $responseClassName = $requestClassName."Response";
                    $responseModel = Response::fromArray("Arimac\\Sigfox\\Response\\Generated\\$responseClassName",$response["schema"]);
                }
            }
            if($statusCode==204){
                $responseTypeNullable = true;    
            }
            if($statusCode>=400){
                $expectedErrors[(int)$statusCode] = $errors[(int) $statusCode];
            }
        }

        $requestModel = Request::fromArray("Arimac\\Sigfox\\Request\\$requestClassName", $operation);

        $repository->addRequestMethod(
            $methodName, 
            $requestMethod, 
            $endpoint, 
            $responseModel, 
            $responseTypeNullable,
            $requestModel, 
            $expectedErrors,
            $description
        );
    }
}

$client->save();

foreach ($repositories as $repoName => $repo) {
    $repo->save();
}

EnumFields::save();
RewriteRules::save();
MethodNames::save();
