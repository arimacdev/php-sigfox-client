#!/usr/bin/env php
<?php

use Arimac\Sigfox\GenCode\Definition;
use Arimac\Sigfox\GenCode\Repository;
use cebe\openapi\Reader;
use cebe\openapi\spec\PathItem;

use function Arimac\Sigfox\GenCode\Utils\dashToCamel;
use function Arimac\Sigfox\GenCode\Utils\defToName;
use function Arimac\Sigfox\GenCode\Utils\rrmdir;

$dir = dirname(__DIR__);

require_once $dir . "/vendor/autoload.php";

$openapiFileLocation = $dir . "/tmp/openapi.json";
$openapiUrl = "https://support.sigfox.com/api/apidocs";
if (!file_exists($openapiFileLocation)) {
    file_put_contents($openapiFileLocation, fopen($openapiUrl, 'r'));
}

rrmdir($dir . "/../src/Definition");
mkdir($dir . "/../src/Definition");

$openapi = Reader::readFromJsonFile($openapiFileLocation);

$simpleAlias = ["Resources", "Resource", "Actions", "Action"];

function primitiveTypeCast(string $type): string
{
    switch ($type) {
        case "integer":
            return "int";
        case "number":
            return "float";
        case "boolean":
            return "bool";
        case "string":
            return "string";
        case "array":
            return "array";
        default:
            return $type;
    }
}

function typeCast(Definition $defClass, string $type, array $obj = []): string
{
    switch ($type) {
        case "integer":
            return "int";
        case "number":
            if (isset($obj["format"]) && $obj["format"] == "double") {
                return "float";
            }
            return "int";
        case "boolean":
            return "bool";
        case "string":
            return "string";
        case "Actions":
            return "string[]";
        case "Resources":
            return "string[]";
        case "Action":
            return "string";
        case "Resource":
            return "string";
        case "array":
            $items = $obj["items"];
            if (isset($items["\$ref"])) {
                $definition = defToName($items["\$ref"]);
                $defClass->addUse("Arimac\\Sigfox\\Definition", $definition);
                return $definition . "[]";
            } else if ($items["type"] != "object") {
                return typeCast($defClass, $items["type"], $items) . "[]";
            }
        default:
            $defClass->addUse($defClass->getNamespace(), $type);
            return $type;
    }
}

function addProperties(Definition $defClass, $definition)
{
    if (isset($definition["properties"]) && isset($definition["type"]) && $definition["type"] == "object") {
        $required = $definition["required"] ?? [];
        if (isset($definition['required'])) {
            $defClass->setRequired($definition['required']);
        }
        $objects = [];
        foreach ($definition["properties"] as $propertyName => $propertyAttr) {
            if (isset($propertyAttr["type"]) && $propertyAttr["type"] == "object") {
                if (
                    isset($propertyAttr["allOf"]) &&
                    count($propertyAttr["allOf"]) == 1 &&
                    isset($propertyAttr["allOf"][0]["\$ref"])
                ) {
                    $defName = defToName($propertyAttr["allOf"][0]["\$ref"]);
                    if (!in_array($defName, ["Resources", "Resource", "Actions", "Action"])) {
                        $objects[$propertyName] = "\\Arimac\\Sigfox\\Definition\\$defName";
                    }
                    $defClass->addProperty(
                        $propertyName,
                        typeCast($defClass, $defName, $propertyAttr),
                        $propertyAttr["description"] ?? null,
                        !in_array($propertyName, $required)
                    );
                } else if (count($propertyAttr["properties"])) {
                    $propertyDefClass = Definition::fromArray(
                        $defClass->getNamespace() . "\\" . $defClass->getClassName(),
                        ucfirst($propertyName),
                        $propertyAttr
                    );
                    $propertyDefClass->save();

                    $defClass->addUse($defClass->getNamespace() . "\\" . $defClass->getClassName(), $propertyDefClass->getClassName());
                    $defClass->addProperty(
                        $propertyName,
                        $propertyDefClass->getClassName(),
                        $propertyAttr["description"] ?? null,
                        !in_array($propertyName, $required)
                    );
                } else {
                    $defClass->addProperty(
                        $propertyName,
                        "array",
                        $propertyAttr["description"] ?? null,
                        !in_array($propertyName, $required)
                    );
                }
            } else if (
                isset($propertyAttr["type"]) &&
                $propertyAttr["type"] == "array" &&
                isset($propertyAttr["items"]["type"]) &&
                $propertyAttr["items"]["type"] == "object"
            ) {
                $propertyDefClass = Definition::fromArray(
                    $defClass->getNamespace() . "\\" . $defClass->getClassName(),
                    ucfirst($propertyName) . "Item",
                    $propertyAttr["items"]
                );
                $propertyDefClass->save();
                $defClass->addUse($defClass->getNamespace() . "\\" . $defClass->getClassName(), $propertyDefClass->getClassName());
                $defClass->addProperty(
                    $propertyName,
                    $propertyDefClass->getClassName() . "[]",
                    $propertyAttr["description"] ?? null,
                    !in_array($propertyName, $required),
                );
            } else if (isset($propertyAttr["type"])) {
                $defClass->addProperty(
                    $propertyName,
                    typeCast($defClass, $propertyAttr["type"], $propertyAttr),
                    $propertyAttr["description"] ?? null,
                    !in_array($propertyName, $required)
                );
            } else if (isset($propertyAttr["\$ref"])) {
                $defName = defToName($propertyAttr["\$ref"]);
                if (!in_array($defName, ["Resources", "Resource", "Actions", "Action"])) {
                    $objects[$propertyName] = "\\Arimac\\Sigfox\\Definition\\$defName";
                }
                $defClass->addProperty(
                    $propertyName,
                    typeCast($defClass, $defName, $propertyAttr),
                    $propertyAttr["description"] ?? null,
                    !in_array($propertyName, $required)
                );
            }
        }
        if (count($objects)) {
            $defClass->setObjects($objects);
        }
    }
}

foreach ($openapi->definitions as $key => $definition) {
    $name = ucfirst($key);
    if (!in_array($name, $simpleAlias)) {

        $defClass = Definition::fromArray("Arimac\\Sigfox\\Definition", $name, $definition);
        $defClass->save();
    }
}

/** @var Repository[] **/
$repositories = [];
/** @var PathItem $path **/
foreach ($openapi->paths as $key => $path) {
    $slices = explode("/", $key);
    $repoName = "";
    $operation = $path->get ?? $path->post ?? $path->put ?? $path->delete;
    $params = $operation->parameters;
    $pathParams = [];
    foreach ($params as $param) {
        if ($param->in === "path") {
            $type = $param->getSerializableData()->type ?? "string";
            $description = $param->description;
            $pathParams[$param->name] = [
                "type" => primitiveTypeCast($type),
                "description" => $description
            ];
        }
    }
    foreach ($slices as $slice) {
        if ($slice !== "") {
            $repoNameSlice = "";
            $parameter = false;
            if (substr($slice, 0, 1) === "{") {
                $parameter = true;
                $repoNameSlice = dashToCamel(substr($slice, 1, strlen($slice) - 2));
            } else {
                $repoNameSlice = dashToCamel($slice);
            }
            $previousRepoName = $repoName;
            $repoName .= $repoNameSlice;

            if (!isset($repositories[$repoName])) {
                $repository = new Repository("Arimac\\Sigfox\\Repository", $repoName);
                /** @var Repository **/
                $prevRepository = $repositories[$previousRepoName] ?? null;
                $repositories[$repoName] = $repository;

                $properties = $prevRepository ? $prevRepository->getProperties() : [];

                if ($parameter) {
                    /** @var Repository **/
                    $prevRepository->addUse("Arimac\\Sigfox\\Repository", $repoName);


                    $paramName = lcfirst($repoNameSlice);
                    $type = $pathParams[$paramName]["type"];
                    $description = $pathParams[$paramName]["description"];

                    $properties[] = [$paramName, $type, $description];
                    $prevRepository->addFindMethod(
                        $paramName,
                        $type,
                        $repoName,
                        $description
                    );
                } else if ($prevRepository) {
                    /** @var Repository **/
                    $prevRepository->addUse("Arimac\\Sigfox\\Repository", $repoName);
                    $methodName = lcfirst($repoNameSlice);
                    $prevRepository->addRepositoryMethod($methodName, $repoName);
                }

                if (count($properties)) {
                    $repository->addConstructor($properties);
                }
            }
        }
    };
}

foreach ($repositories as $repoName => $repo) {
    $repo->save();
}
